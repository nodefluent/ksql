// Generated from ./parser/SqlBase.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SqlBaseListener = require('./SqlBaseListener').SqlBaseListener;
var grammarFileName = "SqlBase.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00f2\u0499\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0003\u0002\u0007\u0002v\n\u0002\f\u0002\u000e\u0002",
    "y\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u0091\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0096\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u009b",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u009f\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00a3\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00a9\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00b9\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00be\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00c5\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00cc\n\u0005\f\u0005\u000e",
    "\u0005\u00cf\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d3\n",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d7\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00de\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00e3\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u00ea\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u00f1\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u00f8\n\u0005\f\u0005\u000e\u0005",
    "\u00fb\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ff\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0103\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u010a\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u010f\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0118\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u011f\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0126\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u012b\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0131\n\u0005",
    "\f\u0005\u000e\u0005\u0134\u000b\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u0138\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u013c\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0145\n\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0007",
    "\b\u0150\n\b\f\b\u000e\b\u0153\u000b\b\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0005\n\u015e\n\n\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0007\f\u0169\n\f\f\f\u000e\f\u016c\u000b\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0005\f\u0172\n\f\u0003\r\u0003\r\u0005\r\u0176\n\r\u0003\r",
    "\u0003\r\u0003\r\u0007\r\u017b\n\r\f\r\u000e\r\u017e\u000b\r\u0003\r",
    "\u0003\r\u0005\r\u0182\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0188",
    "\n\r\f\r\u000e\r\u018b\u000b\r\u0005\r\u018d\n\r\u0003\r\u0003\r\u0005",
    "\r\u0191\n\r\u0003\r\u0003\r\u0005\r\u0195\n\r\u0003\r\u0003\r\u0003",
    "\r\u0005\r\u019a\n\r\u0003\r\u0003\r\u0005\r\u019e\n\r\u0003\u000e\u0005",
    "\u000e\u01a1\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01a6\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0007\u0013\u01c6\n\u0013\f\u0013\u000e\u0013\u01c9",
    "\u000b\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0007\u0015\u01d1\n\u0015\f\u0015\u000e\u0015\u01d4\u000b",
    "\u0015\u0005\u0015\u01d6\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u01da\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007",
    "\u0016\u01e0\n\u0016\f\u0016\u000e\u0016\u01e3\u000b\u0016\u0005\u0016",
    "\u01e5\n\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01e9\n\u0016\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u01ed\n\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u01f6\n\u0018\u0003\u0018\u0005\u0018\u01f9\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0200\n\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u0213\n\u0019\u0007\u0019\u0215\n\u0019\f\u0019\u000e\u0019\u0218\u000b",
    "\u0019\u0003\u001a\u0005\u001a\u021b\n\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u021f\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0223",
    "\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0227\n\u001a\u0005\u001a",
    "\u0229\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0232\n\u001b\f\u001b\u000e",
    "\u001b\u0235\u000b\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0239\n",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0005\u001d\u023f",
    "\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0243\n\u001d\u0005\u001d",
    "\u0245\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u024b\n\u001e\f\u001e\u000e\u001e\u024e\u000b\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0255\n",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0260\n\u001f",
    "\f\u001f\u000e\u001f\u0263\u000b\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u0268\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u026e\n\u001f\u0003 \u0003 \u0003!\u0003!\u0003",
    "!\u0003!\u0005!\u0276\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007",
    "!\u027e\n!\f!\u000e!\u0281\u000b!\u0003\"\u0003\"\u0005\"\u0285\n\"",
    "\u0003#\u0003#\u0003#\u0003#\u0005#\u028b\n#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u0293\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007",
    "#\u029a\n#\f#\u000e#\u029d\u000b#\u0003#\u0003#\u0003#\u0005#\u02a2",
    "\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u02aa\n#\u0003",
    "#\u0003#\u0003#\u0003#\u0005#\u02b0\n#\u0003#\u0003#\u0005#\u02b4\n",
    "#\u0003#\u0003#\u0003#\u0005#\u02b9\n#\u0003#\u0003#\u0003#\u0005#\u02be",
    "\n#\u0003$\u0003$\u0003$\u0003$\u0005$\u02c4\n$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007",
    "$\u02d2\n$\f$\u000e$\u02d5\u000b$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0006%\u02ec\n%\r%\u000e",
    "%\u02ed\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u02f7",
    "\n%\f%\u000e%\u02fa\u000b%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0005%\u0303\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u030a",
    "\n%\f%\u000e%\u030d\u000b%\u0005%\u030f\n%\u0003%\u0003%\u0005%\u0313",
    "\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u031d",
    "\n%\f%\u000e%\u0320\u000b%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0006%\u0332\n%\r%\u000e%\u0333\u0003%\u0003%\u0005%\u0338\n%\u0003",
    "%\u0003%\u0003%\u0003%\u0006%\u033e\n%\r%\u000e%\u033f\u0003%\u0003",
    "%\u0005%\u0344\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0007%\u035b\n%\f%\u000e%\u035e\u000b%\u0005",
    "%\u0360\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0005%\u036b\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005",
    "%\u0374\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0005%\u0383\n%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0007%\u038d\n%\f%\u000e%\u0390\u000b",
    "%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0398\n&\u0003\'",
    "\u0003\'\u0003(\u0003(\u0003)\u0003)\u0005)\u03a0\n)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u03a6\n)\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u03bf\n+\f+\u000e",
    "+\u03c2\u000b+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007",
    "+\u03cb\n+\f+\u000e+\u03ce\u000b+\u0003+\u0003+\u0005+\u03d2\n+\u0005",
    "+\u03d4\n+\u0003+\u0003+\u0007+\u03d8\n+\f+\u000e+\u03db\u000b+\u0003",
    ",\u0003,\u0005,\u03df\n,\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u03ef\n/\f",
    "/\u000e/\u03f2\u000b/\u0005/\u03f4\n/\u0003/\u0005/\u03f7\n/\u0003/",
    "\u0003/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u040b\n0\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u0416",
    "\n1\u00032\u00032\u00032\u00032\u00052\u041c\n2\u00033\u00033\u0003",
    "3\u00033\u00033\u00053\u0423\n3\u00034\u00034\u00034\u00034\u00054\u0429",
    "\n4\u00035\u00035\u00035\u00075\u042e\n5\f5\u000e5\u0431\u000b5\u0003",
    "6\u00036\u00036\u00036\u00036\u00056\u0438\n6\u00037\u00037\u00038\u0003",
    "8\u00058\u043e\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u0495\n9\u0003",
    ":\u0003:\u0003:\u0002\u00070@FHT;\u0002\u0004\u0006\b\n\f\u000e\u0010",
    "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLN",
    "PRTVXZ\\^`bdfhjlnpr\u0002\u0010\u0003\u0002\u0091\u0092\u0004\u0002",
    "==\u00c8\u00c8\u0004\u0002\u0010\u0010\u00e6\u00e6\u0004\u0002@DGK\u0003",
    "\u0002\u00a6\u00a8\u0003\u0002\u00de\u00df\u0003\u0002\u00e0\u00e2\u0003",
    "\u0002\u00d8\u00dd\u0003\u0002,-\u0003\u0002>C\u0003\u0002kl\u0003\u0002",
    "\u008a\u008b\u0003\u0002\u008c\u008d\u0003\u0002\u00d1\u00d4\u0002\u057b",
    "\u0002w\u0003\u0002\u0002\u0002\u0004|\u0003\u0002\u0002\u0002\u0006",
    "\u007f\u0003\u0002\u0002\u0002\b\u0144\u0003\u0002\u0002\u0002\n\u0146",
    "\u0003\u0002\u0002\u0002\f\u0148\u0003\u0002\u0002\u0002\u000e\u014b",
    "\u0003\u0002\u0002\u0002\u0010\u0156\u0003\u0002\u0002\u0002\u0012\u015a",
    "\u0003\u0002\u0002\u0002\u0014\u015f\u0003\u0002\u0002\u0002\u0016\u0171",
    "\u0003\u0002\u0002\u0002\u0018\u0173\u0003\u0002\u0002\u0002\u001a\u01a0",
    "\u0003\u0002\u0002\u0002\u001c\u01a7\u0003\u0002\u0002\u0002\u001e\u01ae",
    "\u0003\u0002\u0002\u0002 \u01ba\u0003\u0002\u0002\u0002\"\u01c0\u0003",
    "\u0002\u0002\u0002$\u01c2\u0003\u0002\u0002\u0002&\u01ca\u0003\u0002",
    "\u0002\u0002(\u01d9\u0003\u0002\u0002\u0002*\u01e8\u0003\u0002\u0002",
    "\u0002,\u01ea\u0003\u0002\u0002\u0002.\u01ff\u0003\u0002\u0002\u0002",
    "0\u0201\u0003\u0002\u0002\u00022\u0228\u0003\u0002\u0002\u00024\u0238",
    "\u0003\u0002\u0002\u00026\u023a\u0003\u0002\u0002\u00028\u023c\u0003",
    "\u0002\u0002\u0002:\u0246\u0003\u0002\u0002\u0002<\u026d\u0003\u0002",
    "\u0002\u0002>\u026f\u0003\u0002\u0002\u0002@\u0275\u0003\u0002\u0002",
    "\u0002B\u0282\u0003\u0002\u0002\u0002D\u02bd\u0003\u0002\u0002\u0002",
    "F\u02c3\u0003\u0002\u0002\u0002H\u0382\u0003\u0002\u0002\u0002J\u0397",
    "\u0003\u0002\u0002\u0002L\u0399\u0003\u0002\u0002\u0002N\u039b\u0003",
    "\u0002\u0002\u0002P\u039d\u0003\u0002\u0002\u0002R\u03a7\u0003\u0002",
    "\u0002\u0002T\u03d3\u0003\u0002\u0002\u0002V\u03de\u0003\u0002\u0002",
    "\u0002X\u03e0\u0003\u0002\u0002\u0002Z\u03e2\u0003\u0002\u0002\u0002",
    "\\\u03e7\u0003\u0002\u0002\u0002^\u040a\u0003\u0002\u0002\u0002`\u0415",
    "\u0003\u0002\u0002\u0002b\u041b\u0003\u0002\u0002\u0002d\u0422\u0003",
    "\u0002\u0002\u0002f\u0428\u0003\u0002\u0002\u0002h\u042a\u0003\u0002",
    "\u0002\u0002j\u0437\u0003\u0002\u0002\u0002l\u0439\u0003\u0002\u0002",
    "\u0002n\u043d\u0003\u0002\u0002\u0002p\u0494\u0003\u0002\u0002\u0002",
    "r\u0496\u0003\u0002\u0002\u0002tv\u0005\u0004\u0003\u0002ut\u0003\u0002",
    "\u0002\u0002vy\u0003\u0002\u0002\u0002wu\u0003\u0002\u0002\u0002wx\u0003",
    "\u0002\u0002\u0002xz\u0003\u0002\u0002\u0002yw\u0003\u0002\u0002\u0002",
    "z{\u0007\u0002\u0002\u0003{\u0003\u0003\u0002\u0002\u0002|}\u0005\b",
    "\u0005\u0002}~\u0007\u0003\u0002\u0002~\u0005\u0003\u0002\u0002\u0002",
    "\u007f\u0080\u0005> \u0002\u0080\u0081\u0007\u0002\u0002\u0003\u0081",
    "\u0007\u0003\u0002\u0002\u0002\u0082\u0145\u0005\n\u0006\u0002\u0083",
    "\u0084\t\u0002\u0002\u0002\u0084\u0145\u0007\u00cb\u0002\u0002\u0085",
    "\u0086\t\u0002\u0002\u0002\u0086\u0145\u0007\u0094\u0002\u0002\u0087",
    "\u0088\t\u0002\u0002\u0002\u0088\u0089\u0007\u0095\u0002\u0002\u0089",
    "\u0145\u0007\u0094\u0002\u0002\u008a\u008b\t\u0002\u0002\u0002\u008b",
    "\u0145\u0007w\u0002\u0002\u008c\u008d\t\u0002\u0002\u0002\u008d\u0145",
    "\u0007\u0093\u0002\u0002\u008e\u0090\u0007~\u0002\u0002\u008f\u0091",
    "\u0007\u007f\u0002\u0002\u0090\u008f\u0003\u0002\u0002\u0002\u0090\u0091",
    "\u0003\u0002\u0002\u0002\u0091\u0095\u0003\u0002\u0002\u0002\u0092\u0096",
    "\u0005h5\u0002\u0093\u0094\u0007u\u0002\u0002\u0094\u0096\u0005h5\u0002",
    "\u0095\u0092\u0003\u0002\u0002\u0002\u0095\u0093\u0003\u0002\u0002\u0002",
    "\u0096\u0145\u0003\u0002\u0002\u0002\u0097\u009a\u0007\u0080\u0002\u0002",
    "\u0098\u009b\u0005h5\u0002\u0099\u009b\u0007\u00e4\u0002\u0002\u009a",
    "\u0098\u0003\u0002\u0002\u0002\u009a\u0099\u0003\u0002\u0002\u0002\u009b",
    "\u009e\u0003\u0002\u0002\u0002\u009c\u009d\u0007\r\u0002\u0002\u009d",
    "\u009f\u0007\u00cc\u0002\u0002\u009e\u009c\u0003\u0002\u0002\u0002\u009e",
    "\u009f\u0003\u0002\u0002\u0002\u009f\u00a2\u0003\u0002\u0002\u0002\u00a0",
    "\u00a1\t\u0003\u0002\u0002\u00a1\u00a3\u0005n8\u0002\u00a2\u00a0\u0003",
    "\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002\u0002\u00a3\u0145\u0003",
    "\u0002\u0002\u0002\u00a4\u00a5\t\u0002\u0002\u0002\u00a5\u0145\u0007",
    "\u0097\u0002\u0002\u00a6\u00a8\u0007\u0098\u0002\u0002\u00a7\u00a9\u0007",
    "\u0096\u0002\u0002\u00a8\u00a7\u0003\u0002\u0002\u0002\u00a8\u00a9\u0003",
    "\u0002\u0002\u0002\u00a9\u00aa\u0003\u0002\u0002\u0002\u00aa\u0145\u0005",
    "h5\u0002\u00ab\u00ac\u0007\u00b2\u0002\u0002\u00ac\u00ad\u0007\u00e4",
    "\u0002\u0002\u00ad\u00ae\u0007\u00d8\u0002\u0002\u00ae\u0145\u0007\u00e4",
    "\u0002\u0002\u00af\u00b0\u0007\u00cd\u0002\u0002\u00b0\u0145\u0007\u00e4",
    "\u0002\u0002\u00b1\u00b2\u0007\u0099\u0002\u0002\u00b2\u0145\u0005>",
    " \u0002\u00b3\u00b4\u0007s\u0002\u0002\u00b4\u00b8\u0007u\u0002\u0002",
    "\u00b5\u00b6\u0007\u00d5\u0002\u0002\u00b6\u00b7\u0007%\u0002\u0002",
    "\u00b7\u00b9\u0007\'\u0002\u0002\u00b8\u00b5\u0003\u0002\u0002\u0002",
    "\u00b8\u00b9\u0003\u0002\u0002\u0002\u00b9\u00ba\u0003\u0002\u0002\u0002",
    "\u00ba\u00bd\u0005h5\u0002\u00bb\u00bc\u0007o\u0002\u0002\u00bc\u00be",
    "\u0005\u000e\b\u0002\u00bd\u00bb\u0003\u0002\u0002\u0002\u00bd\u00be",
    "\u0003\u0002\u0002\u0002\u00be\u0145\u0003\u0002\u0002\u0002\u00bf\u00c0",
    "\u0007r\u0002\u0002\u00c0\u00c4\u0007v\u0002\u0002\u00c1\u00c2\u0007",
    "\u00d5\u0002\u0002\u00c2\u00c3\u0007%\u0002\u0002\u00c3\u00c5\u0007",
    "\'\u0002\u0002\u00c4\u00c1\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003",
    "\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002\u00c6\u00d2\u0005",
    "h5\u0002\u00c7\u00c8\u0007\u0004\u0002\u0002\u00c8\u00cd\u0005\f\u0007",
    "\u0002\u00c9\u00ca\u0007\u0005\u0002\u0002\u00ca\u00cc\u0005\f\u0007",
    "\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc\u00cf\u0003\u0002\u0002",
    "\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002",
    "\u0002\u00ce\u00d0\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002",
    "\u0002\u00d0\u00d1\u0007\u0006\u0002\u0002\u00d1\u00d3\u0003\u0002\u0002",
    "\u0002\u00d2\u00c7\u0003\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002",
    "\u0002\u00d3\u00d6\u0003\u0002\u0002\u0002\u00d4\u00d5\u0007o\u0002",
    "\u0002\u00d5\u00d7\u0005\u000e\b\u0002\u00d6\u00d4\u0003\u0002\u0002",
    "\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u0145\u0003\u0002\u0002",
    "\u0002\u00d8\u00d9\u0007r\u0002\u0002\u00d9\u00dd\u0007v\u0002\u0002",
    "\u00da\u00db\u0007\u00d5\u0002\u0002\u00db\u00dc\u0007%\u0002\u0002",
    "\u00dc\u00de\u0007\'\u0002\u0002\u00dd\u00da\u0003\u0002\u0002\u0002",
    "\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002",
    "\u00df\u00e2\u0005h5\u0002\u00e0\u00e1\u0007o\u0002\u0002\u00e1\u00e3",
    "\u0005\u000e\b\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3",
    "\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003\u0002\u0002\u0002\u00e4\u00e5",
    "\u0007\u000f\u0002\u0002\u00e5\u00e9\u0005\n\u0006\u0002\u00e6\u00e7",
    "\u0007g\u0002\u0002\u00e7\u00e8\u0007\u0017\u0002\u0002\u00e8\u00ea",
    "\u0005j6\u0002\u00e9\u00e6\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003",
    "\u0002\u0002\u0002\u00ea\u0145\u0003\u0002\u0002\u0002\u00eb\u00ec\u0007",
    "r\u0002\u0002\u00ec\u00f0\u0007t\u0002\u0002\u00ed\u00ee\u0007\u00d5",
    "\u0002\u0002\u00ee\u00ef\u0007%\u0002\u0002\u00ef\u00f1\u0007\'\u0002",
    "\u0002\u00f0\u00ed\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002",
    "\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2\u00fe\u0005h5\u0002",
    "\u00f3\u00f4\u0007\u0004\u0002\u0002\u00f4\u00f9\u0005\f\u0007\u0002",
    "\u00f5\u00f6\u0007\u0005\u0002\u0002\u00f6\u00f8\u0005\f\u0007\u0002",
    "\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f8\u00fb\u0003\u0002\u0002\u0002",
    "\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002",
    "\u00fa\u00fc\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003\u0002\u0002\u0002",
    "\u00fc\u00fd\u0007\u0006\u0002\u0002\u00fd\u00ff\u0003\u0002\u0002\u0002",
    "\u00fe\u00f3\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002",
    "\u00ff\u0102\u0003\u0002\u0002\u0002\u0100\u0101\u0007o\u0002\u0002",
    "\u0101\u0103\u0005\u000e\b\u0002\u0102\u0100\u0003\u0002\u0002\u0002",
    "\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0145\u0003\u0002\u0002\u0002",
    "\u0104\u0105\u0007r\u0002\u0002\u0105\u0109\u0007t\u0002\u0002\u0106",
    "\u0107\u0007\u00d5\u0002\u0002\u0107\u0108\u0007%\u0002\u0002\u0108",
    "\u010a\u0007\'\u0002\u0002\u0109\u0106\u0003\u0002\u0002\u0002\u0109",
    "\u010a\u0003\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b",
    "\u010e\u0005h5\u0002\u010c\u010d\u0007o\u0002\u0002\u010d\u010f\u0005",
    "\u000e\b\u0002\u010e\u010c\u0003\u0002\u0002\u0002\u010e\u010f\u0003",
    "\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0111\u0007",
    "\u000f\u0002\u0002\u0111\u0112\u0005\n\u0006\u0002\u0112\u0145\u0003",
    "\u0002\u0002\u0002\u0113\u0114\u0007\u00a1\u0002\u0002\u0114\u0117\u0007",
    "u\u0002\u0002\u0115\u0116\u0007\u00d5\u0002\u0002\u0116\u0118\u0007",
    "\'\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0117\u0118\u0003",
    "\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u0145\u0005",
    "h5\u0002\u011a\u011b\u0007\u00a1\u0002\u0002\u011b\u011e\u0007v\u0002",
    "\u0002\u011c\u011d\u0007\u00d5\u0002\u0002\u011d\u011f\u0007\'\u0002",
    "\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002",
    "\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u0145\u0005h5\u0002",
    "\u0121\u0122\u0007\u00a1\u0002\u0002\u0122\u0125\u0007t\u0002\u0002",
    "\u0123\u0124\u0007\u00d5\u0002\u0002\u0124\u0126\u0007\'\u0002\u0002",
    "\u0125\u0123\u0003\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002\u0002",
    "\u0126\u0127\u0003\u0002\u0002\u0002\u0127\u0145\u0005h5\u0002\u0128",
    "\u012a\u0007\u0086\u0002\u0002\u0129\u012b\u0007\u0087\u0002\u0002\u012a",
    "\u0129\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b",
    "\u0137\u0003\u0002\u0002\u0002\u012c\u012d\u0007\u0004\u0002\u0002\u012d",
    "\u0132\u0005b2\u0002\u012e\u012f\u0007\u0005\u0002\u0002\u012f\u0131",
    "\u0005b2\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0134\u0003",
    "\u0002\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0132\u0133\u0003",
    "\u0002\u0002\u0002\u0133\u0135\u0003\u0002\u0002\u0002\u0134\u0132\u0003",
    "\u0002\u0002\u0002\u0135\u0136\u0007\u0006\u0002\u0002\u0136\u0138\u0003",
    "\u0002\u0002\u0002\u0137\u012c\u0003\u0002\u0002\u0002\u0137\u0138\u0003",
    "\u0002\u0002\u0002\u0138\u013b\u0003\u0002\u0002\u0002\u0139\u013c\u0005",
    "\b\u0005\u0002\u013a\u013c\u0005h5\u0002\u013b\u0139\u0003\u0002\u0002",
    "\u0002\u013b\u013a\u0003\u0002\u0002\u0002\u013c\u0145\u0003\u0002\u0002",
    "\u0002\u013d\u013e\u0007\u00c9\u0002\u0002\u013e\u013f\u0007\u00ca\u0002",
    "\u0002\u013f\u0140\u0007\u00a5\u0002\u0002\u0140\u0145\u0007\u00e4\u0002",
    "\u0002\u0141\u0142\u0007\u00ce\u0002\u0002\u0142\u0143\u0007\u00cf\u0002",
    "\u0002\u0143\u0145\u0007\u00e4\u0002\u0002\u0144\u0082\u0003\u0002\u0002",
    "\u0002\u0144\u0083\u0003\u0002\u0002\u0002\u0144\u0085\u0003\u0002\u0002",
    "\u0002\u0144\u0087\u0003\u0002\u0002\u0002\u0144\u008a\u0003\u0002\u0002",
    "\u0002\u0144\u008c\u0003\u0002\u0002\u0002\u0144\u008e\u0003\u0002\u0002",
    "\u0002\u0144\u0097\u0003\u0002\u0002\u0002\u0144\u00a4\u0003\u0002\u0002",
    "\u0002\u0144\u00a6\u0003\u0002\u0002\u0002\u0144\u00ab\u0003\u0002\u0002",
    "\u0002\u0144\u00af\u0003\u0002\u0002\u0002\u0144\u00b1\u0003\u0002\u0002",
    "\u0002\u0144\u00b3\u0003\u0002\u0002\u0002\u0144\u00bf\u0003\u0002\u0002",
    "\u0002\u0144\u00d8\u0003\u0002\u0002\u0002\u0144\u00eb\u0003\u0002\u0002",
    "\u0002\u0144\u0104\u0003\u0002\u0002\u0002\u0144\u0113\u0003\u0002\u0002",
    "\u0002\u0144\u011a\u0003\u0002\u0002\u0002\u0144\u0121\u0003\u0002\u0002",
    "\u0002\u0144\u0128\u0003\u0002\u0002\u0002\u0144\u013d\u0003\u0002\u0002",
    "\u0002\u0144\u0141\u0003\u0002\u0002\u0002\u0145\t\u0003\u0002\u0002",
    "\u0002\u0146\u0147\u0005\u0012\n\u0002\u0147\u000b\u0003\u0002\u0002",
    "\u0002\u0148\u0149\u0005j6\u0002\u0149\u014a\u0005T+\u0002\u014a\r\u0003",
    "\u0002\u0002\u0002\u014b\u014c\u0007\u0004\u0002\u0002\u014c\u0151\u0005",
    "\u0010\t\u0002\u014d\u014e\u0007\u0005\u0002\u0002\u014e\u0150\u0005",
    "\u0010\t\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u0150\u0153\u0003",
    "\u0002\u0002\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0151\u0152\u0003",
    "\u0002\u0002\u0002\u0152\u0154\u0003\u0002\u0002\u0002\u0153\u0151\u0003",
    "\u0002\u0002\u0002\u0154\u0155\u0007\u0006\u0002\u0002\u0155\u000f\u0003",
    "\u0002\u0002\u0002\u0156\u0157\u0005j6\u0002\u0157\u0158\u0007\u00d8",
    "\u0002\u0002\u0158\u0159\u0005> \u0002\u0159\u0011\u0003\u0002\u0002",
    "\u0002\u015a\u015d\u0005\u0014\u000b\u0002\u015b\u015c\u0007\u001e\u0002",
    "\u0002\u015c\u015e\t\u0004\u0002\u0002\u015d\u015b\u0003\u0002\u0002",
    "\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u0013\u0003\u0002\u0002",
    "\u0002\u015f\u0160\u0005\u0016\f\u0002\u0160\u0015\u0003\u0002\u0002",
    "\u0002\u0161\u0172\u0005\u0018\r\u0002\u0162\u0163\u0007t\u0002\u0002",
    "\u0163\u0172\u0005h5\u0002\u0164\u0165\u0007q\u0002\u0002\u0165\u016a",
    "\u0005> \u0002\u0166\u0167\u0007\u0005\u0002\u0002\u0167\u0169\u0005",
    "> \u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0169\u016c\u0003\u0002",
    "\u0002\u0002\u016a\u0168\u0003\u0002\u0002\u0002\u016a\u016b\u0003\u0002",
    "\u0002\u0002\u016b\u0172\u0003\u0002\u0002\u0002\u016c\u016a\u0003\u0002",
    "\u0002\u0002\u016d\u016e\u0007\u0004\u0002\u0002\u016e\u016f\u0005\u0012",
    "\n\u0002\u016f\u0170\u0007\u0006\u0002\u0002\u0170\u0172\u0003\u0002",
    "\u0002\u0002\u0171\u0161\u0003\u0002\u0002\u0002\u0171\u0162\u0003\u0002",
    "\u0002\u0002\u0171\u0164\u0003\u0002\u0002\u0002\u0171\u016d\u0003\u0002",
    "\u0002\u0002\u0172\u0017\u0003\u0002\u0002\u0002\u0173\u0175\u0007\f",
    "\u0002\u0002\u0174\u0176\u0007v\u0002\u0002\u0175\u0174\u0003\u0002",
    "\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0177\u0003\u0002",
    "\u0002\u0002\u0177\u017c\u0005.\u0018\u0002\u0178\u0179\u0007\u0005",
    "\u0002\u0002\u0179\u017b\u0005.\u0018\u0002\u017a\u0178\u0003\u0002",
    "\u0002\u0002\u017b\u017e\u0003\u0002\u0002\u0002\u017c\u017a\u0003\u0002",
    "\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017d\u0181\u0003\u0002",
    "\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017f\u0180\u0007|",
    "\u0002\u0002\u0180\u0182\u0005<\u001f\u0002\u0181\u017f\u0003\u0002",
    "\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u018c\u0003\u0002",
    "\u0002\u0002\u0183\u0184\u0007\r\u0002\u0002\u0184\u0189\u00050\u0019",
    "\u0002\u0185\u0186\u0007\u0005\u0002\u0002\u0186\u0188\u00050\u0019",
    "\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0188\u018b\u0003\u0002\u0002",
    "\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002",
    "\u0002\u018a\u018d\u0003\u0002\u0002\u0002\u018b\u0189\u0003\u0002\u0002",
    "\u0002\u018c\u0183\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002",
    "\u0002\u018d\u0190\u0003\u0002\u0002\u0002\u018e\u018f\u0007\u0015\u0002",
    "\u0002\u018f\u0191\u0005\u001a\u000e\u0002\u0190\u018e\u0003\u0002\u0002",
    "\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0194\u0003\u0002\u0002",
    "\u0002\u0192\u0193\u0007\u0014\u0002\u0002\u0193\u0195\u0005@!\u0002",
    "\u0194\u0192\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002",
    "\u0195\u0199\u0003\u0002\u0002\u0002\u0196\u0197\u0007\u0016\u0002\u0002",
    "\u0197\u0198\u0007\u0017\u0002\u0002\u0198\u019a\u0005$\u0013\u0002",
    "\u0199\u0196\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002",
    "\u019a\u019d\u0003\u0002\u0002\u0002\u019b\u019c\u0007\u001d\u0002\u0002",
    "\u019c\u019e\u0005@!\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019d",
    "\u019e\u0003\u0002\u0002\u0002\u019e\u0019\u0003\u0002\u0002\u0002\u019f",
    "\u01a1\u0007\u00e8\u0002\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0",
    "\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a5\u0003\u0002\u0002\u0002\u01a2",
    "\u01a6\u0005\u001c\u000f\u0002\u01a3\u01a6\u0005\u001e\u0010\u0002\u01a4",
    "\u01a6\u0005 \u0011\u0002\u01a5\u01a2\u0003\u0002\u0002\u0002\u01a5",
    "\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a6",
    "\u001b\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007S\u0002\u0002\u01a8",
    "\u01a9\u0007\u0004\u0002\u0002\u01a9\u01aa\u0007U\u0002\u0002\u01aa",
    "\u01ab\u0005n8\u0002\u01ab\u01ac\u0005\"\u0012\u0002\u01ac\u01ad\u0007",
    "\u0006\u0002\u0002\u01ad\u001d\u0003\u0002\u0002\u0002\u01ae\u01af\u0007",
    "T\u0002\u0002\u01af\u01b0\u0007\u0004\u0002\u0002\u01b0\u01b1\u0007",
    "U\u0002\u0002\u01b1\u01b2\u0005n8\u0002\u01b2\u01b3\u0005\"\u0012\u0002",
    "\u01b3\u01b4\u0007\u0005\u0002\u0002\u01b4\u01b5\u0007V\u0002\u0002",
    "\u01b5\u01b6\u0007\u0017\u0002\u0002\u01b6\u01b7\u0005n8\u0002\u01b7",
    "\u01b8\u0005\"\u0012\u0002\u01b8\u01b9\u0007\u0006\u0002\u0002\u01b9",
    "\u001f\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007\u00b4\u0002\u0002\u01bb",
    "\u01bc\u0007\u0004\u0002\u0002\u01bc\u01bd\u0005n8\u0002\u01bd\u01be",
    "\u0005\"\u0012\u0002\u01be\u01bf\u0007\u0006\u0002\u0002\u01bf!\u0003",
    "\u0002\u0002\u0002\u01c0\u01c1\t\u0005\u0002\u0002\u01c1#\u0003\u0002",
    "\u0002\u0002\u01c2\u01c7\u0005&\u0014\u0002\u01c3\u01c4\u0007\u0005",
    "\u0002\u0002\u01c4\u01c6\u0005&\u0014\u0002\u01c5\u01c3\u0003\u0002",
    "\u0002\u0002\u01c6\u01c9\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002",
    "\u0002\u0002\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8%\u0003\u0002",
    "\u0002\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01ca\u01cb\u0005(",
    "\u0015\u0002\u01cb\'\u0003\u0002\u0002\u0002\u01cc\u01d5\u0007\u0004",
    "\u0002\u0002\u01cd\u01d2\u0005> \u0002\u01ce\u01cf\u0007\u0005\u0002",
    "\u0002\u01cf\u01d1\u0005> \u0002\u01d0\u01ce\u0003\u0002\u0002\u0002",
    "\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002",
    "\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002\u0002",
    "\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01cd\u0003\u0002\u0002\u0002",
    "\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002",
    "\u01d7\u01da\u0007\u0006\u0002\u0002\u01d8\u01da\u0005> \u0002\u01d9",
    "\u01cc\u0003\u0002\u0002\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002\u01da",
    ")\u0003\u0002\u0002\u0002\u01db\u01e4\u0007\u0004\u0002\u0002\u01dc",
    "\u01e1\u0005h5\u0002\u01dd\u01de\u0007\u0005\u0002\u0002\u01de\u01e0",
    "\u0005h5\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01e0\u01e3\u0003",
    "\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003",
    "\u0002\u0002\u0002\u01e2\u01e5\u0003\u0002\u0002\u0002\u01e3\u01e1\u0003",
    "\u0002\u0002\u0002\u01e4\u01dc\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003",
    "\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e9\u0007",
    "\u0006\u0002\u0002\u01e7\u01e9\u0005h5\u0002\u01e8\u01db\u0003\u0002",
    "\u0002\u0002\u01e8\u01e7\u0003\u0002\u0002\u0002\u01e9+\u0003\u0002",
    "\u0002\u0002\u01ea\u01ec\u0005j6\u0002\u01eb\u01ed\u0005:\u001e\u0002",
    "\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007\u000f\u0002\u0002",
    "\u01ef\u01f0\u0007\u0004\u0002\u0002\u01f0\u01f1\u0005\n\u0006\u0002",
    "\u01f1\u01f2\u0007\u0006\u0002\u0002\u01f2-\u0003\u0002\u0002\u0002",
    "\u01f3\u01f8\u0005> \u0002\u01f4\u01f6\u0007\u000f\u0002\u0002\u01f5",
    "\u01f4\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6",
    "\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f9\u0005j6\u0002\u01f8\u01f5",
    "\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9\u0200",
    "\u0003\u0002\u0002\u0002\u01fa\u01fb\u0005h5\u0002\u01fb\u01fc\u0007",
    "\u0007\u0002\u0002\u01fc\u01fd\u0007\u00e0\u0002\u0002\u01fd\u0200\u0003",
    "\u0002\u0002\u0002\u01fe\u0200\u0007\u00e0\u0002\u0002\u01ff\u01f3\u0003",
    "\u0002\u0002\u0002\u01ff\u01fa\u0003\u0002\u0002\u0002\u01ff\u01fe\u0003",
    "\u0002\u0002\u0002\u0200/\u0003\u0002\u0002\u0002\u0201\u0202\b\u0019",
    "\u0001\u0002\u0202\u0203\u00058\u001d\u0002\u0203\u0216\u0003\u0002",
    "\u0002\u0002\u0204\u0212\f\u0004\u0002\u0002\u0205\u0206\u0007]\u0002",
    "\u0002\u0206\u0207\u0007\\\u0002\u0002\u0207\u0213\u00058\u001d\u0002",
    "\u0208\u0209\u00052\u001a\u0002\u0209\u020a\u0007\\\u0002\u0002\u020a",
    "\u020b\u00050\u0019\u0002\u020b\u020c\u00054\u001b\u0002\u020c\u0213",
    "\u0003\u0002\u0002\u0002\u020d\u020e\u0007c\u0002\u0002\u020e\u020f",
    "\u00052\u001a\u0002\u020f\u0210\u0007\\\u0002\u0002\u0210\u0211\u0005",
    "8\u001d\u0002\u0211\u0213\u0003\u0002\u0002\u0002\u0212\u0205\u0003",
    "\u0002\u0002\u0002\u0212\u0208\u0003\u0002\u0002\u0002\u0212\u020d\u0003",
    "\u0002\u0002\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214\u0204\u0003",
    "\u0002\u0002\u0002\u0215\u0218\u0003\u0002\u0002\u0002\u0216\u0214\u0003",
    "\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u02171\u0003",
    "\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0219\u021b\u0007",
    "_\u0002\u0002\u021a\u0219\u0003\u0002\u0002\u0002\u021a\u021b\u0003",
    "\u0002\u0002\u0002\u021b\u0229\u0003\u0002\u0002\u0002\u021c\u021e\u0007",
    "`\u0002\u0002\u021d\u021f\u0007^\u0002\u0002\u021e\u021d\u0003\u0002",
    "\u0002\u0002\u021e\u021f\u0003\u0002\u0002\u0002\u021f\u0229\u0003\u0002",
    "\u0002\u0002\u0220\u0222\u0007a\u0002\u0002\u0221\u0223\u0007^\u0002",
    "\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002",
    "\u0002\u0223\u0229\u0003\u0002\u0002\u0002\u0224\u0226\u0007b\u0002",
    "\u0002\u0225\u0227\u0007^\u0002\u0002\u0226\u0225\u0003\u0002\u0002",
    "\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002",
    "\u0002\u0228\u021a\u0003\u0002\u0002\u0002\u0228\u021c\u0003\u0002\u0002",
    "\u0002\u0228\u0220\u0003\u0002\u0002\u0002\u0228\u0224\u0003\u0002\u0002",
    "\u0002\u02293\u0003\u0002\u0002\u0002\u022a\u022b\u0007e\u0002\u0002",
    "\u022b\u0239\u0005@!\u0002\u022c\u022d\u0007d\u0002\u0002\u022d\u022e",
    "\u0007\u0004\u0002\u0002\u022e\u0233\u0005j6\u0002\u022f\u0230\u0007",
    "\u0005\u0002\u0002\u0230\u0232\u0005j6\u0002\u0231\u022f\u0003\u0002",
    "\u0002\u0002\u0232\u0235\u0003\u0002\u0002\u0002\u0233\u0231\u0003\u0002",
    "\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0236\u0003\u0002",
    "\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0236\u0237\u0007\u0006",
    "\u0002\u0002\u0237\u0239\u0003\u0002\u0002\u0002\u0238\u022a\u0003\u0002",
    "\u0002\u0002\u0238\u022c\u0003\u0002\u0002\u0002\u02395\u0003\u0002",
    "\u0002\u0002\u023a\u023b\t\u0006\u0002\u0002\u023b7\u0003\u0002\u0002",
    "\u0002\u023c\u0244\u0005<\u001f\u0002\u023d\u023f\u0007\u000f\u0002",
    "\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002\u0002",
    "\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0242\u0005j6\u0002",
    "\u0241\u0243\u0005:\u001e\u0002\u0242\u0241\u0003\u0002\u0002\u0002",
    "\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0245\u0003\u0002\u0002\u0002",
    "\u0244\u023e\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002",
    "\u02459\u0003\u0002\u0002\u0002\u0246\u0247\u0007\u0004\u0002\u0002",
    "\u0247\u024c\u0005j6\u0002\u0248\u0249\u0007\u0005\u0002\u0002\u0249",
    "\u024b\u0005j6\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024b\u024e",
    "\u0003\u0002\u0002\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024d",
    "\u0003\u0002\u0002\u0002\u024d\u024f\u0003\u0002\u0002\u0002\u024e\u024c",
    "\u0003\u0002\u0002\u0002\u024f\u0250\u0007\u0006\u0002\u0002\u0250;",
    "\u0003\u0002\u0002\u0002\u0251\u0254\u0005h5\u0002\u0252\u0253\u0007",
    "o\u0002\u0002\u0253\u0255\u0005\u000e\b\u0002\u0254\u0252\u0003\u0002",
    "\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255\u026e\u0003\u0002",
    "\u0002\u0002\u0256\u0257\u0007\u0004\u0002\u0002\u0257\u0258\u0005\n",
    "\u0006\u0002\u0258\u0259\u0007\u0006\u0002\u0002\u0259\u026e\u0003\u0002",
    "\u0002\u0002\u025a\u025b\u0007\u00ae\u0002\u0002\u025b\u025c\u0007\u0004",
    "\u0002\u0002\u025c\u0261\u0005> \u0002\u025d\u025e\u0007\u0005\u0002",
    "\u0002\u025e\u0260\u0005> \u0002\u025f\u025d\u0003\u0002\u0002\u0002",
    "\u0260\u0263\u0003\u0002\u0002\u0002\u0261\u025f\u0003\u0002\u0002\u0002",
    "\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0264\u0003\u0002\u0002\u0002",
    "\u0263\u0261\u0003\u0002\u0002\u0002\u0264\u0267\u0007\u0006\u0002\u0002",
    "\u0265\u0266\u0007o\u0002\u0002\u0266\u0268\u0007\u00af\u0002\u0002",
    "\u0267\u0265\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002",
    "\u0268\u026e\u0003\u0002\u0002\u0002\u0269\u026a\u0007\u0004\u0002\u0002",
    "\u026a\u026b\u00050\u0019\u0002\u026b\u026c\u0007\u0006\u0002\u0002",
    "\u026c\u026e\u0003\u0002\u0002\u0002\u026d\u0251\u0003\u0002\u0002\u0002",
    "\u026d\u0256\u0003\u0002\u0002\u0002\u026d\u025a\u0003\u0002\u0002\u0002",
    "\u026d\u0269\u0003\u0002\u0002\u0002\u026e=\u0003\u0002\u0002\u0002",
    "\u026f\u0270\u0005@!\u0002\u0270?\u0003\u0002\u0002\u0002\u0271\u0272",
    "\b!\u0001\u0002\u0272\u0276\u0005B\"\u0002\u0273\u0274\u0007%\u0002",
    "\u0002\u0274\u0276\u0005@!\u0005\u0275\u0271\u0003\u0002\u0002\u0002",
    "\u0275\u0273\u0003\u0002\u0002\u0002\u0276\u027f\u0003\u0002\u0002\u0002",
    "\u0277\u0278\f\u0004\u0002\u0002\u0278\u0279\u0007#\u0002\u0002\u0279",
    "\u027e\u0005@!\u0005\u027a\u027b\f\u0003\u0002\u0002\u027b\u027c\u0007",
    "\"\u0002\u0002\u027c\u027e\u0005@!\u0004\u027d\u0277\u0003\u0002\u0002",
    "\u0002\u027d\u027a\u0003\u0002\u0002\u0002\u027e\u0281\u0003\u0002\u0002",
    "\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002",
    "\u0002\u0280A\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002",
    "\u0002\u0282\u0284\u0005F$\u0002\u0283\u0285\u0005D#\u0002\u0284\u0283",
    "\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002\u0285C",
    "\u0003\u0002\u0002\u0002\u0286\u0287\u0005L\'\u0002\u0287\u0288\u0005",
    "F$\u0002\u0288\u02be\u0003\u0002\u0002\u0002\u0289\u028b\u0007%\u0002",
    "\u0002\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002",
    "\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028d\u0007(\u0002",
    "\u0002\u028d\u028e\u0005F$\u0002\u028e\u028f\u0007#\u0002\u0002\u028f",
    "\u0290\u0005F$\u0002\u0290\u02be\u0003\u0002\u0002\u0002\u0291\u0293",
    "\u0007%\u0002\u0002\u0292\u0291\u0003\u0002\u0002\u0002\u0292\u0293",
    "\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0295",
    "\u0007$\u0002\u0002\u0295\u0296\u0007\u0004\u0002\u0002\u0296\u029b",
    "\u0005> \u0002\u0297\u0298\u0007\u0005\u0002\u0002\u0298\u029a\u0005",
    "> \u0002\u0299\u0297\u0003\u0002\u0002\u0002\u029a\u029d\u0003\u0002",
    "\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029b\u029c\u0003\u0002",
    "\u0002\u0002\u029c\u029e\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002",
    "\u0002\u0002\u029e\u029f\u0007\u0006\u0002\u0002\u029f\u02be\u0003\u0002",
    "\u0002\u0002\u02a0\u02a2\u0007%\u0002\u0002\u02a1\u02a0\u0003\u0002",
    "\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\u0007$\u0002\u0002\u02a4\u02a5\u0007\u0004",
    "\u0002\u0002\u02a5\u02a6\u0005\n\u0006\u0002\u02a6\u02a7\u0007\u0006",
    "\u0002\u0002\u02a7\u02be\u0003\u0002\u0002\u0002\u02a8\u02aa\u0007%",
    "\u0002\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003\u0002",
    "\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007)",
    "\u0002\u0002\u02ac\u02af\u0005F$\u0002\u02ad\u02ae\u00071\u0002\u0002",
    "\u02ae\u02b0\u0005F$\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02af",
    "\u02b0\u0003\u0002\u0002\u0002\u02b0\u02be\u0003\u0002\u0002\u0002\u02b1",
    "\u02b3\u0007*\u0002\u0002\u02b2\u02b4\u0007%\u0002\u0002\u02b3\u02b2",
    "\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u02b5",
    "\u0003\u0002\u0002\u0002\u02b5\u02be\u0007+\u0002\u0002\u02b6\u02b8",
    "\u0007*\u0002\u0002\u02b7\u02b9\u0007%\u0002\u0002\u02b8\u02b7\u0003",
    "\u0002\u0002\u0002\u02b8\u02b9\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003",
    "\u0002\u0002\u0002\u02ba\u02bb\u0007\u0013\u0002\u0002\u02bb\u02bc\u0007",
    "\r\u0002\u0002\u02bc\u02be\u0005F$\u0002\u02bd\u0286\u0003\u0002\u0002",
    "\u0002\u02bd\u028a\u0003\u0002\u0002\u0002\u02bd\u0292\u0003\u0002\u0002",
    "\u0002\u02bd\u02a1\u0003\u0002\u0002\u0002\u02bd\u02a9\u0003\u0002\u0002",
    "\u0002\u02bd\u02b1\u0003\u0002\u0002\u0002\u02bd\u02b6\u0003\u0002\u0002",
    "\u0002\u02beE\u0003\u0002\u0002\u0002\u02bf\u02c0\b$\u0001\u0002\u02c0",
    "\u02c4\u0005H%\u0002\u02c1\u02c2\t\u0007\u0002\u0002\u02c2\u02c4\u0005",
    "F$\u0006\u02c3\u02bf\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002",
    "\u0002\u0002\u02c4\u02d3\u0003\u0002\u0002\u0002\u02c5\u02c6\f\u0005",
    "\u0002\u0002\u02c6\u02c7\t\b\u0002\u0002\u02c7\u02d2\u0005F$\u0006\u02c8",
    "\u02c9\f\u0004\u0002\u0002\u02c9\u02ca\t\u0007\u0002\u0002\u02ca\u02d2",
    "\u0005F$\u0005\u02cb\u02cc\f\u0003\u0002\u0002\u02cc\u02cd\u0007\u00e3",
    "\u0002\u0002\u02cd\u02d2\u0005F$\u0004\u02ce\u02cf\f\u0007\u0002\u0002",
    "\u02cf\u02d0\u0007 \u0002\u0002\u02d0\u02d2\u0005J&\u0002\u02d1\u02c5",
    "\u0003\u0002\u0002\u0002\u02d1\u02c8\u0003\u0002\u0002\u0002\u02d1\u02cb",
    "\u0003\u0002\u0002\u0002\u02d1\u02ce\u0003\u0002\u0002\u0002\u02d2\u02d5",
    "\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d4",
    "\u0003\u0002\u0002\u0002\u02d4G\u0003\u0002\u0002\u0002\u02d5\u02d3",
    "\u0003\u0002\u0002\u0002\u02d6\u02d7\b%\u0001\u0002\u02d7\u0383\u0007",
    "+\u0002\u0002\u02d8\u0383\u0005P)\u0002\u02d9\u02da\u0005j6\u0002\u02da",
    "\u02db\u0007\u00e4\u0002\u0002\u02db\u0383\u0003\u0002\u0002\u0002\u02dc",
    "\u0383\u0005n8\u0002\u02dd\u0383\u0005N(\u0002\u02de\u0383\u0007\u00e4",
    "\u0002\u0002\u02df\u0383\u0007\u00e5\u0002\u0002\u02e0\u02e1\u00075",
    "\u0002\u0002\u02e1\u02e2\u0007\u0004\u0002\u0002\u02e2\u02e3\u0005F",
    "$\u0002\u02e3\u02e4\u0007$\u0002\u0002\u02e4\u02e5\u0005F$\u0002\u02e5",
    "\u02e6\u0007\u0006\u0002\u0002\u02e6\u0383\u0003\u0002\u0002\u0002\u02e7",
    "\u02e8\u0007\u0004\u0002\u0002\u02e8\u02eb\u0005> \u0002\u02e9\u02ea",
    "\u0007\u0005\u0002\u0002\u02ea\u02ec\u0005> \u0002\u02eb\u02e9\u0003",
    "\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed\u02eb\u0003",
    "\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003",
    "\u0002\u0002\u0002\u02ef\u02f0\u0007\u0006\u0002\u0002\u02f0\u0383\u0003",
    "\u0002\u0002\u0002\u02f1\u02f2\u0007n\u0002\u0002\u02f2\u02f3\u0007",
    "\u0004\u0002\u0002\u02f3\u02f8\u0005> \u0002\u02f4\u02f5\u0007\u0005",
    "\u0002\u0002\u02f5\u02f7\u0005> \u0002\u02f6\u02f4\u0003\u0002\u0002",
    "\u0002\u02f7\u02fa\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002",
    "\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002\u0002",
    "\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fb\u02fc\u0007\u0006\u0002",
    "\u0002\u02fc\u0383\u0003\u0002\u0002\u0002\u02fd\u02fe\u0005h5\u0002",
    "\u02fe\u02ff\u0007\u0004\u0002\u0002\u02ff\u0300\u0007\u00e0\u0002\u0002",
    "\u0300\u0302\u0007\u0006\u0002\u0002\u0301\u0303\u0005\\/\u0002\u0302",
    "\u0301\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303",
    "\u0383\u0003\u0002\u0002\u0002\u0304\u0305\u0005h5\u0002\u0305\u030e",
    "\u0007\u0004\u0002\u0002\u0306\u030b\u0005> \u0002\u0307\u0308\u0007",
    "\u0005\u0002\u0002\u0308\u030a\u0005> \u0002\u0309\u0307\u0003\u0002",
    "\u0002\u0002\u030a\u030d\u0003\u0002\u0002\u0002\u030b\u0309\u0003\u0002",
    "\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030f\u0003\u0002",
    "\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e\u0306\u0003\u0002",
    "\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030f\u0310\u0003\u0002",
    "\u0002\u0002\u0310\u0312\u0007\u0006\u0002\u0002\u0311\u0313\u0005\\",
    "/\u0002\u0312\u0311\u0003\u0002\u0002\u0002\u0312\u0313\u0003\u0002",
    "\u0002\u0002\u0313\u0383\u0003\u0002\u0002\u0002\u0314\u0315\u0005j",
    "6\u0002\u0315\u0316\u0007\b\u0002\u0002\u0316\u0317\u0005> \u0002\u0317",
    "\u0383\u0003\u0002\u0002\u0002\u0318\u0319\u0007\u0004\u0002\u0002\u0319",
    "\u031e\u0005j6\u0002\u031a\u031b\u0007\u0005\u0002\u0002\u031b\u031d",
    "\u0005j6\u0002\u031c\u031a\u0003\u0002\u0002\u0002\u031d\u0320\u0003",
    "\u0002\u0002\u0002\u031e\u031c\u0003\u0002\u0002\u0002\u031e\u031f\u0003",
    "\u0002\u0002\u0002\u031f\u0321\u0003\u0002\u0002\u0002\u0320\u031e\u0003",
    "\u0002\u0002\u0002\u0321\u0322\u0007\u0006\u0002\u0002\u0322\u0323\u0007",
    "\b\u0002\u0002\u0323\u0324\u0005> \u0002\u0324\u0383\u0003\u0002\u0002",
    "\u0002\u0325\u0326\u0007\u0004\u0002\u0002\u0326\u0327\u0005\n\u0006",
    "\u0002\u0327\u0328\u0007\u0006\u0002\u0002\u0328\u0383\u0003\u0002\u0002",
    "\u0002\u0329\u032a\u0007\'\u0002\u0002\u032a\u032b\u0007\u0004\u0002",
    "\u0002\u032b\u032c\u0005\n\u0006\u0002\u032c\u032d\u0007\u0006\u0002",
    "\u0002\u032d\u0383\u0003\u0002\u0002\u0002\u032e\u032f\u0007W\u0002",
    "\u0002\u032f\u0331\u0005F$\u0002\u0330\u0332\u0005Z.\u0002\u0331\u0330",
    "\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0331",
    "\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002\u0334\u0337",
    "\u0003\u0002\u0002\u0002\u0335\u0336\u0007Z\u0002\u0002\u0336\u0338",
    "\u0005> \u0002\u0337\u0335\u0003\u0002\u0002\u0002\u0337\u0338\u0003",
    "\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u033a\u0007",
    "[\u0002\u0002\u033a\u0383\u0003\u0002\u0002\u0002\u033b\u033d\u0007",
    "W\u0002\u0002\u033c\u033e\u0005Z.\u0002\u033d\u033c\u0003\u0002\u0002",
    "\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002\u0002",
    "\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0343\u0003\u0002\u0002",
    "\u0002\u0341\u0342\u0007Z\u0002\u0002\u0342\u0344\u0005> \u0002\u0343",
    "\u0341\u0003\u0002\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344",
    "\u0345\u0003\u0002\u0002\u0002\u0345\u0346\u0007[\u0002\u0002\u0346",
    "\u0383\u0003\u0002\u0002\u0002\u0347\u0348\u0007\u008f\u0002\u0002\u0348",
    "\u0349\u0007\u0004\u0002\u0002\u0349\u034a\u0005> \u0002\u034a\u034b",
    "\u0007\u000f\u0002\u0002\u034b\u034c\u0005T+\u0002\u034c\u034d\u0007",
    "\u0006\u0002\u0002\u034d\u0383\u0003\u0002\u0002\u0002\u034e\u034f\u0007",
    "\u0090\u0002\u0002\u034f\u0350\u0007\u0004\u0002\u0002\u0350\u0351\u0005",
    "> \u0002\u0351\u0352\u0007\u000f\u0002\u0002\u0352\u0353\u0005T+\u0002",
    "\u0353\u0354\u0007\u0006\u0002\u0002\u0354\u0383\u0003\u0002\u0002\u0002",
    "\u0355\u0356\u0007\u00b0\u0002\u0002\u0356\u035f\u0007\t\u0002\u0002",
    "\u0357\u035c\u0005> \u0002\u0358\u0359\u0007\u0005\u0002\u0002\u0359",
    "\u035b\u0005> \u0002\u035a\u0358\u0003\u0002\u0002\u0002\u035b\u035e",
    "\u0003\u0002\u0002\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035c\u035d",
    "\u0003\u0002\u0002\u0002\u035d\u0360\u0003\u0002\u0002\u0002\u035e\u035c",
    "\u0003\u0002\u0002\u0002\u035f\u0357\u0003\u0002\u0002\u0002\u035f\u0360",
    "\u0003\u0002\u0002\u0002\u0360\u0361\u0003\u0002\u0002\u0002\u0361\u0383",
    "\u0007\n\u0002\u0002\u0362\u0383\u0005j6\u0002\u0363\u0364\u00074\u0002",
    "\u0002\u0364\u0365\u0007\u0004\u0002\u0002\u0365\u0366\u0005F$\u0002",
    "\u0366\u0367\u0007\r\u0002\u0002\u0367\u036a\u0005F$\u0002\u0368\u0369",
    "\u00076\u0002\u0002\u0369\u036b\u0005F$\u0002\u036a\u0368\u0003\u0002",
    "\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002",
    "\u0002\u0002\u036c\u036d\u0007\u0006\u0002\u0002\u036d\u0383\u0003\u0002",
    "\u0002\u0002\u036e\u036f\u0007\u00d0\u0002\u0002\u036f\u0370\u0007\u0004",
    "\u0002\u0002\u0370\u0373\u0005F$\u0002\u0371\u0372\u0007\u0005\u0002",
    "\u0002\u0372\u0374\u0005r:\u0002\u0373\u0371\u0003\u0002\u0002\u0002",
    "\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0007\u0006\u0002\u0002\u0376\u0383\u0003\u0002\u0002\u0002",
    "\u0377\u0378\u0007R\u0002\u0002\u0378\u0379\u0007\u0004\u0002\u0002",
    "\u0379\u037a\u0005j6\u0002\u037a\u037b\u0007\r\u0002\u0002\u037b\u037c",
    "\u0005F$\u0002\u037c\u037d\u0007\u0006\u0002\u0002\u037d\u0383\u0003",
    "\u0002\u0002\u0002\u037e\u037f\u0007\u0004\u0002\u0002\u037f\u0380\u0005",
    "> \u0002\u0380\u0381\u0007\u0006\u0002\u0002\u0381\u0383\u0003\u0002",
    "\u0002\u0002\u0382\u02d6\u0003\u0002\u0002\u0002\u0382\u02d8\u0003\u0002",
    "\u0002\u0002\u0382\u02d9\u0003\u0002\u0002\u0002\u0382\u02dc\u0003\u0002",
    "\u0002\u0002\u0382\u02dd\u0003\u0002\u0002\u0002\u0382\u02de\u0003\u0002",
    "\u0002\u0002\u0382\u02df\u0003\u0002\u0002\u0002\u0382\u02e0\u0003\u0002",
    "\u0002\u0002\u0382\u02e7\u0003\u0002\u0002\u0002\u0382\u02f1\u0003\u0002",
    "\u0002\u0002\u0382\u02fd\u0003\u0002\u0002\u0002\u0382\u0304\u0003\u0002",
    "\u0002\u0002\u0382\u0314\u0003\u0002\u0002\u0002\u0382\u0318\u0003\u0002",
    "\u0002\u0002\u0382\u0325\u0003\u0002\u0002\u0002\u0382\u0329\u0003\u0002",
    "\u0002\u0002\u0382\u032e\u0003\u0002\u0002\u0002\u0382\u033b\u0003\u0002",
    "\u0002\u0002\u0382\u0347\u0003\u0002\u0002\u0002\u0382\u034e\u0003\u0002",
    "\u0002\u0002\u0382\u0355\u0003\u0002\u0002\u0002\u0382\u0362\u0003\u0002",
    "\u0002\u0002\u0382\u0363\u0003\u0002\u0002\u0002\u0382\u036e\u0003\u0002",
    "\u0002\u0002\u0382\u0377\u0003\u0002\u0002\u0002\u0382\u037e\u0003\u0002",
    "\u0002\u0002\u0383\u038e\u0003\u0002\u0002\u0002\u0384\u0385\f\t\u0002",
    "\u0002\u0385\u0386\u0007\t\u0002\u0002\u0386\u0387\u0005F$\u0002\u0387",
    "\u0388\u0007\n\u0002\u0002\u0388\u038d\u0003\u0002\u0002\u0002\u0389",
    "\u038a\f\u0007\u0002\u0002\u038a\u038b\u0007\u0007\u0002\u0002\u038b",
    "\u038d\u0005j6\u0002\u038c\u0384\u0003\u0002\u0002\u0002\u038c\u0389",
    "\u0003\u0002\u0002\u0002\u038d\u0390\u0003\u0002\u0002\u0002\u038e\u038c",
    "\u0003\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038fI",
    "\u0003\u0002\u0002\u0002\u0390\u038e\u0003\u0002\u0002\u0002\u0391\u0392",
    "\u0007;\u0002\u0002\u0392\u0393\u0007L\u0002\u0002\u0393\u0398\u0005",
    "P)\u0002\u0394\u0395\u0007;\u0002\u0002\u0395\u0396\u0007L\u0002\u0002",
    "\u0396\u0398\u0007\u00e4\u0002\u0002\u0397\u0391\u0003\u0002\u0002\u0002",
    "\u0397\u0394\u0003\u0002\u0002\u0002\u0398K\u0003\u0002\u0002\u0002",
    "\u0399\u039a\t\t\u0002\u0002\u039aM\u0003\u0002\u0002\u0002\u039b\u039c",
    "\t\n\u0002\u0002\u039cO\u0003\u0002\u0002\u0002\u039d\u039f\u0007=\u0002",
    "\u0002\u039e\u03a0\t\u0007\u0002\u0002\u039f\u039e\u0003\u0002\u0002",
    "\u0002\u039f\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002",
    "\u0002\u03a1\u03a2\u0007\u00e4\u0002\u0002\u03a2\u03a5\u0005R*\u0002",
    "\u03a3\u03a4\u0007\u00a5\u0002\u0002\u03a4\u03a6\u0005R*\u0002\u03a5",
    "\u03a3\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6",
    "Q\u0003\u0002\u0002\u0002\u03a7\u03a8\t\u000b\u0002\u0002\u03a8S\u0003",
    "\u0002\u0002\u0002\u03a9\u03aa\b+\u0001\u0002\u03aa\u03ab\u0007\u00b0",
    "\u0002\u0002\u03ab\u03ac\u0007\u00da\u0002\u0002\u03ac\u03ad\u0005T",
    "+\u0002\u03ad\u03ae\u0007\u00dc\u0002\u0002\u03ae\u03d4\u0003\u0002",
    "\u0002\u0002\u03af\u03b0\u0007\u00b1\u0002\u0002\u03b0\u03b1\u0007\u00da",
    "\u0002\u0002\u03b1\u03b2\u0005T+\u0002\u03b2\u03b3\u0007\u0005\u0002",
    "\u0002\u03b3\u03b4\u0005T+\u0002\u03b4\u03b5\u0007\u00dc\u0002\u0002",
    "\u03b5\u03d4\u0003\u0002\u0002\u0002\u03b6\u03b7\u0007n\u0002\u0002",
    "\u03b7\u03b8\u0007\u0004\u0002\u0002\u03b8\u03b9\u0005j6\u0002\u03b9",
    "\u03c0\u0005T+\u0002\u03ba\u03bb\u0007\u0005\u0002\u0002\u03bb\u03bc",
    "\u0005j6\u0002\u03bc\u03bd\u0005T+\u0002\u03bd\u03bf\u0003\u0002\u0002",
    "\u0002\u03be\u03ba\u0003\u0002\u0002\u0002\u03bf\u03c2\u0003\u0002\u0002",
    "\u0002\u03c0\u03be\u0003\u0002\u0002\u0002\u03c0\u03c1\u0003\u0002\u0002",
    "\u0002\u03c1\u03c3\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002",
    "\u0002\u03c3\u03c4\u0007\u0006\u0002\u0002\u03c4\u03d4\u0003\u0002\u0002",
    "\u0002\u03c5\u03d1\u0005X-\u0002\u03c6\u03c7\u0007\u0004\u0002\u0002",
    "\u03c7\u03cc\u0005V,\u0002\u03c8\u03c9\u0007\u0005\u0002\u0002\u03c9",
    "\u03cb\u0005V,\u0002\u03ca\u03c8\u0003\u0002\u0002\u0002\u03cb\u03ce",
    "\u0003\u0002\u0002\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cd",
    "\u0003\u0002\u0002\u0002\u03cd\u03cf\u0003\u0002\u0002\u0002\u03ce\u03cc",
    "\u0003\u0002\u0002\u0002\u03cf\u03d0\u0007\u0006\u0002\u0002\u03d0\u03d2",
    "\u0003\u0002\u0002\u0002\u03d1\u03c6\u0003\u0002\u0002\u0002\u03d1\u03d2",
    "\u0003\u0002\u0002\u0002\u03d2\u03d4\u0003\u0002\u0002\u0002\u03d3\u03a9",
    "\u0003\u0002\u0002\u0002\u03d3\u03af\u0003\u0002\u0002\u0002\u03d3\u03b6",
    "\u0003\u0002\u0002\u0002\u03d3\u03c5\u0003\u0002\u0002\u0002\u03d4\u03d9",
    "\u0003\u0002\u0002\u0002\u03d5\u03d6\f\u0007\u0002\u0002\u03d6\u03d8",
    "\u0007\u00b0\u0002\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d8\u03db",
    "\u0003\u0002\u0002\u0002\u03d9\u03d7\u0003\u0002\u0002\u0002\u03d9\u03da",
    "\u0003\u0002\u0002\u0002\u03daU\u0003\u0002\u0002\u0002\u03db\u03d9",
    "\u0003\u0002\u0002\u0002\u03dc\u03df\u0007\u00e6\u0002\u0002\u03dd\u03df",
    "\u0005T+\u0002\u03de\u03dc\u0003\u0002\u0002\u0002\u03de\u03dd\u0003",
    "\u0002\u0002\u0002\u03dfW\u0003\u0002\u0002\u0002\u03e0\u03e1\u0005",
    "j6\u0002\u03e1Y\u0003\u0002\u0002\u0002\u03e2\u03e3\u0007X\u0002\u0002",
    "\u03e3\u03e4\u0005> \u0002\u03e4\u03e5\u0007Y\u0002\u0002\u03e5\u03e6",
    "\u0005> \u0002\u03e6[\u0003\u0002\u0002\u0002\u03e7\u03e8\u0007f\u0002",
    "\u0002\u03e8\u03f3\u0007\u0004\u0002\u0002\u03e9\u03ea\u0007g\u0002",
    "\u0002\u03ea\u03eb\u0007\u0017\u0002\u0002\u03eb\u03f0\u0005> \u0002",
    "\u03ec\u03ed\u0007\u0005\u0002\u0002\u03ed\u03ef\u0005> \u0002\u03ee",
    "\u03ec\u0003\u0002\u0002\u0002\u03ef\u03f2\u0003\u0002\u0002\u0002\u03f0",
    "\u03ee\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002\u03f1",
    "\u03f4\u0003\u0002\u0002\u0002\u03f2\u03f0\u0003\u0002\u0002\u0002\u03f3",
    "\u03e9\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002\u03f4",
    "\u03f6\u0003\u0002\u0002\u0002\u03f5\u03f7\u0005^0\u0002\u03f6\u03f5",
    "\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002\u03f7\u03f8",
    "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007\u0006\u0002\u0002\u03f9]",
    "\u0003\u0002\u0002\u0002\u03fa\u03fb\u0007h\u0002\u0002\u03fb\u040b",
    "\u0005`1\u0002\u03fc\u03fd\u0007i\u0002\u0002\u03fd\u040b\u0005`1\u0002",
    "\u03fe\u03ff\u0007h\u0002\u0002\u03ff\u0400\u0007(\u0002\u0002\u0400",
    "\u0401\u0005`1\u0002\u0401\u0402\u0007#\u0002\u0002\u0402\u0403\u0005",
    "`1\u0002\u0403\u040b\u0003\u0002\u0002\u0002\u0404\u0405\u0007i\u0002",
    "\u0002\u0405\u0406\u0007(\u0002\u0002\u0406\u0407\u0005`1\u0002\u0407",
    "\u0408\u0007#\u0002\u0002\u0408\u0409\u0005`1\u0002\u0409\u040b\u0003",
    "\u0002\u0002\u0002\u040a\u03fa\u0003\u0002\u0002\u0002\u040a\u03fc\u0003",
    "\u0002\u0002\u0002\u040a\u03fe\u0003\u0002\u0002\u0002\u040a\u0404\u0003",
    "\u0002\u0002\u0002\u040b_\u0003\u0002\u0002\u0002\u040c\u040d\u0007",
    "j\u0002\u0002\u040d\u0416\u0007k\u0002\u0002\u040e\u040f\u0007j\u0002",
    "\u0002\u040f\u0416\u0007l\u0002\u0002\u0410\u0411\u0007m\u0002\u0002",
    "\u0411\u0416\u0007n\u0002\u0002\u0412\u0413\u0005> \u0002\u0413\u0414",
    "\t\f\u0002\u0002\u0414\u0416\u0003\u0002\u0002\u0002\u0415\u040c\u0003",
    "\u0002\u0002\u0002\u0415\u040e\u0003\u0002\u0002\u0002\u0415\u0410\u0003",
    "\u0002\u0002\u0002\u0415\u0412\u0003\u0002\u0002\u0002\u0416a\u0003",
    "\u0002\u0002\u0002\u0417\u0418\u0007\u0088\u0002\u0002\u0418\u041c\t",
    "\r\u0002\u0002\u0419\u041a\u0007\u0089\u0002\u0002\u041a\u041c\t\u000e",
    "\u0002\u0002\u041b\u0417\u0003\u0002\u0002\u0002\u041b\u0419\u0003\u0002",
    "\u0002\u0002\u041cc\u0003\u0002\u0002\u0002\u041d\u0423\u0005> \u0002",
    "\u041e\u041f\u0005j6\u0002\u041f\u0420\u0007\u000b\u0002\u0002\u0420",
    "\u0421\u0005> \u0002\u0421\u0423\u0003\u0002\u0002\u0002\u0422\u041d",
    "\u0003\u0002\u0002\u0002\u0422\u041e\u0003\u0002\u0002\u0002\u0423e",
    "\u0003\u0002\u0002\u0002\u0424\u0429\u0007\f\u0002\u0002\u0425\u0429",
    "\u0007{\u0002\u0002\u0426\u0429\u0007z\u0002\u0002\u0427\u0429\u0005",
    "j6\u0002\u0428\u0424\u0003\u0002\u0002\u0002\u0428\u0425\u0003\u0002",
    "\u0002\u0002\u0428\u0426\u0003\u0002\u0002\u0002\u0428\u0427\u0003\u0002",
    "\u0002\u0002\u0429g\u0003\u0002\u0002\u0002\u042a\u042f\u0005j6\u0002",
    "\u042b\u042c\u0007\u0007\u0002\u0002\u042c\u042e\u0005j6\u0002\u042d",
    "\u042b\u0003\u0002\u0002\u0002\u042e\u0431\u0003\u0002\u0002\u0002\u042f",
    "\u042d\u0003\u0002\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002\u0430",
    "i\u0003\u0002\u0002\u0002\u0431\u042f\u0003\u0002\u0002\u0002\u0432",
    "\u0438\u0007\u00e8\u0002\u0002\u0433\u0438\u0005l7\u0002\u0434\u0438",
    "\u0005p9\u0002\u0435\u0438\u0007\u00eb\u0002\u0002\u0436\u0438\u0007",
    "\u00e9\u0002\u0002\u0437\u0432\u0003\u0002\u0002\u0002\u0437\u0433\u0003",
    "\u0002\u0002\u0002\u0437\u0434\u0003\u0002\u0002\u0002\u0437\u0435\u0003",
    "\u0002\u0002\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0438k\u0003",
    "\u0002\u0002\u0002\u0439\u043a\u0007\u00ea\u0002\u0002\u043am\u0003",
    "\u0002\u0002\u0002\u043b\u043e\u0007\u00e7\u0002\u0002\u043c\u043e\u0007",
    "\u00e6\u0002\u0002\u043d\u043b\u0003\u0002\u0002\u0002\u043d\u043c\u0003",
    "\u0002\u0002\u0002\u043eo\u0003\u0002\u0002\u0002\u043f\u0495\u0007",
    "\u0091\u0002\u0002\u0440\u0495\u0007\u0093\u0002\u0002\u0441\u0495\u0007",
    "\u009c\u0002\u0002\u0442\u0495\u0007\u009d\u0002\u0002\u0443\u0495\u0007",
    "\u009f\u0002\u0002\u0444\u0495\u0007\u00a0\u0002\u0002\u0445\u0495\u0007",
    "\u009a\u0002\u0002\u0446\u0495\u0007\u009b\u0002\u0002\u0447\u0495\u0007",
    "\u00b4\u0002\u0002\u0448\u0495\u0007\u000e\u0002\u0002\u0449\u0495\u0007",
    "f\u0002\u0002\u044a\u0495\u0007g\u0002\u0002\u044b\u0495\u0007h\u0002",
    "\u0002\u044c\u0495\u0007i\u0002\u0002\u044d\u0495\u0007k\u0002\u0002",
    "\u044e\u0495\u0007l\u0002\u0002\u044f\u0495\u0007m\u0002\u0002\u0450",
    "\u0495\u0007n\u0002\u0002\u0451\u0495\u0007\u00b1\u0002\u0002\u0452",
    "\u0495\u0007\u00b0\u0002\u0002\u0453\u0495\u00077\u0002\u0002\u0454",
    "\u0495\u00078\u0002\u0002\u0455\u0495\u00079\u0002\u0002\u0456\u0495",
    "\u0007:\u0002\u0002\u0457\u0495\u0007;\u0002\u0002\u0458\u0495\u0007",
    "<\u0002\u0002\u0459\u0495\u0007=\u0002\u0002\u045a\u0495\u0007L\u0002",
    "\u0002\u045b\u0495\u0007>\u0002\u0002\u045c\u0495\u0007?\u0002\u0002",
    "\u045d\u0495\u0007@\u0002\u0002\u045e\u0495\u0007A\u0002\u0002\u045f",
    "\u0495\u0007B\u0002\u0002\u0460\u0495\u0007C\u0002\u0002\u0461\u0495",
    "\u0007\u0086\u0002\u0002\u0462\u0495\u0007\u0087\u0002\u0002\u0463\u0495",
    "\u0007\u0088\u0002\u0002\u0464\u0495\u0007\u0089\u0002\u0002\u0465\u0495",
    "\u0007\u008a\u0002\u0002\u0466\u0495\u0007\u008b\u0002\u0002\u0467\u0495",
    "\u0007\u008c\u0002\u0002\u0468\u0495\u0007\u008d\u0002\u0002\u0469\u0495",
    "\u0007\u00a9\u0002\u0002\u046a\u0495\u0007\u00a6\u0002\u0002\u046b\u0495",
    "\u0007\u00a7\u0002\u0002\u046c\u0495\u0007\u00a8\u0002\u0002\u046d\u0495",
    "\u0007\u009e\u0002\u0002\u046e\u0495\u0007\u00a5\u0002\u0002\u046f\u0495",
    "\u0007\u00aa\u0002\u0002\u0470\u0495\u0007\u001f\u0002\u0002\u0471\u0495",
    "\u0007 \u0002\u0002\u0472\u0495\u0007!\u0002\u0002\u0473\u0495\u0007",
    "\u00b2\u0002\u0002\u0474\u0495\u0007\u00b3\u0002\u0002\u0475\u0495\u0007",
    "x\u0002\u0002\u0476\u0495\u0007y\u0002\u0002\u0477\u0495\u0007\u00d5",
    "\u0002\u0002\u0478\u0495\u0007\u00d6\u0002\u0002\u0479\u0495\u0007\u00d7",
    "\u0002\u0002\u047a\u0495\u0007\u008e\u0002\u0002\u047b\u0495\u0005r",
    ":\u0002\u047c\u0495\u00075\u0002\u0002\u047d\u0495\u0007&\u0002\u0002",
    "\u047e\u0495\u0007\u00b5\u0002\u0002\u047f\u0495\u0007\u00b6\u0002\u0002",
    "\u0480\u0495\u0007\u00b7\u0002\u0002\u0481\u0495\u0007\u00b8\u0002\u0002",
    "\u0482\u0495\u0007\u00b9\u0002\u0002\u0483\u0495\u0007\u00ba\u0002\u0002",
    "\u0484\u0495\u0007\u00bb\u0002\u0002\u0485\u0495\u0007\u00bc\u0002\u0002",
    "\u0486\u0495\u0007\u00bd\u0002\u0002\u0487\u0495\u0007\u00be\u0002\u0002",
    "\u0488\u0495\u0007\u00bf\u0002\u0002\u0489\u0495\u0007\u00c0\u0002\u0002",
    "\u048a\u0495\u0007\u00c1\u0002\u0002\u048b\u0495\u0007\u00c2\u0002\u0002",
    "\u048c\u0495\u0007\u00c3\u0002\u0002\u048d\u0495\u0007\u00c4\u0002\u0002",
    "\u048e\u0495\u0007\u0081\u0002\u0002\u048f\u0495\u0007\u0082\u0002\u0002",
    "\u0490\u0495\u0007\u0083\u0002\u0002\u0491\u0495\u0007\u0084\u0002\u0002",
    "\u0492\u0495\u0007\u0085\u0002\u0002\u0493\u0495\u00074\u0002\u0002",
    "\u0494\u043f\u0003\u0002\u0002\u0002\u0494\u0440\u0003\u0002\u0002\u0002",
    "\u0494\u0441\u0003\u0002\u0002\u0002\u0494\u0442\u0003\u0002\u0002\u0002",
    "\u0494\u0443\u0003\u0002\u0002\u0002\u0494\u0444\u0003\u0002\u0002\u0002",
    "\u0494\u0445\u0003\u0002\u0002\u0002\u0494\u0446\u0003\u0002\u0002\u0002",
    "\u0494\u0447\u0003\u0002\u0002\u0002\u0494\u0448\u0003\u0002\u0002\u0002",
    "\u0494\u0449\u0003\u0002\u0002\u0002\u0494\u044a\u0003\u0002\u0002\u0002",
    "\u0494\u044b\u0003\u0002\u0002\u0002\u0494\u044c\u0003\u0002\u0002\u0002",
    "\u0494\u044d\u0003\u0002\u0002\u0002\u0494\u044e\u0003\u0002\u0002\u0002",
    "\u0494\u044f\u0003\u0002\u0002\u0002\u0494\u0450\u0003\u0002\u0002\u0002",
    "\u0494\u0451\u0003\u0002\u0002\u0002\u0494\u0452\u0003\u0002\u0002\u0002",
    "\u0494\u0453\u0003\u0002\u0002\u0002\u0494\u0454\u0003\u0002\u0002\u0002",
    "\u0494\u0455\u0003\u0002\u0002\u0002\u0494\u0456\u0003\u0002\u0002\u0002",
    "\u0494\u0457\u0003\u0002\u0002\u0002\u0494\u0458\u0003\u0002\u0002\u0002",
    "\u0494\u0459\u0003\u0002\u0002\u0002\u0494\u045a\u0003\u0002\u0002\u0002",
    "\u0494\u045b\u0003\u0002\u0002\u0002\u0494\u045c\u0003\u0002\u0002\u0002",
    "\u0494\u045d\u0003\u0002\u0002\u0002\u0494\u045e\u0003\u0002\u0002\u0002",
    "\u0494\u045f\u0003\u0002\u0002\u0002\u0494\u0460\u0003\u0002\u0002\u0002",
    "\u0494\u0461\u0003\u0002\u0002\u0002\u0494\u0462\u0003\u0002\u0002\u0002",
    "\u0494\u0463\u0003\u0002\u0002\u0002\u0494\u0464\u0003\u0002\u0002\u0002",
    "\u0494\u0465\u0003\u0002\u0002\u0002\u0494\u0466\u0003\u0002\u0002\u0002",
    "\u0494\u0467\u0003\u0002\u0002\u0002\u0494\u0468\u0003\u0002\u0002\u0002",
    "\u0494\u0469\u0003\u0002\u0002\u0002\u0494\u046a\u0003\u0002\u0002\u0002",
    "\u0494\u046b\u0003\u0002\u0002\u0002\u0494\u046c\u0003\u0002\u0002\u0002",
    "\u0494\u046d\u0003\u0002\u0002\u0002\u0494\u046e\u0003\u0002\u0002\u0002",
    "\u0494\u046f\u0003\u0002\u0002\u0002\u0494\u0470\u0003\u0002\u0002\u0002",
    "\u0494\u0471\u0003\u0002\u0002\u0002\u0494\u0472\u0003\u0002\u0002\u0002",
    "\u0494\u0473\u0003\u0002\u0002\u0002\u0494\u0474\u0003\u0002\u0002\u0002",
    "\u0494\u0475\u0003\u0002\u0002\u0002\u0494\u0476\u0003\u0002\u0002\u0002",
    "\u0494\u0477\u0003\u0002\u0002\u0002\u0494\u0478\u0003\u0002\u0002\u0002",
    "\u0494\u0479\u0003\u0002\u0002\u0002\u0494\u047a\u0003\u0002\u0002\u0002",
    "\u0494\u047b\u0003\u0002\u0002\u0002\u0494\u047c\u0003\u0002\u0002\u0002",
    "\u0494\u047d\u0003\u0002\u0002\u0002\u0494\u047e\u0003\u0002\u0002\u0002",
    "\u0494\u047f\u0003\u0002\u0002\u0002\u0494\u0480\u0003\u0002\u0002\u0002",
    "\u0494\u0481\u0003\u0002\u0002\u0002\u0494\u0482\u0003\u0002\u0002\u0002",
    "\u0494\u0483\u0003\u0002\u0002\u0002\u0494\u0484\u0003\u0002\u0002\u0002",
    "\u0494\u0485\u0003\u0002\u0002\u0002\u0494\u0486\u0003\u0002\u0002\u0002",
    "\u0494\u0487\u0003\u0002\u0002\u0002\u0494\u0488\u0003\u0002\u0002\u0002",
    "\u0494\u0489\u0003\u0002\u0002\u0002\u0494\u048a\u0003\u0002\u0002\u0002",
    "\u0494\u048b\u0003\u0002\u0002\u0002\u0494\u048c\u0003\u0002\u0002\u0002",
    "\u0494\u048d\u0003\u0002\u0002\u0002\u0494\u048e\u0003\u0002\u0002\u0002",
    "\u0494\u048f\u0003\u0002\u0002\u0002\u0494\u0490\u0003\u0002\u0002\u0002",
    "\u0494\u0491\u0003\u0002\u0002\u0002\u0494\u0492\u0003\u0002\u0002\u0002",
    "\u0494\u0493\u0003\u0002\u0002\u0002\u0495q\u0003\u0002\u0002\u0002",
    "\u0496\u0497\t\u000f\u0002\u0002\u0497s\u0003\u0002\u0002\u0002\u0082",
    "w\u0090\u0095\u009a\u009e\u00a2\u00a8\u00b8\u00bd\u00c4\u00cd\u00d2",
    "\u00d6\u00dd\u00e2\u00e9\u00f0\u00f9\u00fe\u0102\u0109\u010e\u0117\u011e",
    "\u0125\u012a\u0132\u0137\u013b\u0144\u0151\u015d\u016a\u0171\u0175\u017c",
    "\u0181\u0189\u018c\u0190\u0194\u0199\u019d\u01a0\u01a5\u01c7\u01d2\u01d5",
    "\u01d9\u01e1\u01e4\u01e8\u01ec\u01f5\u01f8\u01ff\u0212\u0216\u021a\u021e",
    "\u0222\u0226\u0228\u0233\u0238\u023e\u0242\u0244\u024c\u0254\u0261\u0267",
    "\u026d\u0275\u027d\u027f\u0284\u028a\u0292\u029b\u02a1\u02a9\u02af\u02b3",
    "\u02b8\u02bd\u02c3\u02d1\u02d3\u02ed\u02f8\u0302\u030b\u030e\u0312\u031e",
    "\u0333\u0337\u033f\u0343\u035c\u035f\u036a\u0373\u0382\u038c\u038e\u0397",
    "\u039f\u03a5\u03c0\u03cc\u03d1\u03d3\u03d9\u03de\u03f0\u03f3\u03f6\u040a",
    "\u0415\u041b\u0422\u0428\u042f\u0437\u043d\u0494"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'('", "','", "')'", "'.'", "'->'", "'['", 
                     "']'", "'=>'", "'SELECT'", "'FROM'", "'ADD'", "'AS'", 
                     "'ALL'", "'SOME'", "'ANY'", "'DISTINCT'", "'WHERE'", 
                     "'WINDOW'", "'GROUP'", "'BY'", "'GROUPING'", "'SETS'", 
                     "'CUBE'", "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", 
                     "'APPROXIMATE'", "'AT'", "'CONFIDENCE'", "'OR'", "'AND'", 
                     "'IN'", "'NOT'", "'NO'", "'EXISTS'", "'BETWEEN'", "'LIKE'", 
                     "'IS'", "'NULL'", "'TRUE'", "'FALSE'", "'NULLS'", "'FIRST'", 
                     "'LAST'", "'ESCAPE'", "'ASC'", "'DESC'", "'SUBSTRING'", 
                     "'POSITION'", "'FOR'", "'TINYINT'", "'SMALLINT'", "'INTEGER'", 
                     "'DATE'", "'TIME'", "'TIMESTAMP'", "'INTERVAL'", "'YEAR'", 
                     "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", 
                     "'MILLISECOND'", "'YEARS'", "'MONTHS'", "'DAYS'", "'HOURS'", 
                     "'MINUTES'", "'SECONDS'", "'MILLISECONDS'", "'ZONE'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'LOCALTIME'", "'LOCALTIMESTAMP'", "'EXTRACT'", "'TUMBLING'", 
                     "'HOPPING'", "'SIZE'", "'ADVANCE'", "'CASE'", "'WHEN'", 
                     "'THEN'", "'ELSE'", "'END'", "'JOIN'", "'CROSS'", "'OUTER'", 
                     "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", "'NATURAL'", 
                     "'USING'", "'ON'", "'OVER'", "'PARTITION'", "'RANGE'", 
                     "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", 
                     "'CURRENT'", "'ROW'", "'WITH'", "'RECURSIVE'", "'VALUES'", 
                     "'CREATE'", "'REGISTER'", "'TABLE'", "'TOPIC'", "'STREAM'", 
                     "'STREAMS'", "'VIEW'", "'REPLACE'", "'INSERT'", "'DELETE'", 
                     "'INTO'", "'CONSTRAINT'", "'DESCRIBE'", "'EXTENDED'", 
                     "'PRINT'", "'GRANT'", "'REVOKE'", "'PRIVILEGES'", "'PUBLIC'", 
                     "'OPTION'", "'EXPLAIN'", "'ANALYZE'", "'FORMAT'", "'TYPE'", 
                     "'TEXT'", "'GRAPHVIZ'", "'LOGICAL'", "'DISTRIBUTED'", 
                     "'TRY'", "'CAST'", "'TRY_CAST'", "'SHOW'", "'LIST'", 
                     "'TABLES'", "'TOPICS'", "'REGISTERED'", "'QUERY'", 
                     "'QUERIES'", "'TERMINATE'", "'LOAD'", "'SCHEMAS'", 
                     "'CATALOGS'", "'COLUMNS'", "'COLUMN'", "'USE'", "'PARTITIONS'", 
                     "'FUNCTIONS'", "'DROP'", "'UNION'", "'EXCEPT'", "'INTERSECT'", 
                     "'TO'", "'SYSTEM'", "'BERNOULLI'", "'POISSONIZED'", 
                     "'TABLESAMPLE'", "'RESCALED'", "'STRATIFY'", "'ALTER'", 
                     "'RENAME'", "'UNNEST'", "'ORDINALITY'", "'ARRAY'", 
                     "'MAP'", "'SET'", "'RESET'", "'SESSION'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'WORK'", "'ISOLATION'", "'LEVEL'", "'SERIALIZABLE'", 
                     "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'READ'", 
                     "'WRITE'", "'ONLY'", "'CALL'", "'PREPARE'", "'DEALLOCATE'", 
                     "'EXECUTE'", "'SAMPLE'", "'EXPORT'", "'CATALOG'", "'PROPERTIES'", 
                     "'BEGINNING'", "'UNSET'", "'RUN'", "'SCRIPT'", "'NORMALIZE'", 
                     "'NFD'", "'NFC'", "'NFKD'", "'NFKC'", "'IF'", "'NULLIF'", 
                     "'COALESCE'", "'='", null, "'<'", "'<='", "'>'", "'>='", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'||'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, "SELECT", "FROM", "ADD", "AS", "ALL", "SOME", 
                      "ANY", "DISTINCT", "WHERE", "WINDOW", "GROUP", "BY", 
                      "GROUPING", "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", 
                      "LIMIT", "APPROXIMATE", "AT", "CONFIDENCE", "OR", 
                      "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", "LIKE", 
                      "IS", "NULL", "TRUE", "FALSE", "NULLS", "FIRST", "LAST", 
                      "ESCAPE", "ASC", "DESC", "SUBSTRING", "POSITION", 
                      "FOR", "TINYINT", "SMALLINT", "INTEGER", "DATE", "TIME", 
                      "TIMESTAMP", "INTERVAL", "YEAR", "MONTH", "DAY", "HOUR", 
                      "MINUTE", "SECOND", "MILLISECOND", "YEARS", "MONTHS", 
                      "DAYS", "HOURS", "MINUTES", "SECONDS", "MILLISECONDS", 
                      "ZONE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "LOCALTIMESTAMP", "EXTRACT", "TUMBLING", 
                      "HOPPING", "SIZE", "ADVANCE", "CASE", "WHEN", "THEN", 
                      "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", 
                      "LEFT", "RIGHT", "FULL", "NATURAL", "USING", "ON", 
                      "OVER", "PARTITION", "RANGE", "ROWS", "UNBOUNDED", 
                      "PRECEDING", "FOLLOWING", "CURRENT", "ROW", "WITH", 
                      "RECURSIVE", "VALUES", "CREATE", "REGISTER", "TABLE", 
                      "TOPIC", "STREAM", "STREAMS", "VIEW", "REPLACE", "INSERT", 
                      "DELETE", "INTO", "CONSTRAINT", "DESCRIBE", "EXTENDED", 
                      "PRINT", "GRANT", "REVOKE", "PRIVILEGES", "PUBLIC", 
                      "OPTION", "EXPLAIN", "ANALYZE", "FORMAT", "TYPE", 
                      "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", "TRY", 
                      "CAST", "TRY_CAST", "SHOW", "LIST", "TABLES", "TOPICS", 
                      "REGISTERED", "QUERY", "QUERIES", "TERMINATE", "LOAD", 
                      "SCHEMAS", "CATALOGS", "COLUMNS", "COLUMN", "USE", 
                      "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT", 
                      "INTERSECT", "TO", "SYSTEM", "BERNOULLI", "POISSONIZED", 
                      "TABLESAMPLE", "RESCALED", "STRATIFY", "ALTER", "RENAME", 
                      "UNNEST", "ORDINALITY", "ARRAY", "MAP", "SET", "RESET", 
                      "SESSION", "DATA", "START", "TRANSACTION", "COMMIT", 
                      "ROLLBACK", "WORK", "ISOLATION", "LEVEL", "SERIALIZABLE", 
                      "REPEATABLE", "COMMITTED", "UNCOMMITTED", "READ", 
                      "WRITE", "ONLY", "CALL", "PREPARE", "DEALLOCATE", 
                      "EXECUTE", "SAMPLE", "EXPORT", "CATALOG", "PROPERTIES", 
                      "BEGINNING", "UNSET", "RUN", "SCRIPT", "NORMALIZE", 
                      "NFD", "NFC", "NFKD", "NFKC", "IF", "NULLIF", "COALESCE", 
                      "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "CONCAT", "STRING", 
                      "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
                      "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
                      "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", 
                      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", 
                      "DELIMITER" ];

var ruleNames =  [ "statements", "singleStatement", "singleExpression", 
                   "statement", "query", "tableElement", "tableProperties", 
                   "tableProperty", "queryNoWith", "queryTerm", "queryPrimary", 
                   "querySpecification", "windowExpression", "tumblingWindowExpression", 
                   "hoppingWindowExpression", "sessionWindowExpression", 
                   "windowUnit", "groupBy", "groupingElement", "groupingExpressions", 
                   "groupingSet", "namedQuery", "selectItem", "relation", 
                   "joinType", "joinCriteria", "sampleType", "aliasedRelation", 
                   "columnAliases", "relationPrimary", "expression", "booleanExpression", 
                   "predicated", "predicate", "valueExpression", "primaryExpression", 
                   "timeZoneSpecifier", "comparisonOperator", "booleanValue", 
                   "interval", "intervalField", "type", "typeParameter", 
                   "baseType", "whenClause", "over", "windowFrame", "frameBound", 
                   "explainOption", "callArgument", "privilege", "qualifiedName", 
                   "identifier", "quotedIdentifier", "number", "nonReserved", 
                   "normalForm" ];

function SqlBaseParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SqlBaseParser.prototype = Object.create(antlr4.Parser.prototype);
SqlBaseParser.prototype.constructor = SqlBaseParser;

Object.defineProperty(SqlBaseParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.SELECT = 10;
SqlBaseParser.FROM = 11;
SqlBaseParser.ADD = 12;
SqlBaseParser.AS = 13;
SqlBaseParser.ALL = 14;
SqlBaseParser.SOME = 15;
SqlBaseParser.ANY = 16;
SqlBaseParser.DISTINCT = 17;
SqlBaseParser.WHERE = 18;
SqlBaseParser.WINDOW = 19;
SqlBaseParser.GROUP = 20;
SqlBaseParser.BY = 21;
SqlBaseParser.GROUPING = 22;
SqlBaseParser.SETS = 23;
SqlBaseParser.CUBE = 24;
SqlBaseParser.ROLLUP = 25;
SqlBaseParser.ORDER = 26;
SqlBaseParser.HAVING = 27;
SqlBaseParser.LIMIT = 28;
SqlBaseParser.APPROXIMATE = 29;
SqlBaseParser.AT = 30;
SqlBaseParser.CONFIDENCE = 31;
SqlBaseParser.OR = 32;
SqlBaseParser.AND = 33;
SqlBaseParser.IN = 34;
SqlBaseParser.NOT = 35;
SqlBaseParser.NO = 36;
SqlBaseParser.EXISTS = 37;
SqlBaseParser.BETWEEN = 38;
SqlBaseParser.LIKE = 39;
SqlBaseParser.IS = 40;
SqlBaseParser.NULL = 41;
SqlBaseParser.TRUE = 42;
SqlBaseParser.FALSE = 43;
SqlBaseParser.NULLS = 44;
SqlBaseParser.FIRST = 45;
SqlBaseParser.LAST = 46;
SqlBaseParser.ESCAPE = 47;
SqlBaseParser.ASC = 48;
SqlBaseParser.DESC = 49;
SqlBaseParser.SUBSTRING = 50;
SqlBaseParser.POSITION = 51;
SqlBaseParser.FOR = 52;
SqlBaseParser.TINYINT = 53;
SqlBaseParser.SMALLINT = 54;
SqlBaseParser.INTEGER = 55;
SqlBaseParser.DATE = 56;
SqlBaseParser.TIME = 57;
SqlBaseParser.TIMESTAMP = 58;
SqlBaseParser.INTERVAL = 59;
SqlBaseParser.YEAR = 60;
SqlBaseParser.MONTH = 61;
SqlBaseParser.DAY = 62;
SqlBaseParser.HOUR = 63;
SqlBaseParser.MINUTE = 64;
SqlBaseParser.SECOND = 65;
SqlBaseParser.MILLISECOND = 66;
SqlBaseParser.YEARS = 67;
SqlBaseParser.MONTHS = 68;
SqlBaseParser.DAYS = 69;
SqlBaseParser.HOURS = 70;
SqlBaseParser.MINUTES = 71;
SqlBaseParser.SECONDS = 72;
SqlBaseParser.MILLISECONDS = 73;
SqlBaseParser.ZONE = 74;
SqlBaseParser.CURRENT_DATE = 75;
SqlBaseParser.CURRENT_TIME = 76;
SqlBaseParser.CURRENT_TIMESTAMP = 77;
SqlBaseParser.LOCALTIME = 78;
SqlBaseParser.LOCALTIMESTAMP = 79;
SqlBaseParser.EXTRACT = 80;
SqlBaseParser.TUMBLING = 81;
SqlBaseParser.HOPPING = 82;
SqlBaseParser.SIZE = 83;
SqlBaseParser.ADVANCE = 84;
SqlBaseParser.CASE = 85;
SqlBaseParser.WHEN = 86;
SqlBaseParser.THEN = 87;
SqlBaseParser.ELSE = 88;
SqlBaseParser.END = 89;
SqlBaseParser.JOIN = 90;
SqlBaseParser.CROSS = 91;
SqlBaseParser.OUTER = 92;
SqlBaseParser.INNER = 93;
SqlBaseParser.LEFT = 94;
SqlBaseParser.RIGHT = 95;
SqlBaseParser.FULL = 96;
SqlBaseParser.NATURAL = 97;
SqlBaseParser.USING = 98;
SqlBaseParser.ON = 99;
SqlBaseParser.OVER = 100;
SqlBaseParser.PARTITION = 101;
SqlBaseParser.RANGE = 102;
SqlBaseParser.ROWS = 103;
SqlBaseParser.UNBOUNDED = 104;
SqlBaseParser.PRECEDING = 105;
SqlBaseParser.FOLLOWING = 106;
SqlBaseParser.CURRENT = 107;
SqlBaseParser.ROW = 108;
SqlBaseParser.WITH = 109;
SqlBaseParser.RECURSIVE = 110;
SqlBaseParser.VALUES = 111;
SqlBaseParser.CREATE = 112;
SqlBaseParser.REGISTER = 113;
SqlBaseParser.TABLE = 114;
SqlBaseParser.TOPIC = 115;
SqlBaseParser.STREAM = 116;
SqlBaseParser.STREAMS = 117;
SqlBaseParser.VIEW = 118;
SqlBaseParser.REPLACE = 119;
SqlBaseParser.INSERT = 120;
SqlBaseParser.DELETE = 121;
SqlBaseParser.INTO = 122;
SqlBaseParser.CONSTRAINT = 123;
SqlBaseParser.DESCRIBE = 124;
SqlBaseParser.EXTENDED = 125;
SqlBaseParser.PRINT = 126;
SqlBaseParser.GRANT = 127;
SqlBaseParser.REVOKE = 128;
SqlBaseParser.PRIVILEGES = 129;
SqlBaseParser.PUBLIC = 130;
SqlBaseParser.OPTION = 131;
SqlBaseParser.EXPLAIN = 132;
SqlBaseParser.ANALYZE = 133;
SqlBaseParser.FORMAT = 134;
SqlBaseParser.TYPE = 135;
SqlBaseParser.TEXT = 136;
SqlBaseParser.GRAPHVIZ = 137;
SqlBaseParser.LOGICAL = 138;
SqlBaseParser.DISTRIBUTED = 139;
SqlBaseParser.TRY = 140;
SqlBaseParser.CAST = 141;
SqlBaseParser.TRY_CAST = 142;
SqlBaseParser.SHOW = 143;
SqlBaseParser.LIST = 144;
SqlBaseParser.TABLES = 145;
SqlBaseParser.TOPICS = 146;
SqlBaseParser.REGISTERED = 147;
SqlBaseParser.QUERY = 148;
SqlBaseParser.QUERIES = 149;
SqlBaseParser.TERMINATE = 150;
SqlBaseParser.LOAD = 151;
SqlBaseParser.SCHEMAS = 152;
SqlBaseParser.CATALOGS = 153;
SqlBaseParser.COLUMNS = 154;
SqlBaseParser.COLUMN = 155;
SqlBaseParser.USE = 156;
SqlBaseParser.PARTITIONS = 157;
SqlBaseParser.FUNCTIONS = 158;
SqlBaseParser.DROP = 159;
SqlBaseParser.UNION = 160;
SqlBaseParser.EXCEPT = 161;
SqlBaseParser.INTERSECT = 162;
SqlBaseParser.TO = 163;
SqlBaseParser.SYSTEM = 164;
SqlBaseParser.BERNOULLI = 165;
SqlBaseParser.POISSONIZED = 166;
SqlBaseParser.TABLESAMPLE = 167;
SqlBaseParser.RESCALED = 168;
SqlBaseParser.STRATIFY = 169;
SqlBaseParser.ALTER = 170;
SqlBaseParser.RENAME = 171;
SqlBaseParser.UNNEST = 172;
SqlBaseParser.ORDINALITY = 173;
SqlBaseParser.ARRAY = 174;
SqlBaseParser.MAP = 175;
SqlBaseParser.SET = 176;
SqlBaseParser.RESET = 177;
SqlBaseParser.SESSION = 178;
SqlBaseParser.DATA = 179;
SqlBaseParser.START = 180;
SqlBaseParser.TRANSACTION = 181;
SqlBaseParser.COMMIT = 182;
SqlBaseParser.ROLLBACK = 183;
SqlBaseParser.WORK = 184;
SqlBaseParser.ISOLATION = 185;
SqlBaseParser.LEVEL = 186;
SqlBaseParser.SERIALIZABLE = 187;
SqlBaseParser.REPEATABLE = 188;
SqlBaseParser.COMMITTED = 189;
SqlBaseParser.UNCOMMITTED = 190;
SqlBaseParser.READ = 191;
SqlBaseParser.WRITE = 192;
SqlBaseParser.ONLY = 193;
SqlBaseParser.CALL = 194;
SqlBaseParser.PREPARE = 195;
SqlBaseParser.DEALLOCATE = 196;
SqlBaseParser.EXECUTE = 197;
SqlBaseParser.SAMPLE = 198;
SqlBaseParser.EXPORT = 199;
SqlBaseParser.CATALOG = 200;
SqlBaseParser.PROPERTIES = 201;
SqlBaseParser.BEGINNING = 202;
SqlBaseParser.UNSET = 203;
SqlBaseParser.RUN = 204;
SqlBaseParser.SCRIPT = 205;
SqlBaseParser.NORMALIZE = 206;
SqlBaseParser.NFD = 207;
SqlBaseParser.NFC = 208;
SqlBaseParser.NFKD = 209;
SqlBaseParser.NFKC = 210;
SqlBaseParser.IF = 211;
SqlBaseParser.NULLIF = 212;
SqlBaseParser.COALESCE = 213;
SqlBaseParser.EQ = 214;
SqlBaseParser.NEQ = 215;
SqlBaseParser.LT = 216;
SqlBaseParser.LTE = 217;
SqlBaseParser.GT = 218;
SqlBaseParser.GTE = 219;
SqlBaseParser.PLUS = 220;
SqlBaseParser.MINUS = 221;
SqlBaseParser.ASTERISK = 222;
SqlBaseParser.SLASH = 223;
SqlBaseParser.PERCENT = 224;
SqlBaseParser.CONCAT = 225;
SqlBaseParser.STRING = 226;
SqlBaseParser.BINARY_LITERAL = 227;
SqlBaseParser.INTEGER_VALUE = 228;
SqlBaseParser.DECIMAL_VALUE = 229;
SqlBaseParser.IDENTIFIER = 230;
SqlBaseParser.DIGIT_IDENTIFIER = 231;
SqlBaseParser.QUOTED_IDENTIFIER = 232;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 233;
SqlBaseParser.TIME_WITH_TIME_ZONE = 234;
SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE = 235;
SqlBaseParser.SIMPLE_COMMENT = 236;
SqlBaseParser.BRACKETED_COMMENT = 237;
SqlBaseParser.WS = 238;
SqlBaseParser.UNRECOGNIZED = 239;
SqlBaseParser.DELIMITER = 240;

SqlBaseParser.RULE_statements = 0;
SqlBaseParser.RULE_singleStatement = 1;
SqlBaseParser.RULE_singleExpression = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_query = 4;
SqlBaseParser.RULE_tableElement = 5;
SqlBaseParser.RULE_tableProperties = 6;
SqlBaseParser.RULE_tableProperty = 7;
SqlBaseParser.RULE_queryNoWith = 8;
SqlBaseParser.RULE_queryTerm = 9;
SqlBaseParser.RULE_queryPrimary = 10;
SqlBaseParser.RULE_querySpecification = 11;
SqlBaseParser.RULE_windowExpression = 12;
SqlBaseParser.RULE_tumblingWindowExpression = 13;
SqlBaseParser.RULE_hoppingWindowExpression = 14;
SqlBaseParser.RULE_sessionWindowExpression = 15;
SqlBaseParser.RULE_windowUnit = 16;
SqlBaseParser.RULE_groupBy = 17;
SqlBaseParser.RULE_groupingElement = 18;
SqlBaseParser.RULE_groupingExpressions = 19;
SqlBaseParser.RULE_groupingSet = 20;
SqlBaseParser.RULE_namedQuery = 21;
SqlBaseParser.RULE_selectItem = 22;
SqlBaseParser.RULE_relation = 23;
SqlBaseParser.RULE_joinType = 24;
SqlBaseParser.RULE_joinCriteria = 25;
SqlBaseParser.RULE_sampleType = 26;
SqlBaseParser.RULE_aliasedRelation = 27;
SqlBaseParser.RULE_columnAliases = 28;
SqlBaseParser.RULE_relationPrimary = 29;
SqlBaseParser.RULE_expression = 30;
SqlBaseParser.RULE_booleanExpression = 31;
SqlBaseParser.RULE_predicated = 32;
SqlBaseParser.RULE_predicate = 33;
SqlBaseParser.RULE_valueExpression = 34;
SqlBaseParser.RULE_primaryExpression = 35;
SqlBaseParser.RULE_timeZoneSpecifier = 36;
SqlBaseParser.RULE_comparisonOperator = 37;
SqlBaseParser.RULE_booleanValue = 38;
SqlBaseParser.RULE_interval = 39;
SqlBaseParser.RULE_intervalField = 40;
SqlBaseParser.RULE_type = 41;
SqlBaseParser.RULE_typeParameter = 42;
SqlBaseParser.RULE_baseType = 43;
SqlBaseParser.RULE_whenClause = 44;
SqlBaseParser.RULE_over = 45;
SqlBaseParser.RULE_windowFrame = 46;
SqlBaseParser.RULE_frameBound = 47;
SqlBaseParser.RULE_explainOption = 48;
SqlBaseParser.RULE_callArgument = 49;
SqlBaseParser.RULE_privilege = 50;
SqlBaseParser.RULE_qualifiedName = 51;
SqlBaseParser.RULE_identifier = 52;
SqlBaseParser.RULE_quotedIdentifier = 53;
SqlBaseParser.RULE_number = 54;
SqlBaseParser.RULE_nonReserved = 55;
SqlBaseParser.RULE_normalForm = 56;

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

StatementsContext.prototype.singleStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleStatementContext);
    } else {
        return this.getTypedRuleContext(SingleStatementContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStatements(this);
	}
};




SqlBaseParser.StatementsContext = StatementsContext;

SqlBaseParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlBaseParser.RULE_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 117;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__1 || _la===SqlBaseParser.SELECT || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (SqlBaseParser.VALUES - 111)) | (1 << (SqlBaseParser.CREATE - 111)) | (1 << (SqlBaseParser.REGISTER - 111)) | (1 << (SqlBaseParser.TABLE - 111)) | (1 << (SqlBaseParser.DESCRIBE - 111)) | (1 << (SqlBaseParser.PRINT - 111)) | (1 << (SqlBaseParser.EXPLAIN - 111)))) !== 0) || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (SqlBaseParser.SHOW - 143)) | (1 << (SqlBaseParser.LIST - 143)) | (1 << (SqlBaseParser.TERMINATE - 143)) | (1 << (SqlBaseParser.LOAD - 143)) | (1 << (SqlBaseParser.DROP - 143)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (SqlBaseParser.SET - 176)) | (1 << (SqlBaseParser.EXPORT - 176)) | (1 << (SqlBaseParser.UNSET - 176)) | (1 << (SqlBaseParser.RUN - 176)))) !== 0)) {
            this.state = 114;
            this.singleStatement();
            this.state = 119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 120;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    return this;
}

SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleStatement(this);
	}
};

SingleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleStatement(this);
	}
};




SqlBaseParser.SingleStatementContext = SingleStatementContext;

SqlBaseParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 122;
        this.statement();
        this.state = 123;
        this.match(SqlBaseParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;

SingleExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingleExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleExpression(this);
	}
};

SingleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleExpression(this);
	}
};




SqlBaseParser.SingleExpressionContext = SingleExpressionContext;

SqlBaseParser.prototype.singleExpression = function() {

    var localctx = new SingleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 125;
        this.expression();
        this.state = 126;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ListTablesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTablesContext.prototype = Object.create(StatementContext.prototype);
ListTablesContext.prototype.constructor = ListTablesContext;

SqlBaseParser.ListTablesContext = ListTablesContext;

ListTablesContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

ListTablesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListTablesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListTables(this);
	}
};

ListTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListTables(this);
	}
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlBaseParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

ExplainContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ExplainContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ExplainContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

ExplainContext.prototype.explainOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExplainOptionContext);
    } else {
        return this.getTypedRuleContext(ExplainOptionContext,i);
    }
};
ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplain(this);
	}
};


function CreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

SqlBaseParser.CreateTableContext = CreateTableContext;

CreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableContext.prototype.tableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementContext);
    } else {
        return this.getTypedRuleContext(TableElementContext,i);
    }
};

CreateTableContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateTableContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateTable(this);
	}
};


function QuerystatementContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuerystatementContext.prototype = Object.create(StatementContext.prototype);
QuerystatementContext.prototype.constructor = QuerystatementContext;

SqlBaseParser.QuerystatementContext = QuerystatementContext;

QuerystatementContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
QuerystatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuerystatement(this);
	}
};

QuerystatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuerystatement(this);
	}
};


function RegisterTopicContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegisterTopicContext.prototype = Object.create(StatementContext.prototype);
RegisterTopicContext.prototype.constructor = RegisterTopicContext;

SqlBaseParser.RegisterTopicContext = RegisterTopicContext;

RegisterTopicContext.prototype.REGISTER = function() {
    return this.getToken(SqlBaseParser.REGISTER, 0);
};

RegisterTopicContext.prototype.TOPIC = function() {
    return this.getToken(SqlBaseParser.TOPIC, 0);
};

RegisterTopicContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RegisterTopicContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

RegisterTopicContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

RegisterTopicContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

RegisterTopicContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

RegisterTopicContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
RegisterTopicContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRegisterTopic(this);
	}
};

RegisterTopicContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRegisterTopic(this);
	}
};


function DropTopicContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTopicContext.prototype = Object.create(StatementContext.prototype);
DropTopicContext.prototype.constructor = DropTopicContext;

SqlBaseParser.DropTopicContext = DropTopicContext;

DropTopicContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTopicContext.prototype.TOPIC = function() {
    return this.getToken(SqlBaseParser.TOPIC, 0);
};

DropTopicContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropTopicContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTopicContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropTopicContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropTopic(this);
	}
};

DropTopicContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropTopic(this);
	}
};


function UnsetPropertyContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnsetPropertyContext.prototype = Object.create(StatementContext.prototype);
UnsetPropertyContext.prototype.constructor = UnsetPropertyContext;

SqlBaseParser.UnsetPropertyContext = UnsetPropertyContext;

UnsetPropertyContext.prototype.UNSET = function() {
    return this.getToken(SqlBaseParser.UNSET, 0);
};

UnsetPropertyContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
UnsetPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnsetProperty(this);
	}
};

UnsetPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnsetProperty(this);
	}
};


function PrintTopicContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrintTopicContext.prototype = Object.create(StatementContext.prototype);
PrintTopicContext.prototype.constructor = PrintTopicContext;

SqlBaseParser.PrintTopicContext = PrintTopicContext;

PrintTopicContext.prototype.PRINT = function() {
    return this.getToken(SqlBaseParser.PRINT, 0);
};

PrintTopicContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

PrintTopicContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

PrintTopicContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

PrintTopicContext.prototype.BEGINNING = function() {
    return this.getToken(SqlBaseParser.BEGINNING, 0);
};

PrintTopicContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

PrintTopicContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

PrintTopicContext.prototype.SAMPLE = function() {
    return this.getToken(SqlBaseParser.SAMPLE, 0);
};
PrintTopicContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPrintTopic(this);
	}
};

PrintTopicContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPrintTopic(this);
	}
};


function ListPropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListPropertiesContext.prototype = Object.create(StatementContext.prototype);
ListPropertiesContext.prototype.constructor = ListPropertiesContext;

SqlBaseParser.ListPropertiesContext = ListPropertiesContext;

ListPropertiesContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlBaseParser.PROPERTIES, 0);
};

ListPropertiesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListPropertiesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListPropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListProperties(this);
	}
};

ListPropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListProperties(this);
	}
};


function ListTopicsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListTopicsContext.prototype = Object.create(StatementContext.prototype);
ListTopicsContext.prototype.constructor = ListTopicsContext;

SqlBaseParser.ListTopicsContext = ListTopicsContext;

ListTopicsContext.prototype.TOPICS = function() {
    return this.getToken(SqlBaseParser.TOPICS, 0);
};

ListTopicsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListTopicsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListTopicsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListTopics(this);
	}
};

ListTopicsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListTopics(this);
	}
};


function ListQueriesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListQueriesContext.prototype = Object.create(StatementContext.prototype);
ListQueriesContext.prototype.constructor = ListQueriesContext;

SqlBaseParser.ListQueriesContext = ListQueriesContext;

ListQueriesContext.prototype.QUERIES = function() {
    return this.getToken(SqlBaseParser.QUERIES, 0);
};

ListQueriesContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListQueriesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListQueriesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListQueries(this);
	}
};

ListQueriesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListQueries(this);
	}
};


function RunScriptContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RunScriptContext.prototype = Object.create(StatementContext.prototype);
RunScriptContext.prototype.constructor = RunScriptContext;

SqlBaseParser.RunScriptContext = RunScriptContext;

RunScriptContext.prototype.RUN = function() {
    return this.getToken(SqlBaseParser.RUN, 0);
};

RunScriptContext.prototype.SCRIPT = function() {
    return this.getToken(SqlBaseParser.SCRIPT, 0);
};

RunScriptContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
RunScriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRunScript(this);
	}
};

RunScriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRunScript(this);
	}
};


function DropStreamContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropStreamContext.prototype = Object.create(StatementContext.prototype);
DropStreamContext.prototype.constructor = DropStreamContext;

SqlBaseParser.DropStreamContext = DropStreamContext;

DropStreamContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropStreamContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

DropStreamContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropStreamContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropStreamContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropStreamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropStream(this);
	}
};

DropStreamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropStream(this);
	}
};


function CreateStreamAsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateStreamAsContext.prototype = Object.create(StatementContext.prototype);
CreateStreamAsContext.prototype.constructor = CreateStreamAsContext;

SqlBaseParser.CreateStreamAsContext = CreateStreamAsContext;

CreateStreamAsContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateStreamAsContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

CreateStreamAsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateStreamAsContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateStreamAsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateStreamAsContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateStreamAsContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateStreamAsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateStreamAsContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateStreamAsContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};

CreateStreamAsContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

CreateStreamAsContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

CreateStreamAsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
CreateStreamAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateStreamAs(this);
	}
};

CreateStreamAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateStreamAs(this);
	}
};


function ExportCatalogContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExportCatalogContext.prototype = Object.create(StatementContext.prototype);
ExportCatalogContext.prototype.constructor = ExportCatalogContext;

SqlBaseParser.ExportCatalogContext = ExportCatalogContext;

ExportCatalogContext.prototype.EXPORT = function() {
    return this.getToken(SqlBaseParser.EXPORT, 0);
};

ExportCatalogContext.prototype.CATALOG = function() {
    return this.getToken(SqlBaseParser.CATALOG, 0);
};

ExportCatalogContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

ExportCatalogContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
ExportCatalogContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExportCatalog(this);
	}
};

ExportCatalogContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExportCatalog(this);
	}
};


function CreateTableAsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableAsContext.prototype = Object.create(StatementContext.prototype);
CreateTableAsContext.prototype.constructor = CreateTableAsContext;

SqlBaseParser.CreateTableAsContext = CreateTableAsContext;

CreateTableAsContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableAsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableAsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateTableAsContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateTableAsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateTableAsContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableAsContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableAsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableAsContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateTableAsContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateTableAsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateTableAs(this);
	}
};

CreateTableAsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateTableAs(this);
	}
};


function CreateStreamContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateStreamContext.prototype = Object.create(StatementContext.prototype);
CreateStreamContext.prototype.constructor = CreateStreamContext;

SqlBaseParser.CreateStreamContext = CreateStreamContext;

CreateStreamContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateStreamContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

CreateStreamContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateStreamContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateStreamContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateStreamContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateStreamContext.prototype.tableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementContext);
    } else {
        return this.getTypedRuleContext(TableElementContext,i);
    }
};

CreateStreamContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateStreamContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
CreateStreamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateStream(this);
	}
};

CreateStreamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateStream(this);
	}
};


function SetPropertyContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetPropertyContext.prototype = Object.create(StatementContext.prototype);
SetPropertyContext.prototype.constructor = SetPropertyContext;

SqlBaseParser.SetPropertyContext = SetPropertyContext;

SetPropertyContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetPropertyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.STRING);
    } else {
        return this.getToken(SqlBaseParser.STRING, i);
    }
};


SetPropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};
SetPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetProperty(this);
	}
};

SetPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetProperty(this);
	}
};


function ListRegisteredTopicsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListRegisteredTopicsContext.prototype = Object.create(StatementContext.prototype);
ListRegisteredTopicsContext.prototype.constructor = ListRegisteredTopicsContext;

SqlBaseParser.ListRegisteredTopicsContext = ListRegisteredTopicsContext;

ListRegisteredTopicsContext.prototype.REGISTERED = function() {
    return this.getToken(SqlBaseParser.REGISTERED, 0);
};

ListRegisteredTopicsContext.prototype.TOPICS = function() {
    return this.getToken(SqlBaseParser.TOPICS, 0);
};

ListRegisteredTopicsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListRegisteredTopicsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListRegisteredTopicsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListRegisteredTopics(this);
	}
};

ListRegisteredTopicsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListRegisteredTopics(this);
	}
};


function TerminateQueryContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TerminateQueryContext.prototype = Object.create(StatementContext.prototype);
TerminateQueryContext.prototype.constructor = TerminateQueryContext;

SqlBaseParser.TerminateQueryContext = TerminateQueryContext;

TerminateQueryContext.prototype.TERMINATE = function() {
    return this.getToken(SqlBaseParser.TERMINATE, 0);
};

TerminateQueryContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

TerminateQueryContext.prototype.QUERY = function() {
    return this.getToken(SqlBaseParser.QUERY, 0);
};
TerminateQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTerminateQuery(this);
	}
};

TerminateQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTerminateQuery(this);
	}
};


function ListStreamsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ListStreamsContext.prototype = Object.create(StatementContext.prototype);
ListStreamsContext.prototype.constructor = ListStreamsContext;

SqlBaseParser.ListStreamsContext = ListStreamsContext;

ListStreamsContext.prototype.STREAMS = function() {
    return this.getToken(SqlBaseParser.STREAMS, 0);
};

ListStreamsContext.prototype.LIST = function() {
    return this.getToken(SqlBaseParser.LIST, 0);
};

ListStreamsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};
ListStreamsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterListStreams(this);
	}
};

ListStreamsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitListStreams(this);
	}
};


function LoadPropertiesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LoadPropertiesContext.prototype = Object.create(StatementContext.prototype);
LoadPropertiesContext.prototype.constructor = LoadPropertiesContext;

SqlBaseParser.LoadPropertiesContext = LoadPropertiesContext;

LoadPropertiesContext.prototype.LOAD = function() {
    return this.getToken(SqlBaseParser.LOAD, 0);
};

LoadPropertiesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
LoadPropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLoadProperties(this);
	}
};

LoadPropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLoadProperties(this);
	}
};


function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

ShowColumnsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowColumnsContext.prototype.TOPIC = function() {
    return this.getToken(SqlBaseParser.TOPIC, 0);
};

ShowColumnsContext.prototype.EXTENDED = function() {
    return this.getToken(SqlBaseParser.EXTENDED, 0);
};
ShowColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowColumns(this);
	}
};

ShowColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowColumns(this);
	}
};


function DropTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

SqlBaseParser.DropTableContext = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropTable(this);
	}
};



SqlBaseParser.StatementContext = StatementContext;

SqlBaseParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QuerystatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 128;
            this.query();
            break;

        case 2:
            localctx = new ListPropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 129;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 130;
            this.match(SqlBaseParser.PROPERTIES);
            break;

        case 3:
            localctx = new ListTopicsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 131;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 132;
            this.match(SqlBaseParser.TOPICS);
            break;

        case 4:
            localctx = new ListRegisteredTopicsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 133;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 134;
            this.match(SqlBaseParser.REGISTERED);
            this.state = 135;
            this.match(SqlBaseParser.TOPICS);
            break;

        case 5:
            localctx = new ListStreamsContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 136;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 137;
            this.match(SqlBaseParser.STREAMS);
            break;

        case 6:
            localctx = new ListTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 138;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 139;
            this.match(SqlBaseParser.TABLES);
            break;

        case 7:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 140;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 142;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.EXTENDED) {
                this.state = 141;
                this.match(SqlBaseParser.EXTENDED);
            }

            this.state = 147;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.ADD:
            case SqlBaseParser.APPROXIMATE:
            case SqlBaseParser.AT:
            case SqlBaseParser.CONFIDENCE:
            case SqlBaseParser.NO:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.TINYINT:
            case SqlBaseParser.SMALLINT:
            case SqlBaseParser.INTEGER:
            case SqlBaseParser.DATE:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.DAY:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.OVER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.ROW:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PUBLIC:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.TRY:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.USE:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.TO:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.POISSONIZED:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.RESCALED:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.MAP:
            case SqlBaseParser.SET:
            case SqlBaseParser.RESET:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.DATA:
            case SqlBaseParser.START:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.WORK:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.READ:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.CALL:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.IF:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.COALESCE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.state = 144;
                this.qualifiedName();
                break;
            case SqlBaseParser.TOPIC:
                this.state = 145;
                this.match(SqlBaseParser.TOPIC);
                this.state = 146;
                this.qualifiedName();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 8:
            localctx = new PrintTopicContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 149;
            this.match(SqlBaseParser.PRINT);
            this.state = 152;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SqlBaseParser.ADD:
            case SqlBaseParser.APPROXIMATE:
            case SqlBaseParser.AT:
            case SqlBaseParser.CONFIDENCE:
            case SqlBaseParser.NO:
            case SqlBaseParser.SUBSTRING:
            case SqlBaseParser.POSITION:
            case SqlBaseParser.TINYINT:
            case SqlBaseParser.SMALLINT:
            case SqlBaseParser.INTEGER:
            case SqlBaseParser.DATE:
            case SqlBaseParser.TIME:
            case SqlBaseParser.TIMESTAMP:
            case SqlBaseParser.INTERVAL:
            case SqlBaseParser.YEAR:
            case SqlBaseParser.MONTH:
            case SqlBaseParser.DAY:
            case SqlBaseParser.HOUR:
            case SqlBaseParser.MINUTE:
            case SqlBaseParser.SECOND:
            case SqlBaseParser.ZONE:
            case SqlBaseParser.OVER:
            case SqlBaseParser.PARTITION:
            case SqlBaseParser.RANGE:
            case SqlBaseParser.ROWS:
            case SqlBaseParser.PRECEDING:
            case SqlBaseParser.FOLLOWING:
            case SqlBaseParser.CURRENT:
            case SqlBaseParser.ROW:
            case SqlBaseParser.VIEW:
            case SqlBaseParser.REPLACE:
            case SqlBaseParser.GRANT:
            case SqlBaseParser.REVOKE:
            case SqlBaseParser.PRIVILEGES:
            case SqlBaseParser.PUBLIC:
            case SqlBaseParser.OPTION:
            case SqlBaseParser.EXPLAIN:
            case SqlBaseParser.ANALYZE:
            case SqlBaseParser.FORMAT:
            case SqlBaseParser.TYPE:
            case SqlBaseParser.TEXT:
            case SqlBaseParser.GRAPHVIZ:
            case SqlBaseParser.LOGICAL:
            case SqlBaseParser.DISTRIBUTED:
            case SqlBaseParser.TRY:
            case SqlBaseParser.SHOW:
            case SqlBaseParser.TABLES:
            case SqlBaseParser.SCHEMAS:
            case SqlBaseParser.CATALOGS:
            case SqlBaseParser.COLUMNS:
            case SqlBaseParser.COLUMN:
            case SqlBaseParser.USE:
            case SqlBaseParser.PARTITIONS:
            case SqlBaseParser.FUNCTIONS:
            case SqlBaseParser.TO:
            case SqlBaseParser.SYSTEM:
            case SqlBaseParser.BERNOULLI:
            case SqlBaseParser.POISSONIZED:
            case SqlBaseParser.TABLESAMPLE:
            case SqlBaseParser.RESCALED:
            case SqlBaseParser.ARRAY:
            case SqlBaseParser.MAP:
            case SqlBaseParser.SET:
            case SqlBaseParser.RESET:
            case SqlBaseParser.SESSION:
            case SqlBaseParser.DATA:
            case SqlBaseParser.START:
            case SqlBaseParser.TRANSACTION:
            case SqlBaseParser.COMMIT:
            case SqlBaseParser.ROLLBACK:
            case SqlBaseParser.WORK:
            case SqlBaseParser.ISOLATION:
            case SqlBaseParser.LEVEL:
            case SqlBaseParser.SERIALIZABLE:
            case SqlBaseParser.REPEATABLE:
            case SqlBaseParser.COMMITTED:
            case SqlBaseParser.UNCOMMITTED:
            case SqlBaseParser.READ:
            case SqlBaseParser.WRITE:
            case SqlBaseParser.ONLY:
            case SqlBaseParser.CALL:
            case SqlBaseParser.NFD:
            case SqlBaseParser.NFC:
            case SqlBaseParser.NFKD:
            case SqlBaseParser.NFKC:
            case SqlBaseParser.IF:
            case SqlBaseParser.NULLIF:
            case SqlBaseParser.COALESCE:
            case SqlBaseParser.IDENTIFIER:
            case SqlBaseParser.DIGIT_IDENTIFIER:
            case SqlBaseParser.QUOTED_IDENTIFIER:
            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
                this.state = 150;
                this.qualifiedName();
                break;
            case SqlBaseParser.STRING:
                this.state = 151;
                this.match(SqlBaseParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM) {
                this.state = 154;
                this.match(SqlBaseParser.FROM);
                this.state = 155;
                this.match(SqlBaseParser.BEGINNING);
            }

            this.state = 160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INTERVAL || _la===SqlBaseParser.SAMPLE) {
                this.state = 158;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.INTERVAL || _la===SqlBaseParser.SAMPLE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 159;
                this.number();
            }

            break;

        case 9:
            localctx = new ListQueriesContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 162;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.SHOW || _la===SqlBaseParser.LIST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 163;
            this.match(SqlBaseParser.QUERIES);
            break;

        case 10:
            localctx = new TerminateQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 164;
            this.match(SqlBaseParser.TERMINATE);
            this.state = 166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.QUERY) {
                this.state = 165;
                this.match(SqlBaseParser.QUERY);
            }

            this.state = 168;
            this.qualifiedName();
            break;

        case 11:
            localctx = new SetPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 169;
            this.match(SqlBaseParser.SET);
            this.state = 170;
            this.match(SqlBaseParser.STRING);
            this.state = 171;
            this.match(SqlBaseParser.EQ);
            this.state = 172;
            this.match(SqlBaseParser.STRING);
            break;

        case 12:
            localctx = new UnsetPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 173;
            this.match(SqlBaseParser.UNSET);
            this.state = 174;
            this.match(SqlBaseParser.STRING);
            break;

        case 13:
            localctx = new LoadPropertiesContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 175;
            this.match(SqlBaseParser.LOAD);
            this.state = 176;
            this.expression();
            break;

        case 14:
            localctx = new RegisterTopicContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 177;
            this.match(SqlBaseParser.REGISTER);
            this.state = 178;
            this.match(SqlBaseParser.TOPIC);
            this.state = 182;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 179;
                this.match(SqlBaseParser.IF);
                this.state = 180;
                this.match(SqlBaseParser.NOT);
                this.state = 181;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 184;
            this.qualifiedName();
            this.state = 187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 185;
                this.match(SqlBaseParser.WITH);
                this.state = 186;
                this.tableProperties();
            }

            break;

        case 15:
            localctx = new CreateStreamContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 189;
            this.match(SqlBaseParser.CREATE);
            this.state = 190;
            this.match(SqlBaseParser.STREAM);
            this.state = 194;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
            if(la_===1) {
                this.state = 191;
                this.match(SqlBaseParser.IF);
                this.state = 192;
                this.match(SqlBaseParser.NOT);
                this.state = 193;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 196;
            this.qualifiedName();
            this.state = 208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 197;
                this.match(SqlBaseParser.T__1);
                this.state = 198;
                this.tableElement();
                this.state = 203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 199;
                    this.match(SqlBaseParser.T__2);
                    this.state = 200;
                    this.tableElement();
                    this.state = 205;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 206;
                this.match(SqlBaseParser.T__3);
            }

            this.state = 212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 210;
                this.match(SqlBaseParser.WITH);
                this.state = 211;
                this.tableProperties();
            }

            break;

        case 16:
            localctx = new CreateStreamAsContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 214;
            this.match(SqlBaseParser.CREATE);
            this.state = 215;
            this.match(SqlBaseParser.STREAM);
            this.state = 219;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            if(la_===1) {
                this.state = 216;
                this.match(SqlBaseParser.IF);
                this.state = 217;
                this.match(SqlBaseParser.NOT);
                this.state = 218;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 221;
            this.qualifiedName();
            this.state = 224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 222;
                this.match(SqlBaseParser.WITH);
                this.state = 223;
                this.tableProperties();
            }

            this.state = 226;
            this.match(SqlBaseParser.AS);
            this.state = 227;
            this.query();
            this.state = 231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.PARTITION) {
                this.state = 228;
                this.match(SqlBaseParser.PARTITION);
                this.state = 229;
                this.match(SqlBaseParser.BY);
                this.state = 230;
                this.identifier();
            }

            break;

        case 17:
            localctx = new CreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 233;
            this.match(SqlBaseParser.CREATE);
            this.state = 234;
            this.match(SqlBaseParser.TABLE);
            this.state = 238;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 235;
                this.match(SqlBaseParser.IF);
                this.state = 236;
                this.match(SqlBaseParser.NOT);
                this.state = 237;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 240;
            this.qualifiedName();
            this.state = 252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 241;
                this.match(SqlBaseParser.T__1);
                this.state = 242;
                this.tableElement();
                this.state = 247;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 243;
                    this.match(SqlBaseParser.T__2);
                    this.state = 244;
                    this.tableElement();
                    this.state = 249;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 250;
                this.match(SqlBaseParser.T__3);
            }

            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 254;
                this.match(SqlBaseParser.WITH);
                this.state = 255;
                this.tableProperties();
            }

            break;

        case 18:
            localctx = new CreateTableAsContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 258;
            this.match(SqlBaseParser.CREATE);
            this.state = 259;
            this.match(SqlBaseParser.TABLE);
            this.state = 263;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 260;
                this.match(SqlBaseParser.IF);
                this.state = 261;
                this.match(SqlBaseParser.NOT);
                this.state = 262;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 265;
            this.qualifiedName();
            this.state = 268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 266;
                this.match(SqlBaseParser.WITH);
                this.state = 267;
                this.tableProperties();
            }

            this.state = 270;
            this.match(SqlBaseParser.AS);
            this.state = 271;
            this.query();
            break;

        case 19:
            localctx = new DropTopicContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 273;
            this.match(SqlBaseParser.DROP);
            this.state = 274;
            this.match(SqlBaseParser.TOPIC);
            this.state = 277;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 275;
                this.match(SqlBaseParser.IF);
                this.state = 276;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 279;
            this.qualifiedName();
            break;

        case 20:
            localctx = new DropStreamContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 280;
            this.match(SqlBaseParser.DROP);
            this.state = 281;
            this.match(SqlBaseParser.STREAM);
            this.state = 284;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 282;
                this.match(SqlBaseParser.IF);
                this.state = 283;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 286;
            this.qualifiedName();
            break;

        case 21:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 287;
            this.match(SqlBaseParser.DROP);
            this.state = 288;
            this.match(SqlBaseParser.TABLE);
            this.state = 291;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 289;
                this.match(SqlBaseParser.IF);
                this.state = 290;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 293;
            this.qualifiedName();
            break;

        case 22:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 294;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 296;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 295;
                this.match(SqlBaseParser.ANALYZE);

            }
            this.state = 309;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 298;
                this.match(SqlBaseParser.T__1);
                this.state = 299;
                this.explainOption();
                this.state = 304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 300;
                    this.match(SqlBaseParser.T__2);
                    this.state = 301;
                    this.explainOption();
                    this.state = 306;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 307;
                this.match(SqlBaseParser.T__3);

            }
            this.state = 313;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
            switch(la_) {
            case 1:
                this.state = 311;
                this.statement();
                break;

            case 2:
                this.state = 312;
                this.qualifiedName();
                break;

            }
            break;

        case 23:
            localctx = new ExportCatalogContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 315;
            this.match(SqlBaseParser.EXPORT);
            this.state = 316;
            this.match(SqlBaseParser.CATALOG);
            this.state = 317;
            this.match(SqlBaseParser.TO);
            this.state = 318;
            this.match(SqlBaseParser.STRING);
            break;

        case 24:
            localctx = new RunScriptContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 319;
            this.match(SqlBaseParser.RUN);
            this.state = 320;
            this.match(SqlBaseParser.SCRIPT);
            this.state = 321;
            this.match(SqlBaseParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuery(this);
	}
};




SqlBaseParser.QueryContext = QueryContext;

SqlBaseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlBaseParser.RULE_query);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.queryNoWith();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableElement;
    return this;
}

TableElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementContext.prototype.constructor = TableElementContext;

TableElementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableElementContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TableElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableElement(this);
	}
};

TableElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableElement(this);
	}
};




SqlBaseParser.TableElementContext = TableElementContext;

SqlBaseParser.prototype.tableElement = function() {

    var localctx = new TableElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlBaseParser.RULE_tableElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.identifier();
        this.state = 327;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperties;
    return this;
}

TablePropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertiesContext.prototype.constructor = TablePropertiesContext;

TablePropertiesContext.prototype.tableProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    } else {
        return this.getTypedRuleContext(TablePropertyContext,i);
    }
};

TablePropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableProperties(this);
	}
};

TablePropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableProperties(this);
	}
};




SqlBaseParser.TablePropertiesContext = TablePropertiesContext;

SqlBaseParser.prototype.tableProperties = function() {

    var localctx = new TablePropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlBaseParser.RULE_tableProperties);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(SqlBaseParser.T__1);
        this.state = 330;
        this.tableProperty();
        this.state = 335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 331;
            this.match(SqlBaseParser.T__2);
            this.state = 332;
            this.tableProperty();
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 338;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableProperty;
    return this;
}

TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablePropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

TablePropertyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TablePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableProperty(this);
	}
};

TablePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableProperty(this);
	}
};




SqlBaseParser.TablePropertyContext = TablePropertyContext;

SqlBaseParser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlBaseParser.RULE_tableProperty);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.identifier();
        this.state = 341;
        this.match(SqlBaseParser.EQ);
        this.state = 342;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryNoWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
    this.limit = null; // Token
    return this;
}

QueryNoWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryNoWithContext.prototype.constructor = QueryNoWithContext;

QueryNoWithContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};

QueryNoWithContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

QueryNoWithContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

QueryNoWithContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

QueryNoWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryNoWith(this);
	}
};

QueryNoWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryNoWith(this);
	}
};




SqlBaseParser.QueryNoWithContext = QueryNoWithContext;

SqlBaseParser.prototype.queryNoWith = function() {

    var localctx = new QueryNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlBaseParser.RULE_queryNoWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.queryTerm();
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LIMIT) {
            this.state = 345;
            this.match(SqlBaseParser.LIMIT);
            this.state = 346;
            localctx.limit = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.INTEGER_VALUE)) {
                localctx.limit = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;


 
QueryTermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QueryTermDefaultContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

QueryTermDefaultContext.prototype.queryPrimary = function() {
    return this.getTypedRuleContext(QueryPrimaryContext,0);
};
QueryTermDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryTermDefault(this);
	}
};

QueryTermDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryTermDefault(this);
	}
};



SqlBaseParser.QueryTermContext = QueryTermContext;

SqlBaseParser.prototype.queryTerm = function() {

    var localctx = new QueryTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlBaseParser.RULE_queryTerm);
    try {
        localctx = new QueryTermDefaultContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.queryPrimary();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;


 
QueryPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryContext.prototype = Object.create(QueryPrimaryContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SqlBaseParser.SubqueryContext = SubqueryContext;

SubqueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};
SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubquery(this);
	}
};


function QueryPrimaryDefaultContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryPrimaryDefaultContext.prototype = Object.create(QueryPrimaryContext.prototype);
QueryPrimaryDefaultContext.prototype.constructor = QueryPrimaryDefaultContext;

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

QueryPrimaryDefaultContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};
QueryPrimaryDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryPrimaryDefault(this);
	}
};

QueryPrimaryDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryPrimaryDefault(this);
	}
};


function TableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableContext.prototype = Object.create(QueryPrimaryContext.prototype);
TableContext.prototype.constructor = TableContext;

SqlBaseParser.TableContext = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTable(this);
	}
};


function InlineTableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableContext.prototype = Object.create(QueryPrimaryContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;

SqlBaseParser.InlineTableContext = InlineTableContext;

InlineTableContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

InlineTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InlineTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInlineTable(this);
	}
};

InlineTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInlineTable(this);
	}
};



SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext;

SqlBaseParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SqlBaseParser.RULE_queryPrimary);
    var _la = 0; // Token type
    try {
        this.state = 367;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            localctx = new QueryPrimaryDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 351;
            this.querySpecification();
            break;
        case SqlBaseParser.TABLE:
            localctx = new TableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 352;
            this.match(SqlBaseParser.TABLE);
            this.state = 353;
            this.qualifiedName();
            break;
        case SqlBaseParser.VALUES:
            localctx = new InlineTableContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 354;
            this.match(SqlBaseParser.VALUES);
            this.state = 355;
            this.expression();
            this.state = 360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 356;
                this.match(SqlBaseParser.T__2);
                this.state = 357;
                this.expression();
                this.state = 362;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case SqlBaseParser.T__1:
            localctx = new SubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 363;
            this.match(SqlBaseParser.T__1);
            this.state = 364;
            this.queryNoWith();
            this.state = 365;
            this.match(SqlBaseParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_querySpecification;
    this.into = null; // RelationPrimaryContext
    this.from = null; // RelationContext
    this.where = null; // BooleanExpressionContext
    this.having = null; // BooleanExpressionContext
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

QuerySpecificationContext.prototype.selectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemContext);
    } else {
        return this.getTypedRuleContext(SelectItemContext,i);
    }
};

QuerySpecificationContext.prototype.STREAM = function() {
    return this.getToken(SqlBaseParser.STREAM, 0);
};

QuerySpecificationContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

QuerySpecificationContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

QuerySpecificationContext.prototype.WINDOW = function() {
    return this.getToken(SqlBaseParser.WINDOW, 0);
};

QuerySpecificationContext.prototype.windowExpression = function() {
    return this.getTypedRuleContext(WindowExpressionContext,0);
};

QuerySpecificationContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

QuerySpecificationContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

QuerySpecificationContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

QuerySpecificationContext.prototype.groupBy = function() {
    return this.getTypedRuleContext(GroupByContext,0);
};

QuerySpecificationContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

QuerySpecificationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

QuerySpecificationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

QuerySpecificationContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

QuerySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuerySpecification(this);
	}
};




SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext;

SqlBaseParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlBaseParser.RULE_querySpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.match(SqlBaseParser.SELECT);
        this.state = 371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.STREAM) {
            this.state = 370;
            this.match(SqlBaseParser.STREAM);
        }

        this.state = 373;
        this.selectItem();
        this.state = 378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 374;
            this.match(SqlBaseParser.T__2);
            this.state = 375;
            this.selectItem();
            this.state = 380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 383;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.INTO) {
            this.state = 381;
            this.match(SqlBaseParser.INTO);
            this.state = 382;
            localctx.into = this.relationPrimary();
        }

        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.FROM) {
            this.state = 385;
            this.match(SqlBaseParser.FROM);
            this.state = 386;
            localctx.from = this.relation(0);
            this.state = 391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 387;
                this.match(SqlBaseParser.T__2);
                this.state = 388;
                this.relation(0);
                this.state = 393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WINDOW) {
            this.state = 396;
            this.match(SqlBaseParser.WINDOW);
            this.state = 397;
            this.windowExpression();
        }

        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WHERE) {
            this.state = 400;
            this.match(SqlBaseParser.WHERE);
            this.state = 401;
            localctx.where = this.booleanExpression(0);
        }

        this.state = 407;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.GROUP) {
            this.state = 404;
            this.match(SqlBaseParser.GROUP);
            this.state = 405;
            this.match(SqlBaseParser.BY);
            this.state = 406;
            this.groupBy();
        }

        this.state = 411;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.HAVING) {
            this.state = 409;
            this.match(SqlBaseParser.HAVING);
            this.state = 410;
            localctx.having = this.booleanExpression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowExpression;
    return this;
}

WindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowExpressionContext.prototype.constructor = WindowExpressionContext;

WindowExpressionContext.prototype.tumblingWindowExpression = function() {
    return this.getTypedRuleContext(TumblingWindowExpressionContext,0);
};

WindowExpressionContext.prototype.hoppingWindowExpression = function() {
    return this.getTypedRuleContext(HoppingWindowExpressionContext,0);
};

WindowExpressionContext.prototype.sessionWindowExpression = function() {
    return this.getTypedRuleContext(SessionWindowExpressionContext,0);
};

WindowExpressionContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

WindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWindowExpression(this);
	}
};

WindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWindowExpression(this);
	}
};




SqlBaseParser.WindowExpressionContext = WindowExpressionContext;

SqlBaseParser.prototype.windowExpression = function() {

    var localctx = new WindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SqlBaseParser.RULE_windowExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.IDENTIFIER) {
            this.state = 413;
            this.match(SqlBaseParser.IDENTIFIER);
        }

        this.state = 419;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.TUMBLING:
            this.state = 416;
            this.tumblingWindowExpression();
            break;
        case SqlBaseParser.HOPPING:
            this.state = 417;
            this.hoppingWindowExpression();
            break;
        case SqlBaseParser.SESSION:
            this.state = 418;
            this.sessionWindowExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TumblingWindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tumblingWindowExpression;
    return this;
}

TumblingWindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TumblingWindowExpressionContext.prototype.constructor = TumblingWindowExpressionContext;

TumblingWindowExpressionContext.prototype.TUMBLING = function() {
    return this.getToken(SqlBaseParser.TUMBLING, 0);
};

TumblingWindowExpressionContext.prototype.SIZE = function() {
    return this.getToken(SqlBaseParser.SIZE, 0);
};

TumblingWindowExpressionContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

TumblingWindowExpressionContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

TumblingWindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTumblingWindowExpression(this);
	}
};

TumblingWindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTumblingWindowExpression(this);
	}
};




SqlBaseParser.TumblingWindowExpressionContext = TumblingWindowExpressionContext;

SqlBaseParser.prototype.tumblingWindowExpression = function() {

    var localctx = new TumblingWindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlBaseParser.RULE_tumblingWindowExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 421;
        this.match(SqlBaseParser.TUMBLING);
        this.state = 422;
        this.match(SqlBaseParser.T__1);
        this.state = 423;
        this.match(SqlBaseParser.SIZE);
        this.state = 424;
        this.number();
        this.state = 425;
        this.windowUnit();
        this.state = 426;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HoppingWindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_hoppingWindowExpression;
    return this;
}

HoppingWindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HoppingWindowExpressionContext.prototype.constructor = HoppingWindowExpressionContext;

HoppingWindowExpressionContext.prototype.HOPPING = function() {
    return this.getToken(SqlBaseParser.HOPPING, 0);
};

HoppingWindowExpressionContext.prototype.SIZE = function() {
    return this.getToken(SqlBaseParser.SIZE, 0);
};

HoppingWindowExpressionContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};

HoppingWindowExpressionContext.prototype.windowUnit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WindowUnitContext);
    } else {
        return this.getTypedRuleContext(WindowUnitContext,i);
    }
};

HoppingWindowExpressionContext.prototype.ADVANCE = function() {
    return this.getToken(SqlBaseParser.ADVANCE, 0);
};

HoppingWindowExpressionContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

HoppingWindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterHoppingWindowExpression(this);
	}
};

HoppingWindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitHoppingWindowExpression(this);
	}
};




SqlBaseParser.HoppingWindowExpressionContext = HoppingWindowExpressionContext;

SqlBaseParser.prototype.hoppingWindowExpression = function() {

    var localctx = new HoppingWindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlBaseParser.RULE_hoppingWindowExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this.match(SqlBaseParser.HOPPING);
        this.state = 429;
        this.match(SqlBaseParser.T__1);
        this.state = 430;
        this.match(SqlBaseParser.SIZE);
        this.state = 431;
        this.number();
        this.state = 432;
        this.windowUnit();
        this.state = 433;
        this.match(SqlBaseParser.T__2);
        this.state = 434;
        this.match(SqlBaseParser.ADVANCE);
        this.state = 435;
        this.match(SqlBaseParser.BY);
        this.state = 436;
        this.number();
        this.state = 437;
        this.windowUnit();
        this.state = 438;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SessionWindowExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sessionWindowExpression;
    return this;
}

SessionWindowExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SessionWindowExpressionContext.prototype.constructor = SessionWindowExpressionContext;

SessionWindowExpressionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

SessionWindowExpressionContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

SessionWindowExpressionContext.prototype.windowUnit = function() {
    return this.getTypedRuleContext(WindowUnitContext,0);
};

SessionWindowExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSessionWindowExpression(this);
	}
};

SessionWindowExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSessionWindowExpression(this);
	}
};




SqlBaseParser.SessionWindowExpressionContext = SessionWindowExpressionContext;

SqlBaseParser.prototype.sessionWindowExpression = function() {

    var localctx = new SessionWindowExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlBaseParser.RULE_sessionWindowExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(SqlBaseParser.SESSION);
        this.state = 441;
        this.match(SqlBaseParser.T__1);
        this.state = 442;
        this.number();
        this.state = 443;
        this.windowUnit();
        this.state = 444;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowUnit;
    return this;
}

WindowUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowUnitContext.prototype.constructor = WindowUnitContext;

WindowUnitContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

WindowUnitContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

WindowUnitContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

WindowUnitContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

WindowUnitContext.prototype.MILLISECOND = function() {
    return this.getToken(SqlBaseParser.MILLISECOND, 0);
};

WindowUnitContext.prototype.DAYS = function() {
    return this.getToken(SqlBaseParser.DAYS, 0);
};

WindowUnitContext.prototype.HOURS = function() {
    return this.getToken(SqlBaseParser.HOURS, 0);
};

WindowUnitContext.prototype.MINUTES = function() {
    return this.getToken(SqlBaseParser.MINUTES, 0);
};

WindowUnitContext.prototype.SECONDS = function() {
    return this.getToken(SqlBaseParser.SECONDS, 0);
};

WindowUnitContext.prototype.MILLISECONDS = function() {
    return this.getToken(SqlBaseParser.MILLISECONDS, 0);
};

WindowUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWindowUnit(this);
	}
};

WindowUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWindowUnit(this);
	}
};




SqlBaseParser.WindowUnitContext = WindowUnitContext;

SqlBaseParser.prototype.windowUnit = function() {

    var localctx = new WindowUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlBaseParser.RULE_windowUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        _la = this._input.LA(1);
        if(!(((((_la - 62)) & ~0x1f) == 0 && ((1 << (_la - 62)) & ((1 << (SqlBaseParser.DAY - 62)) | (1 << (SqlBaseParser.HOUR - 62)) | (1 << (SqlBaseParser.MINUTE - 62)) | (1 << (SqlBaseParser.SECOND - 62)) | (1 << (SqlBaseParser.MILLISECOND - 62)) | (1 << (SqlBaseParser.DAYS - 62)) | (1 << (SqlBaseParser.HOURS - 62)) | (1 << (SqlBaseParser.MINUTES - 62)) | (1 << (SqlBaseParser.SECONDS - 62)) | (1 << (SqlBaseParser.MILLISECONDS - 62)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupBy;
    return this;
}

GroupByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByContext.prototype.constructor = GroupByContext;

GroupByContext.prototype.groupingElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingElementContext);
    } else {
        return this.getTypedRuleContext(GroupingElementContext,i);
    }
};

GroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupBy(this);
	}
};

GroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupBy(this);
	}
};




SqlBaseParser.GroupByContext = GroupByContext;

SqlBaseParser.prototype.groupBy = function() {

    var localctx = new GroupByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlBaseParser.RULE_groupBy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this.groupingElement();
        this.state = 453;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 449;
            this.match(SqlBaseParser.T__2);
            this.state = 450;
            this.groupingElement();
            this.state = 455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingElement;
    return this;
}

GroupingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingElementContext.prototype.constructor = GroupingElementContext;


 
GroupingElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SingleGroupingSetContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleGroupingSetContext.prototype = Object.create(GroupingElementContext.prototype);
SingleGroupingSetContext.prototype.constructor = SingleGroupingSetContext;

SqlBaseParser.SingleGroupingSetContext = SingleGroupingSetContext;

SingleGroupingSetContext.prototype.groupingExpressions = function() {
    return this.getTypedRuleContext(GroupingExpressionsContext,0);
};
SingleGroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleGroupingSet(this);
	}
};

SingleGroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleGroupingSet(this);
	}
};



SqlBaseParser.GroupingElementContext = GroupingElementContext;

SqlBaseParser.prototype.groupingElement = function() {

    var localctx = new GroupingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlBaseParser.RULE_groupingElement);
    try {
        localctx = new SingleGroupingSetContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.groupingExpressions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingExpressions;
    return this;
}

GroupingExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingExpressionsContext.prototype.constructor = GroupingExpressionsContext;

GroupingExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupingExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupingExpressions(this);
	}
};

GroupingExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupingExpressions(this);
	}
};




SqlBaseParser.GroupingExpressionsContext = GroupingExpressionsContext;

SqlBaseParser.prototype.groupingExpressions = function() {

    var localctx = new GroupingExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlBaseParser.RULE_groupingExpressions);
    var _la = 0; // Token type
    try {
        this.state = 471;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.match(SqlBaseParser.T__1);
            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.APPROXIMATE) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.CONFIDENCE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.NOT - 35)) | (1 << (SqlBaseParser.NO - 35)) | (1 << (SqlBaseParser.EXISTS - 35)) | (1 << (SqlBaseParser.NULL - 35)) | (1 << (SqlBaseParser.TRUE - 35)) | (1 << (SqlBaseParser.FALSE - 35)) | (1 << (SqlBaseParser.SUBSTRING - 35)) | (1 << (SqlBaseParser.POSITION - 35)) | (1 << (SqlBaseParser.TINYINT - 35)) | (1 << (SqlBaseParser.SMALLINT - 35)) | (1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.ZONE - 74)) | (1 << (SqlBaseParser.EXTRACT - 74)) | (1 << (SqlBaseParser.CASE - 74)) | (1 << (SqlBaseParser.OVER - 74)) | (1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.RANGE - 74)) | (1 << (SqlBaseParser.ROWS - 74)) | (1 << (SqlBaseParser.PRECEDING - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FOLLOWING - 106)) | (1 << (SqlBaseParser.CURRENT - 106)) | (1 << (SqlBaseParser.ROW - 106)) | (1 << (SqlBaseParser.VIEW - 106)) | (1 << (SqlBaseParser.REPLACE - 106)) | (1 << (SqlBaseParser.GRANT - 106)) | (1 << (SqlBaseParser.REVOKE - 106)) | (1 << (SqlBaseParser.PRIVILEGES - 106)) | (1 << (SqlBaseParser.PUBLIC - 106)) | (1 << (SqlBaseParser.OPTION - 106)) | (1 << (SqlBaseParser.EXPLAIN - 106)) | (1 << (SqlBaseParser.ANALYZE - 106)) | (1 << (SqlBaseParser.FORMAT - 106)) | (1 << (SqlBaseParser.TYPE - 106)) | (1 << (SqlBaseParser.TEXT - 106)) | (1 << (SqlBaseParser.GRAPHVIZ - 106)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SqlBaseParser.LOGICAL - 138)) | (1 << (SqlBaseParser.DISTRIBUTED - 138)) | (1 << (SqlBaseParser.TRY - 138)) | (1 << (SqlBaseParser.CAST - 138)) | (1 << (SqlBaseParser.TRY_CAST - 138)) | (1 << (SqlBaseParser.SHOW - 138)) | (1 << (SqlBaseParser.TABLES - 138)) | (1 << (SqlBaseParser.SCHEMAS - 138)) | (1 << (SqlBaseParser.CATALOGS - 138)) | (1 << (SqlBaseParser.COLUMNS - 138)) | (1 << (SqlBaseParser.COLUMN - 138)) | (1 << (SqlBaseParser.USE - 138)) | (1 << (SqlBaseParser.PARTITIONS - 138)) | (1 << (SqlBaseParser.FUNCTIONS - 138)) | (1 << (SqlBaseParser.TO - 138)) | (1 << (SqlBaseParser.SYSTEM - 138)) | (1 << (SqlBaseParser.BERNOULLI - 138)) | (1 << (SqlBaseParser.POISSONIZED - 138)) | (1 << (SqlBaseParser.TABLESAMPLE - 138)) | (1 << (SqlBaseParser.RESCALED - 138)))) !== 0) || ((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (SqlBaseParser.ARRAY - 174)) | (1 << (SqlBaseParser.MAP - 174)) | (1 << (SqlBaseParser.SET - 174)) | (1 << (SqlBaseParser.RESET - 174)) | (1 << (SqlBaseParser.SESSION - 174)) | (1 << (SqlBaseParser.DATA - 174)) | (1 << (SqlBaseParser.START - 174)) | (1 << (SqlBaseParser.TRANSACTION - 174)) | (1 << (SqlBaseParser.COMMIT - 174)) | (1 << (SqlBaseParser.ROLLBACK - 174)) | (1 << (SqlBaseParser.WORK - 174)) | (1 << (SqlBaseParser.ISOLATION - 174)) | (1 << (SqlBaseParser.LEVEL - 174)) | (1 << (SqlBaseParser.SERIALIZABLE - 174)) | (1 << (SqlBaseParser.REPEATABLE - 174)) | (1 << (SqlBaseParser.COMMITTED - 174)) | (1 << (SqlBaseParser.UNCOMMITTED - 174)) | (1 << (SqlBaseParser.READ - 174)) | (1 << (SqlBaseParser.WRITE - 174)) | (1 << (SqlBaseParser.ONLY - 174)) | (1 << (SqlBaseParser.CALL - 174)))) !== 0) || ((((_la - 206)) & ~0x1f) == 0 && ((1 << (_la - 206)) & ((1 << (SqlBaseParser.NORMALIZE - 206)) | (1 << (SqlBaseParser.NFD - 206)) | (1 << (SqlBaseParser.NFC - 206)) | (1 << (SqlBaseParser.NFKD - 206)) | (1 << (SqlBaseParser.NFKC - 206)) | (1 << (SqlBaseParser.IF - 206)) | (1 << (SqlBaseParser.NULLIF - 206)) | (1 << (SqlBaseParser.COALESCE - 206)) | (1 << (SqlBaseParser.PLUS - 206)) | (1 << (SqlBaseParser.MINUS - 206)) | (1 << (SqlBaseParser.STRING - 206)) | (1 << (SqlBaseParser.BINARY_LITERAL - 206)) | (1 << (SqlBaseParser.INTEGER_VALUE - 206)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 206)) | (1 << (SqlBaseParser.IDENTIFIER - 206)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 206)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 206)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 206)))) !== 0)) {
                this.state = 459;
                this.expression();
                this.state = 464;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 460;
                    this.match(SqlBaseParser.T__2);
                    this.state = 461;
                    this.expression();
                    this.state = 466;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 469;
            this.match(SqlBaseParser.T__3);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 470;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupingSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    return this;
}

GroupingSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetContext.prototype.constructor = GroupingSetContext;

GroupingSetContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

GroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupingSet(this);
	}
};

GroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupingSet(this);
	}
};




SqlBaseParser.GroupingSetContext = GroupingSetContext;

SqlBaseParser.prototype.groupingSet = function() {

    var localctx = new GroupingSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SqlBaseParser.RULE_groupingSet);
    var _la = 0; // Token type
    try {
        this.state = 486;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 473;
            this.match(SqlBaseParser.T__1);
            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 12)) & ~0x1f) == 0 && ((1 << (_la - 12)) & ((1 << (SqlBaseParser.ADD - 12)) | (1 << (SqlBaseParser.APPROXIMATE - 12)) | (1 << (SqlBaseParser.AT - 12)) | (1 << (SqlBaseParser.CONFIDENCE - 12)) | (1 << (SqlBaseParser.NO - 12)))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (SqlBaseParser.SUBSTRING - 50)) | (1 << (SqlBaseParser.POSITION - 50)) | (1 << (SqlBaseParser.TINYINT - 50)) | (1 << (SqlBaseParser.SMALLINT - 50)) | (1 << (SqlBaseParser.INTEGER - 50)) | (1 << (SqlBaseParser.DATE - 50)) | (1 << (SqlBaseParser.TIME - 50)) | (1 << (SqlBaseParser.TIMESTAMP - 50)) | (1 << (SqlBaseParser.INTERVAL - 50)) | (1 << (SqlBaseParser.YEAR - 50)) | (1 << (SqlBaseParser.MONTH - 50)) | (1 << (SqlBaseParser.DAY - 50)) | (1 << (SqlBaseParser.HOUR - 50)) | (1 << (SqlBaseParser.MINUTE - 50)) | (1 << (SqlBaseParser.SECOND - 50)) | (1 << (SqlBaseParser.ZONE - 50)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (SqlBaseParser.OVER - 100)) | (1 << (SqlBaseParser.PARTITION - 100)) | (1 << (SqlBaseParser.RANGE - 100)) | (1 << (SqlBaseParser.ROWS - 100)) | (1 << (SqlBaseParser.PRECEDING - 100)) | (1 << (SqlBaseParser.FOLLOWING - 100)) | (1 << (SqlBaseParser.CURRENT - 100)) | (1 << (SqlBaseParser.ROW - 100)) | (1 << (SqlBaseParser.VIEW - 100)) | (1 << (SqlBaseParser.REPLACE - 100)) | (1 << (SqlBaseParser.GRANT - 100)) | (1 << (SqlBaseParser.REVOKE - 100)) | (1 << (SqlBaseParser.PRIVILEGES - 100)) | (1 << (SqlBaseParser.PUBLIC - 100)) | (1 << (SqlBaseParser.OPTION - 100)))) !== 0) || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (SqlBaseParser.EXPLAIN - 132)) | (1 << (SqlBaseParser.ANALYZE - 132)) | (1 << (SqlBaseParser.FORMAT - 132)) | (1 << (SqlBaseParser.TYPE - 132)) | (1 << (SqlBaseParser.TEXT - 132)) | (1 << (SqlBaseParser.GRAPHVIZ - 132)) | (1 << (SqlBaseParser.LOGICAL - 132)) | (1 << (SqlBaseParser.DISTRIBUTED - 132)) | (1 << (SqlBaseParser.TRY - 132)) | (1 << (SqlBaseParser.SHOW - 132)) | (1 << (SqlBaseParser.TABLES - 132)) | (1 << (SqlBaseParser.SCHEMAS - 132)) | (1 << (SqlBaseParser.CATALOGS - 132)) | (1 << (SqlBaseParser.COLUMNS - 132)) | (1 << (SqlBaseParser.COLUMN - 132)) | (1 << (SqlBaseParser.USE - 132)) | (1 << (SqlBaseParser.PARTITIONS - 132)) | (1 << (SqlBaseParser.FUNCTIONS - 132)) | (1 << (SqlBaseParser.TO - 132)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (SqlBaseParser.SYSTEM - 164)) | (1 << (SqlBaseParser.BERNOULLI - 164)) | (1 << (SqlBaseParser.POISSONIZED - 164)) | (1 << (SqlBaseParser.TABLESAMPLE - 164)) | (1 << (SqlBaseParser.RESCALED - 164)) | (1 << (SqlBaseParser.ARRAY - 164)) | (1 << (SqlBaseParser.MAP - 164)) | (1 << (SqlBaseParser.SET - 164)) | (1 << (SqlBaseParser.RESET - 164)) | (1 << (SqlBaseParser.SESSION - 164)) | (1 << (SqlBaseParser.DATA - 164)) | (1 << (SqlBaseParser.START - 164)) | (1 << (SqlBaseParser.TRANSACTION - 164)) | (1 << (SqlBaseParser.COMMIT - 164)) | (1 << (SqlBaseParser.ROLLBACK - 164)) | (1 << (SqlBaseParser.WORK - 164)) | (1 << (SqlBaseParser.ISOLATION - 164)) | (1 << (SqlBaseParser.LEVEL - 164)) | (1 << (SqlBaseParser.SERIALIZABLE - 164)) | (1 << (SqlBaseParser.REPEATABLE - 164)) | (1 << (SqlBaseParser.COMMITTED - 164)) | (1 << (SqlBaseParser.UNCOMMITTED - 164)) | (1 << (SqlBaseParser.READ - 164)) | (1 << (SqlBaseParser.WRITE - 164)) | (1 << (SqlBaseParser.ONLY - 164)) | (1 << (SqlBaseParser.CALL - 164)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (SqlBaseParser.NFD - 207)) | (1 << (SqlBaseParser.NFC - 207)) | (1 << (SqlBaseParser.NFKD - 207)) | (1 << (SqlBaseParser.NFKC - 207)) | (1 << (SqlBaseParser.IF - 207)) | (1 << (SqlBaseParser.NULLIF - 207)) | (1 << (SqlBaseParser.COALESCE - 207)) | (1 << (SqlBaseParser.IDENTIFIER - 207)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 207)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 207)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 207)))) !== 0)) {
                this.state = 474;
                this.qualifiedName();
                this.state = 479;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 475;
                    this.match(SqlBaseParser.T__2);
                    this.state = 476;
                    this.qualifiedName();
                    this.state = 481;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 484;
            this.match(SqlBaseParser.T__3);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.APPROXIMATE:
        case SqlBaseParser.AT:
        case SqlBaseParser.CONFIDENCE:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.TRY:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.RESCALED:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 485;
            this.qualifiedName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedQuery;
    this.name = null; // IdentifierContext
    return this;
}

NamedQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;

NamedQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

NamedQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedQueryContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

NamedQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNamedQuery(this);
	}
};

NamedQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNamedQuery(this);
	}
};




SqlBaseParser.NamedQueryContext = NamedQueryContext;

SqlBaseParser.prototype.namedQuery = function() {

    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlBaseParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 488;
        localctx.name = this.identifier();
        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__1) {
            this.state = 489;
            this.columnAliases();
        }

        this.state = 492;
        this.match(SqlBaseParser.AS);
        this.state = 493;
        this.match(SqlBaseParser.T__1);
        this.state = 494;
        this.query();
        this.state = 495;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_selectItem;
    return this;
}

SelectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;


 
SelectItemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectAllContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectAllContext.prototype = Object.create(SelectItemContext.prototype);
SelectAllContext.prototype.constructor = SelectAllContext;

SqlBaseParser.SelectAllContext = SelectAllContext;

SelectAllContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

SelectAllContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};
SelectAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSelectAll(this);
	}
};

SelectAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSelectAll(this);
	}
};


function SelectSingleContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectSingleContext.prototype = Object.create(SelectItemContext.prototype);
SelectSingleContext.prototype.constructor = SelectSingleContext;

SqlBaseParser.SelectSingleContext = SelectSingleContext;

SelectSingleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectSingleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectSingleContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
SelectSingleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSelectSingle(this);
	}
};

SelectSingleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSelectSingle(this);
	}
};



SqlBaseParser.SelectItemContext = SelectItemContext;

SqlBaseParser.prototype.selectItem = function() {

    var localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SqlBaseParser.RULE_selectItem);
    var _la = 0; // Token type
    try {
        this.state = 509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectSingleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 497;
            this.expression();
            this.state = 502;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
            if(la_===1) {
                this.state = 499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 498;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 501;
                this.identifier();

            }
            break;

        case 2:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 504;
            this.qualifiedName();
            this.state = 505;
            this.match(SqlBaseParser.T__4);
            this.state = 506;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 3:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 508;
            this.match(SqlBaseParser.ASTERISK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;


 
RelationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RelationDefaultContext(parser, ctx) {
	RelationContext.call(this, parser);
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationDefaultContext.prototype = Object.create(RelationContext.prototype);
RelationDefaultContext.prototype.constructor = RelationDefaultContext;

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

RelationDefaultContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};
RelationDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRelationDefault(this);
	}
};

RelationDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRelationDefault(this);
	}
};


function JoinRelationContext(parser, ctx) {
	RelationContext.call(this, parser);
    this.left = null; // RelationContext;
    this.right = null; // AliasedRelationContext;
    this.rightRelation = null; // RelationContext;
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinRelationContext.prototype = Object.create(RelationContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

SqlBaseParser.JoinRelationContext = JoinRelationContext;

JoinRelationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

JoinRelationContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

JoinRelationContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

JoinRelationContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinRelationContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinRelationContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

JoinRelationContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};
JoinRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinRelation(this);
	}
};

JoinRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinRelation(this);
	}
};



SqlBaseParser.prototype.relation = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 46;
    this.enterRecursionRule(localctx, 46, SqlBaseParser.RULE_relation, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RelationDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 512;
        this.aliasedRelation();
        this._ctx.stop = this._input.LT(-1);
        this.state = 532;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_relation);
                this.state = 514;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 528;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.CROSS:
                    this.state = 515;
                    this.match(SqlBaseParser.CROSS);
                    this.state = 516;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 517;
                    localctx.right = this.aliasedRelation();
                    break;
                case SqlBaseParser.JOIN:
                case SqlBaseParser.INNER:
                case SqlBaseParser.LEFT:
                case SqlBaseParser.RIGHT:
                case SqlBaseParser.FULL:
                    this.state = 518;
                    this.joinType();
                    this.state = 519;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 520;
                    localctx.rightRelation = this.relation(0);
                    this.state = 521;
                    this.joinCriteria();
                    break;
                case SqlBaseParser.NATURAL:
                    this.state = 523;
                    this.match(SqlBaseParser.NATURAL);
                    this.state = 524;
                    this.joinType();
                    this.state = 525;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 526;
                    localctx.right = this.aliasedRelation();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 534;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinType;
    return this;
}

JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;

JoinTypeContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

JoinTypeContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

JoinTypeContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

JoinTypeContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

JoinTypeContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

JoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinType(this);
	}
};

JoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinType(this);
	}
};




SqlBaseParser.JoinTypeContext = JoinTypeContext;

SqlBaseParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlBaseParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 550;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.JOIN:
        case SqlBaseParser.INNER:
            this.enterOuterAlt(localctx, 1);
            this.state = 536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INNER) {
                this.state = 535;
                this.match(SqlBaseParser.INNER);
            }

            break;
        case SqlBaseParser.LEFT:
            this.enterOuterAlt(localctx, 2);
            this.state = 538;
            this.match(SqlBaseParser.LEFT);
            this.state = 540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 539;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.RIGHT:
            this.enterOuterAlt(localctx, 3);
            this.state = 542;
            this.match(SqlBaseParser.RIGHT);
            this.state = 544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 543;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.FULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 546;
            this.match(SqlBaseParser.FULL);
            this.state = 548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 547;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    return this;
}

JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

JoinCriteriaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

JoinCriteriaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinCriteria(this);
	}
};




SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext;

SqlBaseParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlBaseParser.RULE_joinCriteria);
    var _la = 0; // Token type
    try {
        this.state = 566;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 552;
            this.match(SqlBaseParser.ON);
            this.state = 553;
            this.booleanExpression(0);
            break;
        case SqlBaseParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 554;
            this.match(SqlBaseParser.USING);
            this.state = 555;
            this.match(SqlBaseParser.T__1);
            this.state = 556;
            this.identifier();
            this.state = 561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 557;
                this.match(SqlBaseParser.T__2);
                this.state = 558;
                this.identifier();
                this.state = 563;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 564;
            this.match(SqlBaseParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SampleTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampleType;
    return this;
}

SampleTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleTypeContext.prototype.constructor = SampleTypeContext;

SampleTypeContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlBaseParser.BERNOULLI, 0);
};

SampleTypeContext.prototype.SYSTEM = function() {
    return this.getToken(SqlBaseParser.SYSTEM, 0);
};

SampleTypeContext.prototype.POISSONIZED = function() {
    return this.getToken(SqlBaseParser.POISSONIZED, 0);
};

SampleTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSampleType(this);
	}
};

SampleTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSampleType(this);
	}
};




SqlBaseParser.SampleTypeContext = SampleTypeContext;

SqlBaseParser.prototype.sampleType = function() {

    var localctx = new SampleTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlBaseParser.RULE_sampleType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        _la = this._input.LA(1);
        if(!(((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (SqlBaseParser.SYSTEM - 164)) | (1 << (SqlBaseParser.BERNOULLI - 164)) | (1 << (SqlBaseParser.POISSONIZED - 164)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasedRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    return this;
}

AliasedRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

AliasedRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

AliasedRelationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AliasedRelationContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

AliasedRelationContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

AliasedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAliasedRelation(this);
	}
};




SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

SqlBaseParser.prototype.aliasedRelation = function() {

    var localctx = new AliasedRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlBaseParser.RULE_aliasedRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.relationPrimary();
        this.state = 578;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 571;
                this.match(SqlBaseParser.AS);
            }

            this.state = 574;
            this.identifier();
            this.state = 576;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 575;
                this.columnAliases();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ColumnAliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_columnAliases;
    return this;
}

ColumnAliasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnAliasesContext.prototype.constructor = ColumnAliasesContext;

ColumnAliasesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnAliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumnAliases(this);
	}
};

ColumnAliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumnAliases(this);
	}
};




SqlBaseParser.ColumnAliasesContext = ColumnAliasesContext;

SqlBaseParser.prototype.columnAliases = function() {

    var localctx = new ColumnAliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlBaseParser.RULE_columnAliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.match(SqlBaseParser.T__1);
        this.state = 581;
        this.identifier();
        this.state = 586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__2) {
            this.state = 582;
            this.match(SqlBaseParser.T__2);
            this.state = 583;
            this.identifier();
            this.state = 588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 589;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    return this;
}

RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;


 
RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
SubqueryRelationContext.prototype.constructor = SubqueryRelationContext;

SqlBaseParser.SubqueryRelationContext = SubqueryRelationContext;

SubqueryRelationContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubqueryRelation(this);
	}
};

SubqueryRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubqueryRelation(this);
	}
};


function ParenthesizedRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
ParenthesizedRelationContext.prototype.constructor = ParenthesizedRelationContext;

SqlBaseParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

ParenthesizedRelationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};
ParenthesizedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterParenthesizedRelation(this);
	}
};

ParenthesizedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitParenthesizedRelation(this);
	}
};


function UnnestContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnnestContext.prototype = Object.create(RelationPrimaryContext.prototype);
UnnestContext.prototype.constructor = UnnestContext;

SqlBaseParser.UnnestContext = UnnestContext;

UnnestContext.prototype.UNNEST = function() {
    return this.getToken(SqlBaseParser.UNNEST, 0);
};

UnnestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

UnnestContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

UnnestContext.prototype.ORDINALITY = function() {
    return this.getToken(SqlBaseParser.ORDINALITY, 0);
};
UnnestContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnnest(this);
	}
};

UnnestContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnnest(this);
	}
};


function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlBaseParser.TableNameContext = TableNameContext;

TableNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

TableNameContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

TableNameContext.prototype.tableProperties = function() {
    return this.getTypedRuleContext(TablePropertiesContext,0);
};
TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableName(this);
	}
};



SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext;

SqlBaseParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlBaseParser.RULE_relationPrimary);
    var _la = 0; // Token type
    try {
        this.state = 619;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 591;
            this.qualifiedName();
            this.state = 594;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
            if(la_===1) {
                this.state = 592;
                this.match(SqlBaseParser.WITH);
                this.state = 593;
                this.tableProperties();

            }
            break;

        case 2:
            localctx = new SubqueryRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 596;
            this.match(SqlBaseParser.T__1);
            this.state = 597;
            this.query();
            this.state = 598;
            this.match(SqlBaseParser.T__3);
            break;

        case 3:
            localctx = new UnnestContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 600;
            this.match(SqlBaseParser.UNNEST);
            this.state = 601;
            this.match(SqlBaseParser.T__1);
            this.state = 602;
            this.expression();
            this.state = 607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 603;
                this.match(SqlBaseParser.T__2);
                this.state = 604;
                this.expression();
                this.state = 609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 610;
            this.match(SqlBaseParser.T__3);
            this.state = 613;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
            if(la_===1) {
                this.state = 611;
                this.match(SqlBaseParser.WITH);
                this.state = 612;
                this.match(SqlBaseParser.ORDINALITY);

            }
            break;

        case 4:
            localctx = new ParenthesizedRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 615;
            this.match(SqlBaseParser.T__1);
            this.state = 616;
            this.relation(0);
            this.state = 617;
            this.match(SqlBaseParser.T__3);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExpression(this);
	}
};




SqlBaseParser.ExpressionContext = ExpressionContext;

SqlBaseParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlBaseParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlBaseParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLogicalNot(this);
	}
};


function BooleanDefaultContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanDefaultContext.prototype = Object.create(BooleanExpressionContext.prototype);
BooleanDefaultContext.prototype.constructor = BooleanDefaultContext;

SqlBaseParser.BooleanDefaultContext = BooleanDefaultContext;

BooleanDefaultContext.prototype.predicated = function() {
    return this.getTypedRuleContext(PredicatedContext,0);
};
BooleanDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanDefault(this);
	}
};

BooleanDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanDefault(this);
	}
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLogicalBinary(this);
	}
};



SqlBaseParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, SqlBaseParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.ADD:
        case SqlBaseParser.APPROXIMATE:
        case SqlBaseParser.AT:
        case SqlBaseParser.CONFIDENCE:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.CASE:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.TRY:
        case SqlBaseParser.CAST:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.RESCALED:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new BooleanDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 624;
            this.predicated();
            break;
        case SqlBaseParser.NOT:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 625;
            this.match(SqlBaseParser.NOT);
            this.state = 626;
            this.booleanExpression(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 637;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 635;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 629;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 630;
                    localctx.operator = this.match(SqlBaseParser.AND);
                    this.state = 631;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 632;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 633;
                    localctx.operator = this.match(SqlBaseParser.OR);
                    this.state = 634;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 639;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PredicatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicated;
    this._valueExpression = null; // ValueExpressionContext
    return this;
}

PredicatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPredicated(this);
	}
};




SqlBaseParser.PredicatedContext = PredicatedContext;

SqlBaseParser.prototype.predicated = function() {

    var localctx = new PredicatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SqlBaseParser.RULE_predicated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        localctx._valueExpression = this.valueExpression(0);
        this.state = 642;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        if(la_===1) {
            this.state = 641;
            this.predicate(localctx._valueExpression);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState, value) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicate;
    this.value = null
    this.value = value || null;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
    this.value = ctx.value;
};


function ComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(PredicateContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlBaseParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparison(this);
	}
};


function LikeContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.pattern = null; // ValueExpressionContext;
    this.escape = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikeContext.prototype = Object.create(PredicateContext.prototype);
LikeContext.prototype.constructor = LikeContext;

SqlBaseParser.LikeContext = LikeContext;

LikeContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

LikeContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

LikeContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LikeContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};
LikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLike(this);
	}
};

LikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLike(this);
	}
};


function InSubqueryContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InSubqueryContext.prototype = Object.create(PredicateContext.prototype);
InSubqueryContext.prototype.constructor = InSubqueryContext;

SqlBaseParser.InSubqueryContext = InSubqueryContext;

InSubqueryContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InSubqueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InSubqueryContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInSubquery(this);
	}
};

InSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInSubquery(this);
	}
};


function DistinctFromContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistinctFromContext.prototype = Object.create(PredicateContext.prototype);
DistinctFromContext.prototype.constructor = DistinctFromContext;

SqlBaseParser.DistinctFromContext = DistinctFromContext;

DistinctFromContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

DistinctFromContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

DistinctFromContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DistinctFromContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

DistinctFromContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
DistinctFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDistinctFrom(this);
	}
};

DistinctFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDistinctFrom(this);
	}
};


function InListContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InListContext.prototype = Object.create(PredicateContext.prototype);
InListContext.prototype.constructor = InListContext;

SqlBaseParser.InListContext = InListContext;

InListContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InListContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInList(this);
	}
};

InListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInList(this);
	}
};


function NullPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullPredicateContext.prototype = Object.create(PredicateContext.prototype);
NullPredicateContext.prototype.constructor = NullPredicateContext;

SqlBaseParser.NullPredicateContext = NullPredicateContext;

NullPredicateContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

NullPredicateContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

NullPredicateContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
NullPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNullPredicate(this);
	}
};

NullPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNullPredicate(this);
	}
};


function BetweenContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.lower = null; // ValueExpressionContext;
    this.upper = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenContext.prototype = Object.create(PredicateContext.prototype);
BetweenContext.prototype.constructor = BetweenContext;

SqlBaseParser.BetweenContext = BetweenContext;

BetweenContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

BetweenContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

BetweenContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

BetweenContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
BetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBetween(this);
	}
};

BetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBetween(this);
	}
};



SqlBaseParser.PredicateContext = PredicateContext;

SqlBaseParser.prototype.predicate = function(value) {

    var localctx = new PredicateContext(this, this._ctx, this.state, value);
    this.enterRule(localctx, 66, SqlBaseParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 699;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 644;
            this.comparisonOperator();
            this.state = 645;
            localctx.right = this.valueExpression(0);
            break;

        case 2:
            localctx = new BetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 647;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 650;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 651;
            localctx.lower = this.valueExpression(0);
            this.state = 652;
            this.match(SqlBaseParser.AND);
            this.state = 653;
            localctx.upper = this.valueExpression(0);
            break;

        case 3:
            localctx = new InListContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 656;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 655;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 658;
            this.match(SqlBaseParser.IN);
            this.state = 659;
            this.match(SqlBaseParser.T__1);
            this.state = 660;
            this.expression();
            this.state = 665;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 661;
                this.match(SqlBaseParser.T__2);
                this.state = 662;
                this.expression();
                this.state = 667;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 668;
            this.match(SqlBaseParser.T__3);
            break;

        case 4:
            localctx = new InSubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 670;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 673;
            this.match(SqlBaseParser.IN);
            this.state = 674;
            this.match(SqlBaseParser.T__1);
            this.state = 675;
            this.query();
            this.state = 676;
            this.match(SqlBaseParser.T__3);
            break;

        case 5:
            localctx = new LikeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 678;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 681;
            this.match(SqlBaseParser.LIKE);
            this.state = 682;
            localctx.pattern = this.valueExpression(0);
            this.state = 685;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 683;
                this.match(SqlBaseParser.ESCAPE);
                this.state = 684;
                localctx.escape = this.valueExpression(0);

            }
            break;

        case 6:
            localctx = new NullPredicateContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 687;
            this.match(SqlBaseParser.IS);
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 688;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 691;
            this.match(SqlBaseParser.NULL);
            break;

        case 7:
            localctx = new DistinctFromContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 692;
            this.match(SqlBaseParser.IS);
            this.state = 694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 693;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 696;
            this.match(SqlBaseParser.DISTINCT);
            this.state = 697;
            this.match(SqlBaseParser.FROM);
            this.state = 698;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitValueExpressionDefault(this);
	}
};


function ConcatenationContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcatenationContext.prototype = Object.create(ValueExpressionContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

SqlBaseParser.ConcatenationContext = ConcatenationContext;

ConcatenationContext.prototype.CONCAT = function() {
    return this.getToken(SqlBaseParser.CONCAT, 0);
};

ConcatenationContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitConcatenation(this);
	}
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArithmeticBinary(this);
	}
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArithmeticUnary(this);
	}
};


function AtTimeZoneContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtTimeZoneContext.prototype = Object.create(ValueExpressionContext.prototype);
AtTimeZoneContext.prototype.constructor = AtTimeZoneContext;

SqlBaseParser.AtTimeZoneContext = AtTimeZoneContext;

AtTimeZoneContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

AtTimeZoneContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

AtTimeZoneContext.prototype.timeZoneSpecifier = function() {
    return this.getTypedRuleContext(TimeZoneSpecifierContext,0);
};
AtTimeZoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAtTimeZone(this);
	}
};



SqlBaseParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, SqlBaseParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.ADD:
        case SqlBaseParser.APPROXIMATE:
        case SqlBaseParser.AT:
        case SqlBaseParser.CONFIDENCE:
        case SqlBaseParser.NO:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.NULL:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.CASE:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.TRY:
        case SqlBaseParser.CAST:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.RESCALED:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 702;
            this.primaryExpression(0);
            break;
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 703;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 704;
            this.valueExpression(4);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 721;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 719;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 707;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 708;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 222)) & ~0x1f) == 0 && ((1 << (_la - 222)) & ((1 << (SqlBaseParser.ASTERISK - 222)) | (1 << (SqlBaseParser.SLASH - 222)) | (1 << (SqlBaseParser.PERCENT - 222)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 709;
                    localctx.right = this.valueExpression(4);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 710;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 711;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 712;
                    localctx.right = this.valueExpression(3);
                    break;

                case 3:
                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 713;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 714;
                    this.match(SqlBaseParser.CONCAT);
                    this.state = 715;
                    localctx.right = this.valueExpression(2);
                    break;

                case 4:
                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 716;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 717;
                    this.match(SqlBaseParser.AT);
                    this.state = 718;
                    this.timeZoneSpecifier();
                    break;

                } 
            }
            this.state = 723;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlBaseParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DereferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDereference(this);
	}
};

DereferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDereference(this);
	}
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SimpleCaseContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SimpleCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSimpleCase(this);
	}
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumnReference(this);
	}
};

ColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumnReference(this);
	}
};


function NullLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlBaseParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNullLiteral(this);
	}
};


function RowConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
RowConstructorContext.prototype.constructor = RowConstructorContext;

SqlBaseParser.RowConstructorContext = RowConstructorContext;

RowConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

RowConstructorContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};
RowConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRowConstructor(this);
	}
};

RowConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRowConstructor(this);
	}
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlBaseParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubscript(this);
	}
};


function TypeConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
TypeConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTypeConstructor(this);
	}
};


function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubqueryExpression(this);
	}
};


function SubstringContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstringContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubstringContext.prototype.constructor = SubstringContext;

SqlBaseParser.SubstringContext = SubstringContext;

SubstringContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

SubstringContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

SubstringContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

SubstringContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};
SubstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubstring(this);
	}
};

SubstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubstring(this);
	}
};


function BinaryLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BinaryLiteralContext.prototype.constructor = BinaryLiteralContext;

SqlBaseParser.BinaryLiteralContext = BinaryLiteralContext;

BinaryLiteralContext.prototype.BINARY_LITERAL = function() {
    return this.getToken(SqlBaseParser.BINARY_LITERAL, 0);
};
BinaryLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBinaryLiteral(this);
	}
};

BinaryLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBinaryLiteral(this);
	}
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlBaseParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastContext.prototype.TRY_CAST = function() {
    return this.getToken(SqlBaseParser.TRY_CAST, 0);
};
CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCast(this);
	}
};


function LambdaContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LambdaContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LambdaContext.prototype.constructor = LambdaContext;

SqlBaseParser.LambdaContext = LambdaContext;

LambdaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

LambdaContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
LambdaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLambda(this);
	}
};

LambdaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLambda(this);
	}
};


function ExtractContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;

SqlBaseParser.ExtractContext = ExtractContext;

ExtractContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

ExtractContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExtractContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ExtractContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ExtractContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExtract(this);
	}
};

ExtractContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExtract(this);
	}
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitParenthesizedExpression(this);
	}
};


function StringLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlBaseParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStringLiteral(this);
	}
};


function ArrayConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ArrayConstructorContext.prototype.constructor = ArrayConstructorContext;

SqlBaseParser.ArrayConstructorContext = ArrayConstructorContext;

ArrayConstructorContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

ArrayConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ArrayConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArrayConstructor(this);
	}
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlBaseParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

FunctionCallContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

FunctionCallContext.prototype.over = function() {
    return this.getTypedRuleContext(OverContext,0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitFunctionCall(this);
	}
};


function NormalizeContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NormalizeContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NormalizeContext.prototype.constructor = NormalizeContext;

SqlBaseParser.NormalizeContext = NormalizeContext;

NormalizeContext.prototype.NORMALIZE = function() {
    return this.getToken(SqlBaseParser.NORMALIZE, 0);
};

NormalizeContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

NormalizeContext.prototype.normalForm = function() {
    return this.getTypedRuleContext(NormalFormContext,0);
};
NormalizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNormalize(this);
	}
};

NormalizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNormalize(this);
	}
};


function ExistsContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

SqlBaseParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

ExistsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExists(this);
	}
};

ExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExists(this);
	}
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

SqlBaseParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PositionContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};
PositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPosition(this);
	}
};

PositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPosition(this);
	}
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSearchedCase(this);
	}
};


function IntervalLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

IntervalLiteralContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
IntervalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntervalLiteral(this);
	}
};

IntervalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntervalLiteral(this);
	}
};


function NumericLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNumericLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanLiteral(this);
	}
};



SqlBaseParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 70;
    this.enterRecursionRule(localctx, 70, SqlBaseParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NullLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 725;
            this.match(SqlBaseParser.NULL);
            break;

        case 2:
            localctx = new IntervalLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 726;
            this.interval();
            break;

        case 3:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 727;
            this.identifier();
            this.state = 728;
            this.match(SqlBaseParser.STRING);
            break;

        case 4:
            localctx = new NumericLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 730;
            this.number();
            break;

        case 5:
            localctx = new BooleanLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 731;
            this.booleanValue();
            break;

        case 6:
            localctx = new StringLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 732;
            this.match(SqlBaseParser.STRING);
            break;

        case 7:
            localctx = new BinaryLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 733;
            this.match(SqlBaseParser.BINARY_LITERAL);
            break;

        case 8:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 734;
            this.match(SqlBaseParser.POSITION);
            this.state = 735;
            this.match(SqlBaseParser.T__1);
            this.state = 736;
            this.valueExpression(0);
            this.state = 737;
            this.match(SqlBaseParser.IN);
            this.state = 738;
            this.valueExpression(0);
            this.state = 739;
            this.match(SqlBaseParser.T__3);
            break;

        case 9:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 741;
            this.match(SqlBaseParser.T__1);
            this.state = 742;
            this.expression();
            this.state = 745; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 743;
                this.match(SqlBaseParser.T__2);
                this.state = 744;
                this.expression();
                this.state = 747; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.T__2);
            this.state = 749;
            this.match(SqlBaseParser.T__3);
            break;

        case 10:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 751;
            this.match(SqlBaseParser.ROW);
            this.state = 752;
            this.match(SqlBaseParser.T__1);
            this.state = 753;
            this.expression();
            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 754;
                this.match(SqlBaseParser.T__2);
                this.state = 755;
                this.expression();
                this.state = 760;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 761;
            this.match(SqlBaseParser.T__3);
            break;

        case 11:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 763;
            this.qualifiedName();
            this.state = 764;
            this.match(SqlBaseParser.T__1);
            this.state = 765;
            this.match(SqlBaseParser.ASTERISK);
            this.state = 766;
            this.match(SqlBaseParser.T__3);
            this.state = 768;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 767;
                this.over();

            }
            break;

        case 12:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 770;
            this.qualifiedName();
            this.state = 771;
            this.match(SqlBaseParser.T__1);
            this.state = 780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.APPROXIMATE) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.CONFIDENCE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.NOT - 35)) | (1 << (SqlBaseParser.NO - 35)) | (1 << (SqlBaseParser.EXISTS - 35)) | (1 << (SqlBaseParser.NULL - 35)) | (1 << (SqlBaseParser.TRUE - 35)) | (1 << (SqlBaseParser.FALSE - 35)) | (1 << (SqlBaseParser.SUBSTRING - 35)) | (1 << (SqlBaseParser.POSITION - 35)) | (1 << (SqlBaseParser.TINYINT - 35)) | (1 << (SqlBaseParser.SMALLINT - 35)) | (1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.ZONE - 74)) | (1 << (SqlBaseParser.EXTRACT - 74)) | (1 << (SqlBaseParser.CASE - 74)) | (1 << (SqlBaseParser.OVER - 74)) | (1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.RANGE - 74)) | (1 << (SqlBaseParser.ROWS - 74)) | (1 << (SqlBaseParser.PRECEDING - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FOLLOWING - 106)) | (1 << (SqlBaseParser.CURRENT - 106)) | (1 << (SqlBaseParser.ROW - 106)) | (1 << (SqlBaseParser.VIEW - 106)) | (1 << (SqlBaseParser.REPLACE - 106)) | (1 << (SqlBaseParser.GRANT - 106)) | (1 << (SqlBaseParser.REVOKE - 106)) | (1 << (SqlBaseParser.PRIVILEGES - 106)) | (1 << (SqlBaseParser.PUBLIC - 106)) | (1 << (SqlBaseParser.OPTION - 106)) | (1 << (SqlBaseParser.EXPLAIN - 106)) | (1 << (SqlBaseParser.ANALYZE - 106)) | (1 << (SqlBaseParser.FORMAT - 106)) | (1 << (SqlBaseParser.TYPE - 106)) | (1 << (SqlBaseParser.TEXT - 106)) | (1 << (SqlBaseParser.GRAPHVIZ - 106)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SqlBaseParser.LOGICAL - 138)) | (1 << (SqlBaseParser.DISTRIBUTED - 138)) | (1 << (SqlBaseParser.TRY - 138)) | (1 << (SqlBaseParser.CAST - 138)) | (1 << (SqlBaseParser.TRY_CAST - 138)) | (1 << (SqlBaseParser.SHOW - 138)) | (1 << (SqlBaseParser.TABLES - 138)) | (1 << (SqlBaseParser.SCHEMAS - 138)) | (1 << (SqlBaseParser.CATALOGS - 138)) | (1 << (SqlBaseParser.COLUMNS - 138)) | (1 << (SqlBaseParser.COLUMN - 138)) | (1 << (SqlBaseParser.USE - 138)) | (1 << (SqlBaseParser.PARTITIONS - 138)) | (1 << (SqlBaseParser.FUNCTIONS - 138)) | (1 << (SqlBaseParser.TO - 138)) | (1 << (SqlBaseParser.SYSTEM - 138)) | (1 << (SqlBaseParser.BERNOULLI - 138)) | (1 << (SqlBaseParser.POISSONIZED - 138)) | (1 << (SqlBaseParser.TABLESAMPLE - 138)) | (1 << (SqlBaseParser.RESCALED - 138)))) !== 0) || ((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (SqlBaseParser.ARRAY - 174)) | (1 << (SqlBaseParser.MAP - 174)) | (1 << (SqlBaseParser.SET - 174)) | (1 << (SqlBaseParser.RESET - 174)) | (1 << (SqlBaseParser.SESSION - 174)) | (1 << (SqlBaseParser.DATA - 174)) | (1 << (SqlBaseParser.START - 174)) | (1 << (SqlBaseParser.TRANSACTION - 174)) | (1 << (SqlBaseParser.COMMIT - 174)) | (1 << (SqlBaseParser.ROLLBACK - 174)) | (1 << (SqlBaseParser.WORK - 174)) | (1 << (SqlBaseParser.ISOLATION - 174)) | (1 << (SqlBaseParser.LEVEL - 174)) | (1 << (SqlBaseParser.SERIALIZABLE - 174)) | (1 << (SqlBaseParser.REPEATABLE - 174)) | (1 << (SqlBaseParser.COMMITTED - 174)) | (1 << (SqlBaseParser.UNCOMMITTED - 174)) | (1 << (SqlBaseParser.READ - 174)) | (1 << (SqlBaseParser.WRITE - 174)) | (1 << (SqlBaseParser.ONLY - 174)) | (1 << (SqlBaseParser.CALL - 174)))) !== 0) || ((((_la - 206)) & ~0x1f) == 0 && ((1 << (_la - 206)) & ((1 << (SqlBaseParser.NORMALIZE - 206)) | (1 << (SqlBaseParser.NFD - 206)) | (1 << (SqlBaseParser.NFC - 206)) | (1 << (SqlBaseParser.NFKD - 206)) | (1 << (SqlBaseParser.NFKC - 206)) | (1 << (SqlBaseParser.IF - 206)) | (1 << (SqlBaseParser.NULLIF - 206)) | (1 << (SqlBaseParser.COALESCE - 206)) | (1 << (SqlBaseParser.PLUS - 206)) | (1 << (SqlBaseParser.MINUS - 206)) | (1 << (SqlBaseParser.STRING - 206)) | (1 << (SqlBaseParser.BINARY_LITERAL - 206)) | (1 << (SqlBaseParser.INTEGER_VALUE - 206)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 206)) | (1 << (SqlBaseParser.IDENTIFIER - 206)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 206)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 206)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 206)))) !== 0)) {
                this.state = 772;
                this.expression();
                this.state = 777;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 773;
                    this.match(SqlBaseParser.T__2);
                    this.state = 774;
                    this.expression();
                    this.state = 779;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 782;
            this.match(SqlBaseParser.T__3);
            this.state = 784;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 783;
                this.over();

            }
            break;

        case 13:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 786;
            this.identifier();
            this.state = 787;
            this.match(SqlBaseParser.T__5);
            this.state = 788;
            this.expression();
            break;

        case 14:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 790;
            this.match(SqlBaseParser.T__1);
            this.state = 791;
            this.identifier();
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 792;
                this.match(SqlBaseParser.T__2);
                this.state = 793;
                this.identifier();
                this.state = 798;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 799;
            this.match(SqlBaseParser.T__3);
            this.state = 800;
            this.match(SqlBaseParser.T__5);
            this.state = 801;
            this.expression();
            break;

        case 15:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 803;
            this.match(SqlBaseParser.T__1);
            this.state = 804;
            this.query();
            this.state = 805;
            this.match(SqlBaseParser.T__3);
            break;

        case 16:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 807;
            this.match(SqlBaseParser.EXISTS);
            this.state = 808;
            this.match(SqlBaseParser.T__1);
            this.state = 809;
            this.query();
            this.state = 810;
            this.match(SqlBaseParser.T__3);
            break;

        case 17:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 812;
            this.match(SqlBaseParser.CASE);
            this.state = 813;
            this.valueExpression(0);
            this.state = 815; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 814;
                this.whenClause();
                this.state = 817; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 821;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 819;
                this.match(SqlBaseParser.ELSE);
                this.state = 820;
                localctx.elseExpression = this.expression();
            }

            this.state = 823;
            this.match(SqlBaseParser.END);
            break;

        case 18:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 825;
            this.match(SqlBaseParser.CASE);
            this.state = 827; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 826;
                this.whenClause();
                this.state = 829; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 831;
                this.match(SqlBaseParser.ELSE);
                this.state = 832;
                localctx.elseExpression = this.expression();
            }

            this.state = 835;
            this.match(SqlBaseParser.END);
            break;

        case 19:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 837;
            this.match(SqlBaseParser.CAST);
            this.state = 838;
            this.match(SqlBaseParser.T__1);
            this.state = 839;
            this.expression();
            this.state = 840;
            this.match(SqlBaseParser.AS);
            this.state = 841;
            this.type(0);
            this.state = 842;
            this.match(SqlBaseParser.T__3);
            break;

        case 20:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 844;
            this.match(SqlBaseParser.TRY_CAST);
            this.state = 845;
            this.match(SqlBaseParser.T__1);
            this.state = 846;
            this.expression();
            this.state = 847;
            this.match(SqlBaseParser.AS);
            this.state = 848;
            this.type(0);
            this.state = 849;
            this.match(SqlBaseParser.T__3);
            break;

        case 21:
            localctx = new ArrayConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 851;
            this.match(SqlBaseParser.ARRAY);
            this.state = 852;
            this.match(SqlBaseParser.T__6);
            this.state = 861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.APPROXIMATE) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.CONFIDENCE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SqlBaseParser.NOT - 35)) | (1 << (SqlBaseParser.NO - 35)) | (1 << (SqlBaseParser.EXISTS - 35)) | (1 << (SqlBaseParser.NULL - 35)) | (1 << (SqlBaseParser.TRUE - 35)) | (1 << (SqlBaseParser.FALSE - 35)) | (1 << (SqlBaseParser.SUBSTRING - 35)) | (1 << (SqlBaseParser.POSITION - 35)) | (1 << (SqlBaseParser.TINYINT - 35)) | (1 << (SqlBaseParser.SMALLINT - 35)) | (1 << (SqlBaseParser.INTEGER - 35)) | (1 << (SqlBaseParser.DATE - 35)) | (1 << (SqlBaseParser.TIME - 35)) | (1 << (SqlBaseParser.TIMESTAMP - 35)) | (1 << (SqlBaseParser.INTERVAL - 35)) | (1 << (SqlBaseParser.YEAR - 35)) | (1 << (SqlBaseParser.MONTH - 35)) | (1 << (SqlBaseParser.DAY - 35)) | (1 << (SqlBaseParser.HOUR - 35)) | (1 << (SqlBaseParser.MINUTE - 35)) | (1 << (SqlBaseParser.SECOND - 35)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SqlBaseParser.ZONE - 74)) | (1 << (SqlBaseParser.EXTRACT - 74)) | (1 << (SqlBaseParser.CASE - 74)) | (1 << (SqlBaseParser.OVER - 74)) | (1 << (SqlBaseParser.PARTITION - 74)) | (1 << (SqlBaseParser.RANGE - 74)) | (1 << (SqlBaseParser.ROWS - 74)) | (1 << (SqlBaseParser.PRECEDING - 74)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (SqlBaseParser.FOLLOWING - 106)) | (1 << (SqlBaseParser.CURRENT - 106)) | (1 << (SqlBaseParser.ROW - 106)) | (1 << (SqlBaseParser.VIEW - 106)) | (1 << (SqlBaseParser.REPLACE - 106)) | (1 << (SqlBaseParser.GRANT - 106)) | (1 << (SqlBaseParser.REVOKE - 106)) | (1 << (SqlBaseParser.PRIVILEGES - 106)) | (1 << (SqlBaseParser.PUBLIC - 106)) | (1 << (SqlBaseParser.OPTION - 106)) | (1 << (SqlBaseParser.EXPLAIN - 106)) | (1 << (SqlBaseParser.ANALYZE - 106)) | (1 << (SqlBaseParser.FORMAT - 106)) | (1 << (SqlBaseParser.TYPE - 106)) | (1 << (SqlBaseParser.TEXT - 106)) | (1 << (SqlBaseParser.GRAPHVIZ - 106)))) !== 0) || ((((_la - 138)) & ~0x1f) == 0 && ((1 << (_la - 138)) & ((1 << (SqlBaseParser.LOGICAL - 138)) | (1 << (SqlBaseParser.DISTRIBUTED - 138)) | (1 << (SqlBaseParser.TRY - 138)) | (1 << (SqlBaseParser.CAST - 138)) | (1 << (SqlBaseParser.TRY_CAST - 138)) | (1 << (SqlBaseParser.SHOW - 138)) | (1 << (SqlBaseParser.TABLES - 138)) | (1 << (SqlBaseParser.SCHEMAS - 138)) | (1 << (SqlBaseParser.CATALOGS - 138)) | (1 << (SqlBaseParser.COLUMNS - 138)) | (1 << (SqlBaseParser.COLUMN - 138)) | (1 << (SqlBaseParser.USE - 138)) | (1 << (SqlBaseParser.PARTITIONS - 138)) | (1 << (SqlBaseParser.FUNCTIONS - 138)) | (1 << (SqlBaseParser.TO - 138)) | (1 << (SqlBaseParser.SYSTEM - 138)) | (1 << (SqlBaseParser.BERNOULLI - 138)) | (1 << (SqlBaseParser.POISSONIZED - 138)) | (1 << (SqlBaseParser.TABLESAMPLE - 138)) | (1 << (SqlBaseParser.RESCALED - 138)))) !== 0) || ((((_la - 174)) & ~0x1f) == 0 && ((1 << (_la - 174)) & ((1 << (SqlBaseParser.ARRAY - 174)) | (1 << (SqlBaseParser.MAP - 174)) | (1 << (SqlBaseParser.SET - 174)) | (1 << (SqlBaseParser.RESET - 174)) | (1 << (SqlBaseParser.SESSION - 174)) | (1 << (SqlBaseParser.DATA - 174)) | (1 << (SqlBaseParser.START - 174)) | (1 << (SqlBaseParser.TRANSACTION - 174)) | (1 << (SqlBaseParser.COMMIT - 174)) | (1 << (SqlBaseParser.ROLLBACK - 174)) | (1 << (SqlBaseParser.WORK - 174)) | (1 << (SqlBaseParser.ISOLATION - 174)) | (1 << (SqlBaseParser.LEVEL - 174)) | (1 << (SqlBaseParser.SERIALIZABLE - 174)) | (1 << (SqlBaseParser.REPEATABLE - 174)) | (1 << (SqlBaseParser.COMMITTED - 174)) | (1 << (SqlBaseParser.UNCOMMITTED - 174)) | (1 << (SqlBaseParser.READ - 174)) | (1 << (SqlBaseParser.WRITE - 174)) | (1 << (SqlBaseParser.ONLY - 174)) | (1 << (SqlBaseParser.CALL - 174)))) !== 0) || ((((_la - 206)) & ~0x1f) == 0 && ((1 << (_la - 206)) & ((1 << (SqlBaseParser.NORMALIZE - 206)) | (1 << (SqlBaseParser.NFD - 206)) | (1 << (SqlBaseParser.NFC - 206)) | (1 << (SqlBaseParser.NFKD - 206)) | (1 << (SqlBaseParser.NFKC - 206)) | (1 << (SqlBaseParser.IF - 206)) | (1 << (SqlBaseParser.NULLIF - 206)) | (1 << (SqlBaseParser.COALESCE - 206)) | (1 << (SqlBaseParser.PLUS - 206)) | (1 << (SqlBaseParser.MINUS - 206)) | (1 << (SqlBaseParser.STRING - 206)) | (1 << (SqlBaseParser.BINARY_LITERAL - 206)) | (1 << (SqlBaseParser.INTEGER_VALUE - 206)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 206)) | (1 << (SqlBaseParser.IDENTIFIER - 206)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 206)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 206)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 206)))) !== 0)) {
                this.state = 853;
                this.expression();
                this.state = 858;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 854;
                    this.match(SqlBaseParser.T__2);
                    this.state = 855;
                    this.expression();
                    this.state = 860;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 863;
            this.match(SqlBaseParser.T__7);
            break;

        case 22:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 864;
            this.identifier();
            break;

        case 23:
            localctx = new SubstringContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 865;
            this.match(SqlBaseParser.SUBSTRING);
            this.state = 866;
            this.match(SqlBaseParser.T__1);
            this.state = 867;
            this.valueExpression(0);
            this.state = 868;
            this.match(SqlBaseParser.FROM);
            this.state = 869;
            this.valueExpression(0);
            this.state = 872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FOR) {
                this.state = 870;
                this.match(SqlBaseParser.FOR);
                this.state = 871;
                this.valueExpression(0);
            }

            this.state = 874;
            this.match(SqlBaseParser.T__3);
            break;

        case 24:
            localctx = new NormalizeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 876;
            this.match(SqlBaseParser.NORMALIZE);
            this.state = 877;
            this.match(SqlBaseParser.T__1);
            this.state = 878;
            this.valueExpression(0);
            this.state = 881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__2) {
                this.state = 879;
                this.match(SqlBaseParser.T__2);
                this.state = 880;
                this.normalForm();
            }

            this.state = 883;
            this.match(SqlBaseParser.T__3);
            break;

        case 25:
            localctx = new ExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 885;
            this.match(SqlBaseParser.EXTRACT);
            this.state = 886;
            this.match(SqlBaseParser.T__1);
            this.state = 887;
            this.identifier();
            this.state = 888;
            this.match(SqlBaseParser.FROM);
            this.state = 889;
            this.valueExpression(0);
            this.state = 890;
            this.match(SqlBaseParser.T__3);
            break;

        case 26:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 892;
            this.match(SqlBaseParser.T__1);
            this.state = 893;
            this.expression();
            this.state = 894;
            this.match(SqlBaseParser.T__3);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 908;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 906;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 898;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 899;
                    this.match(SqlBaseParser.T__6);
                    this.state = 900;
                    localctx.index = this.valueExpression(0);
                    this.state = 901;
                    this.match(SqlBaseParser.T__7);
                    break;

                case 2:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 903;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 904;
                    this.match(SqlBaseParser.T__4);
                    this.state = 905;
                    localctx.fieldName = this.identifier();
                    break;

                } 
            }
            this.state = 910;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TimeZoneSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_timeZoneSpecifier;
    return this;
}

TimeZoneSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeZoneSpecifierContext.prototype.constructor = TimeZoneSpecifierContext;


 
TimeZoneSpecifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TimeZoneIntervalContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeZoneIntervalContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneIntervalContext.prototype.constructor = TimeZoneIntervalContext;

SqlBaseParser.TimeZoneIntervalContext = TimeZoneIntervalContext;

TimeZoneIntervalContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneIntervalContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneIntervalContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
TimeZoneIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTimeZoneInterval(this);
	}
};

TimeZoneIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTimeZoneInterval(this);
	}
};


function TimeZoneStringContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeZoneStringContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneStringContext.prototype.constructor = TimeZoneStringContext;

SqlBaseParser.TimeZoneStringContext = TimeZoneStringContext;

TimeZoneStringContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneStringContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneStringContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
TimeZoneStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTimeZoneString(this);
	}
};

TimeZoneStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTimeZoneString(this);
	}
};



SqlBaseParser.TimeZoneSpecifierContext = TimeZoneSpecifierContext;

SqlBaseParser.prototype.timeZoneSpecifier = function() {

    var localctx = new TimeZoneSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SqlBaseParser.RULE_timeZoneSpecifier);
    try {
        this.state = 917;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TimeZoneIntervalContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 911;
            this.match(SqlBaseParser.TIME);
            this.state = 912;
            this.match(SqlBaseParser.ZONE);
            this.state = 913;
            this.interval();
            break;

        case 2:
            localctx = new TimeZoneStringContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 914;
            this.match(SqlBaseParser.TIME);
            this.state = 915;
            this.match(SqlBaseParser.ZONE);
            this.state = 916;
            this.match(SqlBaseParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlBaseParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlBaseParser.GTE, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparisonOperator(this);
	}
};




SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlBaseParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SqlBaseParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        _la = this._input.LA(1);
        if(!(((((_la - 214)) & ~0x1f) == 0 && ((1 << (_la - 214)) & ((1 << (SqlBaseParser.EQ - 214)) | (1 << (SqlBaseParser.NEQ - 214)) | (1 << (SqlBaseParser.LT - 214)) | (1 << (SqlBaseParser.LTE - 214)) | (1 << (SqlBaseParser.GT - 214)) | (1 << (SqlBaseParser.GTE - 214)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

BooleanValueContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

BooleanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanValue(this);
	}
};

BooleanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanValue(this);
	}
};




SqlBaseParser.BooleanValueContext = BooleanValueContext;

SqlBaseParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SqlBaseParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 921;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.TRUE || _la===SqlBaseParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_interval;
    this.sign = null; // Token
    this.from = null; // IntervalFieldContext
    this.to = null; // IntervalFieldContext
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

IntervalContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};

IntervalContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};

IntervalContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

IntervalContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

IntervalContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInterval(this);
	}
};




SqlBaseParser.IntervalContext = IntervalContext;

SqlBaseParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SqlBaseParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        this.match(SqlBaseParser.INTERVAL);
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
            this.state = 924;
            localctx.sign = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.sign = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 927;
        this.match(SqlBaseParser.STRING);
        this.state = 928;
        localctx.from = this.intervalField();
        this.state = 931;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        if(la_===1) {
            this.state = 929;
            this.match(SqlBaseParser.TO);
            this.state = 930;
            localctx.to = this.intervalField();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalField;
    return this;
}

IntervalFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;

IntervalFieldContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

IntervalFieldContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

IntervalFieldContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

IntervalFieldContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

IntervalFieldContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

IntervalFieldContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

IntervalFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntervalField(this);
	}
};

IntervalFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntervalField(this);
	}
};




SqlBaseParser.IntervalFieldContext = IntervalFieldContext;

SqlBaseParser.prototype.intervalField = function() {

    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SqlBaseParser.RULE_intervalField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        _la = this._input.LA(1);
        if(!(((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (SqlBaseParser.YEAR - 60)) | (1 << (SqlBaseParser.MONTH - 60)) | (1 << (SqlBaseParser.DAY - 60)) | (1 << (SqlBaseParser.HOUR - 60)) | (1 << (SqlBaseParser.MINUTE - 60)) | (1 << (SqlBaseParser.SECOND - 60)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

TypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

TypeContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

TypeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitType(this);
	}
};



SqlBaseParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, SqlBaseParser.RULE_type, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.state = 936;
            this.match(SqlBaseParser.ARRAY);
            this.state = 937;
            this.match(SqlBaseParser.LT);
            this.state = 938;
            this.type(0);
            this.state = 939;
            this.match(SqlBaseParser.GT);
            break;

        case 2:
            this.state = 941;
            this.match(SqlBaseParser.MAP);
            this.state = 942;
            this.match(SqlBaseParser.LT);
            this.state = 943;
            this.type(0);
            this.state = 944;
            this.match(SqlBaseParser.T__2);
            this.state = 945;
            this.type(0);
            this.state = 946;
            this.match(SqlBaseParser.GT);
            break;

        case 3:
            this.state = 948;
            this.match(SqlBaseParser.ROW);
            this.state = 949;
            this.match(SqlBaseParser.T__1);
            this.state = 950;
            this.identifier();
            this.state = 951;
            this.type(0);
            this.state = 958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 952;
                this.match(SqlBaseParser.T__2);
                this.state = 953;
                this.identifier();
                this.state = 954;
                this.type(0);
                this.state = 960;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 961;
            this.match(SqlBaseParser.T__3);
            break;

        case 4:
            this.state = 963;
            this.baseType();
            this.state = 975;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
            if(la_===1) {
                this.state = 964;
                this.match(SqlBaseParser.T__1);
                this.state = 965;
                this.typeParameter();
                this.state = 970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__2) {
                    this.state = 966;
                    this.match(SqlBaseParser.T__2);
                    this.state = 967;
                    this.typeParameter();
                    this.state = 972;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 973;
                this.match(SqlBaseParser.T__3);

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 983;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_type);
                this.state = 979;
                if (!( this.precpred(this._ctx, 5))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                }
                this.state = 980;
                this.match(SqlBaseParser.ARRAY); 
            }
            this.state = 985;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

TypeParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTypeParameter(this);
	}
};




SqlBaseParser.TypeParameterContext = TypeParameterContext;

SqlBaseParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlBaseParser.RULE_typeParameter);
    try {
        this.state = 988;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 986;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.APPROXIMATE:
        case SqlBaseParser.AT:
        case SqlBaseParser.CONFIDENCE:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.TRY:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.RESCALED:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 987;
            this.type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBaseType(this);
	}
};




SqlBaseParser.BaseTypeContext = BaseTypeContext;

SqlBaseParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SqlBaseParser.RULE_baseType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 990;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWhenClause(this);
	}
};




SqlBaseParser.WhenClauseContext = WhenClauseContext;

SqlBaseParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlBaseParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 992;
        this.match(SqlBaseParser.WHEN);
        this.state = 993;
        localctx.condition = this.expression();
        this.state = 994;
        this.match(SqlBaseParser.THEN);
        this.state = 995;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_over;
    this._expression = null; // ExpressionContext
    this.partition = []; // of ExpressionContexts
    return this;
}

OverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OverContext.prototype.constructor = OverContext;

OverContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

OverContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

OverContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

OverContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

OverContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OverContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterOver(this);
	}
};

OverContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitOver(this);
	}
};




SqlBaseParser.OverContext = OverContext;

SqlBaseParser.prototype.over = function() {

    var localctx = new OverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlBaseParser.RULE_over);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.match(SqlBaseParser.OVER);
        this.state = 998;
        this.match(SqlBaseParser.T__1);
        this.state = 1009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PARTITION) {
            this.state = 999;
            this.match(SqlBaseParser.PARTITION);
            this.state = 1000;
            this.match(SqlBaseParser.BY);
            this.state = 1001;
            localctx._expression = this.expression();
            localctx.partition.push(localctx._expression);
            this.state = 1006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__2) {
                this.state = 1002;
                this.match(SqlBaseParser.T__2);
                this.state = 1003;
                localctx._expression = this.expression();
                localctx.partition.push(localctx._expression);
                this.state = 1008;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
            this.state = 1011;
            this.windowFrame();
        }

        this.state = 1014;
        this.match(SqlBaseParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    return this;
}

WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    } else {
        return this.getTypedRuleContext(FrameBoundContext,i);
    }
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

WindowFrameContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

WindowFrameContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

WindowFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWindowFrame(this);
	}
};

WindowFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWindowFrame(this);
	}
};




SqlBaseParser.WindowFrameContext = WindowFrameContext;

SqlBaseParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlBaseParser.RULE_windowFrame);
    try {
        this.state = 1032;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1016;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 1017;
            localctx.start = this.frameBound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1018;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 1019;
            localctx.start = this.frameBound();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1020;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 1021;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1022;
            localctx.start = this.frameBound();
            this.state = 1023;
            this.match(SqlBaseParser.AND);
            this.state = 1024;
            localctx.end = this.frameBound();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1026;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 1027;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1028;
            localctx.start = this.frameBound();
            this.state = 1029;
            this.match(SqlBaseParser.AND);
            this.state = 1030;
            localctx.end = this.frameBound();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_frameBound;
    return this;
}

FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;


 
FrameBoundContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BoundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
BoundedFrameContext.prototype.constructor = BoundedFrameContext;

SqlBaseParser.BoundedFrameContext = BoundedFrameContext;

BoundedFrameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BoundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

BoundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};
BoundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBoundedFrame(this);
	}
};

BoundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBoundedFrame(this);
	}
};


function UnboundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnboundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
UnboundedFrameContext.prototype.constructor = UnboundedFrameContext;

SqlBaseParser.UnboundedFrameContext = UnboundedFrameContext;

UnboundedFrameContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

UnboundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

UnboundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};
UnboundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnboundedFrame(this);
	}
};

UnboundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnboundedFrame(this);
	}
};


function CurrentRowBoundContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentRowBoundContext.prototype = Object.create(FrameBoundContext.prototype);
CurrentRowBoundContext.prototype.constructor = CurrentRowBoundContext;

SqlBaseParser.CurrentRowBoundContext = CurrentRowBoundContext;

CurrentRowBoundContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

CurrentRowBoundContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};
CurrentRowBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCurrentRowBound(this);
	}
};

CurrentRowBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCurrentRowBound(this);
	}
};



SqlBaseParser.FrameBoundContext = FrameBoundContext;

SqlBaseParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlBaseParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 1043;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1034;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 1035;
            localctx.boundType = this.match(SqlBaseParser.PRECEDING);
            break;

        case 2:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1036;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 1037;
            localctx.boundType = this.match(SqlBaseParser.FOLLOWING);
            break;

        case 3:
            localctx = new CurrentRowBoundContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1038;
            this.match(SqlBaseParser.CURRENT);
            this.state = 1039;
            this.match(SqlBaseParser.ROW);
            break;

        case 4:
            localctx = new BoundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1040;
            this.expression();
            this.state = 1041;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PRECEDING || _la===SqlBaseParser.FOLLOWING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplainOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_explainOption;
    return this;
}

ExplainOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainOptionContext.prototype.constructor = ExplainOptionContext;


 
ExplainOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainFormatContext(parser, ctx) {
	ExplainOptionContext.call(this, parser);
    this.value = null; // Token;
    ExplainOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainFormatContext.prototype = Object.create(ExplainOptionContext.prototype);
ExplainFormatContext.prototype.constructor = ExplainFormatContext;

SqlBaseParser.ExplainFormatContext = ExplainFormatContext;

ExplainFormatContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

ExplainFormatContext.prototype.TEXT = function() {
    return this.getToken(SqlBaseParser.TEXT, 0);
};

ExplainFormatContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
};
ExplainFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplainFormat(this);
	}
};

ExplainFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplainFormat(this);
	}
};


function ExplainTypeContext(parser, ctx) {
	ExplainOptionContext.call(this, parser);
    this.value = null; // Token;
    ExplainOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainTypeContext.prototype = Object.create(ExplainOptionContext.prototype);
ExplainTypeContext.prototype.constructor = ExplainTypeContext;

SqlBaseParser.ExplainTypeContext = ExplainTypeContext;

ExplainTypeContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

ExplainTypeContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

ExplainTypeContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
};
ExplainTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplainType(this);
	}
};

ExplainTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplainType(this);
	}
};



SqlBaseParser.ExplainOptionContext = ExplainOptionContext;

SqlBaseParser.prototype.explainOption = function() {

    var localctx = new ExplainOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlBaseParser.RULE_explainOption);
    var _la = 0; // Token type
    try {
        this.state = 1049;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.FORMAT:
            localctx = new ExplainFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1045;
            this.match(SqlBaseParser.FORMAT);
            this.state = 1046;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.TEXT || _la===SqlBaseParser.GRAPHVIZ)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SqlBaseParser.TYPE:
            localctx = new ExplainTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1047;
            this.match(SqlBaseParser.TYPE);
            this.state = 1048;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.LOGICAL || _la===SqlBaseParser.DISTRIBUTED)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CallArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_callArgument;
    return this;
}

CallArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallArgumentContext.prototype.constructor = CallArgumentContext;


 
CallArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PositionalArgumentContext(parser, ctx) {
	CallArgumentContext.call(this, parser);
    CallArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionalArgumentContext.prototype = Object.create(CallArgumentContext.prototype);
PositionalArgumentContext.prototype.constructor = PositionalArgumentContext;

SqlBaseParser.PositionalArgumentContext = PositionalArgumentContext;

PositionalArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PositionalArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPositionalArgument(this);
	}
};

PositionalArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPositionalArgument(this);
	}
};


function NamedArgumentContext(parser, ctx) {
	CallArgumentContext.call(this, parser);
    CallArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedArgumentContext.prototype = Object.create(CallArgumentContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

SqlBaseParser.NamedArgumentContext = NamedArgumentContext;

NamedArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNamedArgument(this);
	}
};



SqlBaseParser.CallArgumentContext = CallArgumentContext;

SqlBaseParser.prototype.callArgument = function() {

    var localctx = new CallArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlBaseParser.RULE_callArgument);
    try {
        this.state = 1056;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PositionalArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1051;
            this.expression();
            break;

        case 2:
            localctx = new NamedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1052;
            this.identifier();
            this.state = 1053;
            this.match(SqlBaseParser.T__8);
            this.state = 1054;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_privilege;
    return this;
}

PrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeContext.prototype.constructor = PrivilegeContext;

PrivilegeContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

PrivilegeContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

PrivilegeContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

PrivilegeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPrivilege(this);
	}
};

PrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPrivilege(this);
	}
};




SqlBaseParser.PrivilegeContext = PrivilegeContext;

SqlBaseParser.prototype.privilege = function() {

    var localctx = new PrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlBaseParser.RULE_privilege);
    try {
        this.state = 1062;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1058;
            this.match(SqlBaseParser.SELECT);
            break;
        case SqlBaseParser.DELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1059;
            this.match(SqlBaseParser.DELETE);
            break;
        case SqlBaseParser.INSERT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1060;
            this.match(SqlBaseParser.INSERT);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.APPROXIMATE:
        case SqlBaseParser.AT:
        case SqlBaseParser.CONFIDENCE:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.TRY:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.RESCALED:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 4);
            this.state = 1061;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQualifiedName(this);
	}
};




SqlBaseParser.QualifiedNameContext = QualifiedNameContext;

SqlBaseParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlBaseParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1064;
        this.identifier();
        this.state = 1069;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,124,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1065;
                this.match(SqlBaseParser.T__4);
                this.state = 1066;
                this.identifier(); 
            }
            this.state = 1071;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,124,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BackQuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BackQuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
BackQuotedIdentifierContext.prototype.constructor = BackQuotedIdentifierContext;

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

BackQuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
};
BackQuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBackQuotedIdentifier(this);
	}
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(IdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

SqlBaseParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function() {
    return this.getTypedRuleContext(QuotedIdentifierContext,0);
};
QuotedIdentifierAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuotedIdentifierAlternative(this);
	}
};


function DigitIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DigitIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
DigitIdentifierContext.prototype.constructor = DigitIdentifierContext;

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

DigitIdentifierContext.prototype.DIGIT_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
};
DigitIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDigitIdentifier(this);
	}
};

DigitIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDigitIdentifier(this);
	}
};


function UnquotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnquotedIdentifier(this);
	}
};



SqlBaseParser.IdentifierContext = IdentifierContext;

SqlBaseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SqlBaseParser.RULE_identifier);
    try {
        this.state = 1077;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.IDENTIFIER:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1072;
            this.match(SqlBaseParser.IDENTIFIER);
            break;
        case SqlBaseParser.QUOTED_IDENTIFIER:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1073;
            this.quotedIdentifier();
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.APPROXIMATE:
        case SqlBaseParser.AT:
        case SqlBaseParser.CONFIDENCE:
        case SqlBaseParser.NO:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.TINYINT:
        case SqlBaseParser.SMALLINT:
        case SqlBaseParser.INTEGER:
        case SqlBaseParser.DATE:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.DAY:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.ROW:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PUBLIC:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.TRY:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.USE:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.TO:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.POISSONIZED:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.RESCALED:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.MAP:
        case SqlBaseParser.SET:
        case SqlBaseParser.RESET:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.DATA:
        case SqlBaseParser.START:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.WORK:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.READ:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.CALL:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.IF:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.COALESCE:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1074;
            this.nonReserved();
            break;
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new BackQuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1075;
            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
            break;
        case SqlBaseParser.DIGIT_IDENTIFIER:
            localctx = new DigitIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1076;
            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_quotedIdentifier;
    return this;
}

QuotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
};

QuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuotedIdentifier(this);
	}
};




SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

SqlBaseParser.prototype.quotedIdentifier = function() {

    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SqlBaseParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1079;
        this.match(SqlBaseParser.QUOTED_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;


 
NumberContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntegerLiteral(this);
	}
};



SqlBaseParser.NumberContext = NumberContext;

SqlBaseParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SqlBaseParser.RULE_number);
    try {
        this.state = 1083;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.DECIMAL_VALUE:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1081;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;
        case SqlBaseParser.INTEGER_VALUE:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1082;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.SCHEMAS = function() {
    return this.getToken(SqlBaseParser.SCHEMAS, 0);
};

NonReservedContext.prototype.CATALOGS = function() {
    return this.getToken(SqlBaseParser.CATALOGS, 0);
};

NonReservedContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

NonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

NonReservedContext.prototype.TINYINT = function() {
    return this.getToken(SqlBaseParser.TINYINT, 0);
};

NonReservedContext.prototype.SMALLINT = function() {
    return this.getToken(SqlBaseParser.SMALLINT, 0);
};

NonReservedContext.prototype.INTEGER = function() {
    return this.getToken(SqlBaseParser.INTEGER, 0);
};

NonReservedContext.prototype.DATE = function() {
    return this.getToken(SqlBaseParser.DATE, 0);
};

NonReservedContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

NonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

NonReservedContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

NonReservedContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

NonReservedContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

NonReservedContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

NonReservedContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

NonReservedContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

NonReservedContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

NonReservedContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

NonReservedContext.prototype.TEXT = function() {
    return this.getToken(SqlBaseParser.TEXT, 0);
};

NonReservedContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

NonReservedContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.SYSTEM = function() {
    return this.getToken(SqlBaseParser.SYSTEM, 0);
};

NonReservedContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlBaseParser.BERNOULLI, 0);
};

NonReservedContext.prototype.POISSONIZED = function() {
    return this.getToken(SqlBaseParser.POISSONIZED, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

NonReservedContext.prototype.RESCALED = function() {
    return this.getToken(SqlBaseParser.RESCALED, 0);
};

NonReservedContext.prototype.APPROXIMATE = function() {
    return this.getToken(SqlBaseParser.APPROXIMATE, 0);
};

NonReservedContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

NonReservedContext.prototype.CONFIDENCE = function() {
    return this.getToken(SqlBaseParser.CONFIDENCE, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

NonReservedContext.prototype.NULLIF = function() {
    return this.getToken(SqlBaseParser.NULLIF, 0);
};

NonReservedContext.prototype.COALESCE = function() {
    return this.getToken(SqlBaseParser.COALESCE, 0);
};

NonReservedContext.prototype.TRY = function() {
    return this.getToken(SqlBaseParser.TRY, 0);
};

NonReservedContext.prototype.normalForm = function() {
    return this.getTypedRuleContext(NormalFormContext,0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

NonReservedContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};

NonReservedContext.prototype.ISOLATION = function() {
    return this.getToken(SqlBaseParser.ISOLATION, 0);
};

NonReservedContext.prototype.LEVEL = function() {
    return this.getToken(SqlBaseParser.LEVEL, 0);
};

NonReservedContext.prototype.SERIALIZABLE = function() {
    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
};

NonReservedContext.prototype.REPEATABLE = function() {
    return this.getToken(SqlBaseParser.REPEATABLE, 0);
};

NonReservedContext.prototype.COMMITTED = function() {
    return this.getToken(SqlBaseParser.COMMITTED, 0);
};

NonReservedContext.prototype.UNCOMMITTED = function() {
    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
};

NonReservedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

NonReservedContext.prototype.WRITE = function() {
    return this.getToken(SqlBaseParser.WRITE, 0);
};

NonReservedContext.prototype.ONLY = function() {
    return this.getToken(SqlBaseParser.ONLY, 0);
};

NonReservedContext.prototype.CALL = function() {
    return this.getToken(SqlBaseParser.CALL, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

NonReservedContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

NonReservedContext.prototype.PUBLIC = function() {
    return this.getToken(SqlBaseParser.PUBLIC, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

NonReservedContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

NonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNonReserved(this);
	}
};

NonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNonReserved(this);
	}
};




SqlBaseParser.NonReservedContext = NonReservedContext;

SqlBaseParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SqlBaseParser.RULE_nonReserved);
    try {
        this.state = 1170;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SHOW:
            this.enterOuterAlt(localctx, 1);
            this.state = 1085;
            this.match(SqlBaseParser.SHOW);
            break;
        case SqlBaseParser.TABLES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1086;
            this.match(SqlBaseParser.TABLES);
            break;
        case SqlBaseParser.COLUMNS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1087;
            this.match(SqlBaseParser.COLUMNS);
            break;
        case SqlBaseParser.COLUMN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1088;
            this.match(SqlBaseParser.COLUMN);
            break;
        case SqlBaseParser.PARTITIONS:
            this.enterOuterAlt(localctx, 5);
            this.state = 1089;
            this.match(SqlBaseParser.PARTITIONS);
            break;
        case SqlBaseParser.FUNCTIONS:
            this.enterOuterAlt(localctx, 6);
            this.state = 1090;
            this.match(SqlBaseParser.FUNCTIONS);
            break;
        case SqlBaseParser.SCHEMAS:
            this.enterOuterAlt(localctx, 7);
            this.state = 1091;
            this.match(SqlBaseParser.SCHEMAS);
            break;
        case SqlBaseParser.CATALOGS:
            this.enterOuterAlt(localctx, 8);
            this.state = 1092;
            this.match(SqlBaseParser.CATALOGS);
            break;
        case SqlBaseParser.SESSION:
            this.enterOuterAlt(localctx, 9);
            this.state = 1093;
            this.match(SqlBaseParser.SESSION);
            break;
        case SqlBaseParser.ADD:
            this.enterOuterAlt(localctx, 10);
            this.state = 1094;
            this.match(SqlBaseParser.ADD);
            break;
        case SqlBaseParser.OVER:
            this.enterOuterAlt(localctx, 11);
            this.state = 1095;
            this.match(SqlBaseParser.OVER);
            break;
        case SqlBaseParser.PARTITION:
            this.enterOuterAlt(localctx, 12);
            this.state = 1096;
            this.match(SqlBaseParser.PARTITION);
            break;
        case SqlBaseParser.RANGE:
            this.enterOuterAlt(localctx, 13);
            this.state = 1097;
            this.match(SqlBaseParser.RANGE);
            break;
        case SqlBaseParser.ROWS:
            this.enterOuterAlt(localctx, 14);
            this.state = 1098;
            this.match(SqlBaseParser.ROWS);
            break;
        case SqlBaseParser.PRECEDING:
            this.enterOuterAlt(localctx, 15);
            this.state = 1099;
            this.match(SqlBaseParser.PRECEDING);
            break;
        case SqlBaseParser.FOLLOWING:
            this.enterOuterAlt(localctx, 16);
            this.state = 1100;
            this.match(SqlBaseParser.FOLLOWING);
            break;
        case SqlBaseParser.CURRENT:
            this.enterOuterAlt(localctx, 17);
            this.state = 1101;
            this.match(SqlBaseParser.CURRENT);
            break;
        case SqlBaseParser.ROW:
            this.enterOuterAlt(localctx, 18);
            this.state = 1102;
            this.match(SqlBaseParser.ROW);
            break;
        case SqlBaseParser.MAP:
            this.enterOuterAlt(localctx, 19);
            this.state = 1103;
            this.match(SqlBaseParser.MAP);
            break;
        case SqlBaseParser.ARRAY:
            this.enterOuterAlt(localctx, 20);
            this.state = 1104;
            this.match(SqlBaseParser.ARRAY);
            break;
        case SqlBaseParser.TINYINT:
            this.enterOuterAlt(localctx, 21);
            this.state = 1105;
            this.match(SqlBaseParser.TINYINT);
            break;
        case SqlBaseParser.SMALLINT:
            this.enterOuterAlt(localctx, 22);
            this.state = 1106;
            this.match(SqlBaseParser.SMALLINT);
            break;
        case SqlBaseParser.INTEGER:
            this.enterOuterAlt(localctx, 23);
            this.state = 1107;
            this.match(SqlBaseParser.INTEGER);
            break;
        case SqlBaseParser.DATE:
            this.enterOuterAlt(localctx, 24);
            this.state = 1108;
            this.match(SqlBaseParser.DATE);
            break;
        case SqlBaseParser.TIME:
            this.enterOuterAlt(localctx, 25);
            this.state = 1109;
            this.match(SqlBaseParser.TIME);
            break;
        case SqlBaseParser.TIMESTAMP:
            this.enterOuterAlt(localctx, 26);
            this.state = 1110;
            this.match(SqlBaseParser.TIMESTAMP);
            break;
        case SqlBaseParser.INTERVAL:
            this.enterOuterAlt(localctx, 27);
            this.state = 1111;
            this.match(SqlBaseParser.INTERVAL);
            break;
        case SqlBaseParser.ZONE:
            this.enterOuterAlt(localctx, 28);
            this.state = 1112;
            this.match(SqlBaseParser.ZONE);
            break;
        case SqlBaseParser.YEAR:
            this.enterOuterAlt(localctx, 29);
            this.state = 1113;
            this.match(SqlBaseParser.YEAR);
            break;
        case SqlBaseParser.MONTH:
            this.enterOuterAlt(localctx, 30);
            this.state = 1114;
            this.match(SqlBaseParser.MONTH);
            break;
        case SqlBaseParser.DAY:
            this.enterOuterAlt(localctx, 31);
            this.state = 1115;
            this.match(SqlBaseParser.DAY);
            break;
        case SqlBaseParser.HOUR:
            this.enterOuterAlt(localctx, 32);
            this.state = 1116;
            this.match(SqlBaseParser.HOUR);
            break;
        case SqlBaseParser.MINUTE:
            this.enterOuterAlt(localctx, 33);
            this.state = 1117;
            this.match(SqlBaseParser.MINUTE);
            break;
        case SqlBaseParser.SECOND:
            this.enterOuterAlt(localctx, 34);
            this.state = 1118;
            this.match(SqlBaseParser.SECOND);
            break;
        case SqlBaseParser.EXPLAIN:
            this.enterOuterAlt(localctx, 35);
            this.state = 1119;
            this.match(SqlBaseParser.EXPLAIN);
            break;
        case SqlBaseParser.ANALYZE:
            this.enterOuterAlt(localctx, 36);
            this.state = 1120;
            this.match(SqlBaseParser.ANALYZE);
            break;
        case SqlBaseParser.FORMAT:
            this.enterOuterAlt(localctx, 37);
            this.state = 1121;
            this.match(SqlBaseParser.FORMAT);
            break;
        case SqlBaseParser.TYPE:
            this.enterOuterAlt(localctx, 38);
            this.state = 1122;
            this.match(SqlBaseParser.TYPE);
            break;
        case SqlBaseParser.TEXT:
            this.enterOuterAlt(localctx, 39);
            this.state = 1123;
            this.match(SqlBaseParser.TEXT);
            break;
        case SqlBaseParser.GRAPHVIZ:
            this.enterOuterAlt(localctx, 40);
            this.state = 1124;
            this.match(SqlBaseParser.GRAPHVIZ);
            break;
        case SqlBaseParser.LOGICAL:
            this.enterOuterAlt(localctx, 41);
            this.state = 1125;
            this.match(SqlBaseParser.LOGICAL);
            break;
        case SqlBaseParser.DISTRIBUTED:
            this.enterOuterAlt(localctx, 42);
            this.state = 1126;
            this.match(SqlBaseParser.DISTRIBUTED);
            break;
        case SqlBaseParser.TABLESAMPLE:
            this.enterOuterAlt(localctx, 43);
            this.state = 1127;
            this.match(SqlBaseParser.TABLESAMPLE);
            break;
        case SqlBaseParser.SYSTEM:
            this.enterOuterAlt(localctx, 44);
            this.state = 1128;
            this.match(SqlBaseParser.SYSTEM);
            break;
        case SqlBaseParser.BERNOULLI:
            this.enterOuterAlt(localctx, 45);
            this.state = 1129;
            this.match(SqlBaseParser.BERNOULLI);
            break;
        case SqlBaseParser.POISSONIZED:
            this.enterOuterAlt(localctx, 46);
            this.state = 1130;
            this.match(SqlBaseParser.POISSONIZED);
            break;
        case SqlBaseParser.USE:
            this.enterOuterAlt(localctx, 47);
            this.state = 1131;
            this.match(SqlBaseParser.USE);
            break;
        case SqlBaseParser.TO:
            this.enterOuterAlt(localctx, 48);
            this.state = 1132;
            this.match(SqlBaseParser.TO);
            break;
        case SqlBaseParser.RESCALED:
            this.enterOuterAlt(localctx, 49);
            this.state = 1133;
            this.match(SqlBaseParser.RESCALED);
            break;
        case SqlBaseParser.APPROXIMATE:
            this.enterOuterAlt(localctx, 50);
            this.state = 1134;
            this.match(SqlBaseParser.APPROXIMATE);
            break;
        case SqlBaseParser.AT:
            this.enterOuterAlt(localctx, 51);
            this.state = 1135;
            this.match(SqlBaseParser.AT);
            break;
        case SqlBaseParser.CONFIDENCE:
            this.enterOuterAlt(localctx, 52);
            this.state = 1136;
            this.match(SqlBaseParser.CONFIDENCE);
            break;
        case SqlBaseParser.SET:
            this.enterOuterAlt(localctx, 53);
            this.state = 1137;
            this.match(SqlBaseParser.SET);
            break;
        case SqlBaseParser.RESET:
            this.enterOuterAlt(localctx, 54);
            this.state = 1138;
            this.match(SqlBaseParser.RESET);
            break;
        case SqlBaseParser.VIEW:
            this.enterOuterAlt(localctx, 55);
            this.state = 1139;
            this.match(SqlBaseParser.VIEW);
            break;
        case SqlBaseParser.REPLACE:
            this.enterOuterAlt(localctx, 56);
            this.state = 1140;
            this.match(SqlBaseParser.REPLACE);
            break;
        case SqlBaseParser.IF:
            this.enterOuterAlt(localctx, 57);
            this.state = 1141;
            this.match(SqlBaseParser.IF);
            break;
        case SqlBaseParser.NULLIF:
            this.enterOuterAlt(localctx, 58);
            this.state = 1142;
            this.match(SqlBaseParser.NULLIF);
            break;
        case SqlBaseParser.COALESCE:
            this.enterOuterAlt(localctx, 59);
            this.state = 1143;
            this.match(SqlBaseParser.COALESCE);
            break;
        case SqlBaseParser.TRY:
            this.enterOuterAlt(localctx, 60);
            this.state = 1144;
            this.match(SqlBaseParser.TRY);
            break;
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NFKC:
            this.enterOuterAlt(localctx, 61);
            this.state = 1145;
            this.normalForm();
            break;
        case SqlBaseParser.POSITION:
            this.enterOuterAlt(localctx, 62);
            this.state = 1146;
            this.match(SqlBaseParser.POSITION);
            break;
        case SqlBaseParser.NO:
            this.enterOuterAlt(localctx, 63);
            this.state = 1147;
            this.match(SqlBaseParser.NO);
            break;
        case SqlBaseParser.DATA:
            this.enterOuterAlt(localctx, 64);
            this.state = 1148;
            this.match(SqlBaseParser.DATA);
            break;
        case SqlBaseParser.START:
            this.enterOuterAlt(localctx, 65);
            this.state = 1149;
            this.match(SqlBaseParser.START);
            break;
        case SqlBaseParser.TRANSACTION:
            this.enterOuterAlt(localctx, 66);
            this.state = 1150;
            this.match(SqlBaseParser.TRANSACTION);
            break;
        case SqlBaseParser.COMMIT:
            this.enterOuterAlt(localctx, 67);
            this.state = 1151;
            this.match(SqlBaseParser.COMMIT);
            break;
        case SqlBaseParser.ROLLBACK:
            this.enterOuterAlt(localctx, 68);
            this.state = 1152;
            this.match(SqlBaseParser.ROLLBACK);
            break;
        case SqlBaseParser.WORK:
            this.enterOuterAlt(localctx, 69);
            this.state = 1153;
            this.match(SqlBaseParser.WORK);
            break;
        case SqlBaseParser.ISOLATION:
            this.enterOuterAlt(localctx, 70);
            this.state = 1154;
            this.match(SqlBaseParser.ISOLATION);
            break;
        case SqlBaseParser.LEVEL:
            this.enterOuterAlt(localctx, 71);
            this.state = 1155;
            this.match(SqlBaseParser.LEVEL);
            break;
        case SqlBaseParser.SERIALIZABLE:
            this.enterOuterAlt(localctx, 72);
            this.state = 1156;
            this.match(SqlBaseParser.SERIALIZABLE);
            break;
        case SqlBaseParser.REPEATABLE:
            this.enterOuterAlt(localctx, 73);
            this.state = 1157;
            this.match(SqlBaseParser.REPEATABLE);
            break;
        case SqlBaseParser.COMMITTED:
            this.enterOuterAlt(localctx, 74);
            this.state = 1158;
            this.match(SqlBaseParser.COMMITTED);
            break;
        case SqlBaseParser.UNCOMMITTED:
            this.enterOuterAlt(localctx, 75);
            this.state = 1159;
            this.match(SqlBaseParser.UNCOMMITTED);
            break;
        case SqlBaseParser.READ:
            this.enterOuterAlt(localctx, 76);
            this.state = 1160;
            this.match(SqlBaseParser.READ);
            break;
        case SqlBaseParser.WRITE:
            this.enterOuterAlt(localctx, 77);
            this.state = 1161;
            this.match(SqlBaseParser.WRITE);
            break;
        case SqlBaseParser.ONLY:
            this.enterOuterAlt(localctx, 78);
            this.state = 1162;
            this.match(SqlBaseParser.ONLY);
            break;
        case SqlBaseParser.CALL:
            this.enterOuterAlt(localctx, 79);
            this.state = 1163;
            this.match(SqlBaseParser.CALL);
            break;
        case SqlBaseParser.GRANT:
            this.enterOuterAlt(localctx, 80);
            this.state = 1164;
            this.match(SqlBaseParser.GRANT);
            break;
        case SqlBaseParser.REVOKE:
            this.enterOuterAlt(localctx, 81);
            this.state = 1165;
            this.match(SqlBaseParser.REVOKE);
            break;
        case SqlBaseParser.PRIVILEGES:
            this.enterOuterAlt(localctx, 82);
            this.state = 1166;
            this.match(SqlBaseParser.PRIVILEGES);
            break;
        case SqlBaseParser.PUBLIC:
            this.enterOuterAlt(localctx, 83);
            this.state = 1167;
            this.match(SqlBaseParser.PUBLIC);
            break;
        case SqlBaseParser.OPTION:
            this.enterOuterAlt(localctx, 84);
            this.state = 1168;
            this.match(SqlBaseParser.OPTION);
            break;
        case SqlBaseParser.SUBSTRING:
            this.enterOuterAlt(localctx, 85);
            this.state = 1169;
            this.match(SqlBaseParser.SUBSTRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NormalFormContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_normalForm;
    return this;
}

NormalFormContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NormalFormContext.prototype.constructor = NormalFormContext;

NormalFormContext.prototype.NFD = function() {
    return this.getToken(SqlBaseParser.NFD, 0);
};

NormalFormContext.prototype.NFC = function() {
    return this.getToken(SqlBaseParser.NFC, 0);
};

NormalFormContext.prototype.NFKD = function() {
    return this.getToken(SqlBaseParser.NFKD, 0);
};

NormalFormContext.prototype.NFKC = function() {
    return this.getToken(SqlBaseParser.NFKC, 0);
};

NormalFormContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNormalForm(this);
	}
};

NormalFormContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNormalForm(this);
	}
};




SqlBaseParser.NormalFormContext = NormalFormContext;

SqlBaseParser.prototype.normalForm = function() {

    var localctx = new NormalFormContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SqlBaseParser.RULE_normalForm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1172;
        _la = this._input.LA(1);
        if(!(((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (SqlBaseParser.NFD - 207)) | (1 << (SqlBaseParser.NFC - 207)) | (1 << (SqlBaseParser.NFKD - 207)) | (1 << (SqlBaseParser.NFKC - 207)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlBaseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 23:
			return this.relation_sempred(localctx, predIndex);
	case 31:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 34:
			return this.valueExpression_sempred(localctx, predIndex);
	case 35:
			return this.primaryExpression_sempred(localctx, predIndex);
	case 41:
			return this.type_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlBaseParser.prototype.relation_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 2);
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 3);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 1);
		case 6:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 7);
		case 8:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SqlBaseParser = SqlBaseParser;
